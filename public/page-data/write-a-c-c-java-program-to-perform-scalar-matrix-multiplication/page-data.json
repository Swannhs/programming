{"componentChunkName":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx","path":"/write-a-c-c-java-program-to-perform-scalar-matrix-multiplication","result":{"data":{"post":{"slug":"/write-a-c-c-java-program-to-perform-scalar-matrix-multiplication","title":"Write a C/C++/Java program to perform Scalar matrix multiplication.","date":"16.04.2020","tags":[{"name":"array","slug":"array"}],"description":null,"canonicalUrl":null,"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Write a C/C++/Java program to perform Scalar matrix multiplication.\",\n  \"category\": \"Array Program Index\",\n  \"tags\": [\"array\"],\n  \"date\": \"2020-04-16T00:00:00.000Z\",\n  \"thumbnailText\": \"Index\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"C Implementation\"), mdx(\"h3\", null, \"28. Write a C program to perform Scalar matrix multiplication.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-c\"\n  }, \"//Write a C program to perform Scalar matrix multiplication.\\n#include <stdio.h>\\nvoid main()\\n{\\n    int arr[3][3],crr[3][3],i,j,n;\\n    printf(\\\"Input elements in the first matrix :\\\\n\\\");\\n    for(i=0; i<3; i++)\\n    {\\n        for(j=0; j<3; j++)\\n        {\\n            printf(\\\"element - [%d],[%d] : \\\",i,j);\\n            scanf(\\\"%d\\\",&arr[i][j]);\\n        }\\n    }\\n    printf(\\\"\\\\nThe First matrix is :\\\\n\\\");\\n    for(i=0; i<3; i++)\\n    {\\n        printf(\\\"\\\\n\\\");\\n        for(j=0; j<3; j++)\\n            printf(\\\"%d\\\\t\\\",arr[i][j]);\\n    }\\n\\n    printf(\\\"\\\\nenter the multiplication value :\\\\n\\\");\\n    scanf(\\\"%d\\\",&n);\\n\\n    for(i=0; i<3; i++)\\n        for(j=0; j<3; j++)\\n            crr[i][j]=n*arr[i][j];\\n    printf(\\\"\\\\nThe subtraction of two matrix is : \\\\n\\\");\\n    for(i=0; i<3; i++)\\n    {\\n        printf(\\\"\\\\n\\\");\\n        for(j=0; j<3; j++)\\n            printf(\\\"%d\\\\t\\\",crr[i][j]);\\n    }\\n}\\n\")), mdx(\"h3\", null, \"Output\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"Input elements in the first matrix :\\nelement - [0],[0] : 1 2 3\\nelement - [0],[1] : element - [0],[2] : element - [1],[0] : 2 3 4\\nelement - [1],[1] : element - [1],[2] : element - [2],[0] : 3 4 5\\nelement - [2],[1] : element - [2],[2] :\\nThe First matrix is :\\n\\n1       2       3\\n2       3       4\\n3       4       5\\nenter the multiplication value :\\n2\\n\\nThe subtraction of two matrix is :\\n\\n2       4       6\\n4       6       8\\n6       8       10\\n\")), mdx(\"h2\", null, \"C++ Implementation\"), mdx(\"h3\", null, \"28. Write a C++ program to perform Scalar matrix multiplication.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-c\"\n  }, \"//Write a C++ program to perform Scalar matrix multiplication.\\n\\n#include <iostream>\\nusing namespace std;\\nint  main()\\n{\\n    int arr[3][3],crr[3][3],i,j,n;\\n    cout << \\\"Input elements in the first matrix :\\\\n\\\";\\n    for(i=0; i<3; i++)\\n    {\\n        for(j=0; j<3; j++)\\n        {\\n            cout << \\\"element -  : [\\\" << i << \\\"][\\\" << j << \\\"]\\\";\\n            cin >> arr[i][j];\\n        }\\n    }\\n    cout << \\\"\\\\nThe First matrix is :\\\\n\\\";\\n    for(i=0; i<3; i++)\\n    {\\n        cout << \\\"\\\\n\\\";\\n        for(j=0; j<3; j++)\\n            cout << \\\"\\\\t\\\" << arr[i][j];\\n    }\\n    cout << \\\"\\\\nenter the multiplication value :\\\\n\\\";\\n    cin >> n;\\n    for(i=0; i<3; i++)\\n        for(j=0; j<3; j++)\\n            crr[i][j]=n*arr[i][j];\\n    cout << \\\"\\\\nThe subtraction of two matrix is : \\\\n\\\";\\n    for(i=0; i<3; i++)\\n    {\\n        cout << \\\"\\\\n\\\";\\n        for(j=0; j<3; j++)\\n            cout << \\\"\\\\t\\\" << crr[i][j];\\n    }\\n}\\n\")), mdx(\"h3\", null, \"Output\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"Input elements in the first matrix :\\nelement - [0],[0] : 1 2 3\\nelement - [0],[1] : element - [0],[2] : element - [1],[0] : 2 3 4\\nelement - [1],[1] : element - [1],[2] : element - [2],[0] : 3 4 5\\nelement - [2],[1] : element - [2],[2] :\\nThe First matrix is :\\n\\n1       2       3\\n2       3       4\\n3       4       5\\nenter the multiplication value :\\n2\\n\\nThe subtraction of two matrix is :\\n\\n2       4       6\\n4       6       8\\n6       8       10\\n\")), mdx(\"h2\", null, \"Java Implementation\"), mdx(\"h3\", null, \"28. Write a Java program to perform Scalar matrix multiplication.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"//Write a Java program to perform Scalar matrix multiplication.\\nimport java.util.Scanner;\\npublic class Funycode {\\n    public static void main(String[] args) {\\n\\n        Scanner z=new Scanner(System.in);\\n        int arr[][]= new int[3][3],crr[][]= new int[3][3],i,j,n;\\n        System.out.println(\\\"Input elements in the first matrix :\\\");\\n        for(i=0; i<3; i++)\\n        {\\n            for(j=0; j<3; j++)\\n            {\\n                System.out.println(\\\"element - : \\\"+\\\"[\\\"+i+\\\"]\\\"+\\\"[\\\"+j+\\\"]\\\");\\n                arr[i][j] = z.nextInt();\\n            }\\n        }\\n        System.out.println(\\\"The First matrix is :\\\");\\n        for(i=0; i<3; i++)\\n        {\\n            System.out.println();\\n            for(j=0; j<3; j++)\\n                System.out.println(\\\"\\\\t\\\"+arr[i][j]);\\n        }\\n        System.out.println(\\\"enter the multiplication value :\\\");\\n        n = z.nextInt();\\n        for(i=0; i<3; i++)\\n            for(j=0; j<3; j++)\\n                crr[i][j]=n*arr[i][j];\\n        System.out.println(\\\"The subtraction of two matrix is : \\\");\\n        for(i=0; i<3; i++)\\n        {\\n            System.out.println();\\n            for(j=0; j<3; j++)\\n                System.out.printf(\\\"\\\\t\\\"+crr[i][j]);\\n        }\\n    }\\n}\\n\")), mdx(\"h3\", null, \"Output\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"Input elements in the first matrix :\\nelement - [0],[0] : 1 2 3\\nelement - [0],[1] : element - [0],[2] : element - [1],[0] : 2 3 4\\nelement - [1],[1] : element - [1],[2] : element - [2],[0] : 3 4 5\\nelement - [2],[1] : element - [2],[2] :\\nThe First matrix is :\\n\\n1       2       3\\n2       3       4\\n3       4       5\\nenter the multiplication value :\\n2\\n\\nThe subtraction of two matrix is :\\n\\n2       4       6\\n4       6       8\\n6       8       10\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"C Implementation 28. Write a C program to perform Scalar matrix multiplication. Output C++ Implementation 28. Write a C++ program to performâ€¦","timeToRead":1,"banner":null}},"pageContext":{"slug":"/write-a-c-c-java-program-to-perform-scalar-matrix-multiplication","formatString":"DD.MM.YYYY"}},"staticQueryHashes":["2744905544","3090400250","318001574"]}