{"expireTime":9007200883706346000,"key":"gatsby-plugin-mdx-entire-payload-3284a69d41e85dc9951c76cb1f3fd594--undefined","val":{"mdast":{"type":"root","children":[{"type":"heading","depth":2,"children":[{"type":"text","value":"C Implementation","position":{"start":{"line":2,"column":4,"offset":5},"end":{"line":2,"column":20,"offset":21},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":2},"end":{"line":2,"column":20,"offset":21},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"24. Write a C program to create A record contains name of cricketer, his age, number of test matches that he has played and the average runs that he has scored in each test match. Create an array of structure to hold records of 20 such cricketer and then write a program to read these records and arrange them in ascending order by average runs. Use the qusort( ) standard library function.","position":{"start":{"line":3,"column":5,"offset":27},"end":{"line":3,"column":395,"offset":417},"indent":[]}}],"position":{"start":{"line":3,"column":1,"offset":23},"end":{"line":3,"column":395,"offset":417},"indent":[]}},{"type":"code","lang":"c","meta":null,"value":"//Write a C program to create A record contains name of cricketer, his age, number of test matches that he has played and the average runs that he has scored in each test match. Create an array of structure to hold records of 20 such cricketer and then write a program to read these records and arrange them in ascending order by average runs. Use the qusort( ) standard library function.\n#include<stdio.h>\n#include<conio.h>\n#include<stdlib.h>\nstruct cricketers\n{\n    int avg;\n    char name[30];\n    int age;\n    int totalmatch;\n};\nstruct cricketers bd[2]={20,\"Tamim\",30,180,30,\"Sakib al\",29,200};\nint compare(const void * a, const void * b)\n{\n    return (*(int*)a - *(int*)b);\n}\nint main()\n{\n    int i;\n    qsort(bd, 2, sizeof(struct cricketers), compare);\n    for (i = 0; i < 2; i++)\n    {\n        printf(\"\\nName         : %s\", bd[i].name);\n        printf(\"\\nAge          : %d\", bd[i].age);\n        printf(\"\\nTotal Matches: %d\", bd[i].totalmatch);\n        printf(\"\\nAvg          : %d\\n\", bd[i].avg);\n    }\n}","position":{"start":{"line":4,"column":1,"offset":419},"end":{"line":33,"column":4,"offset":1466},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Output","position":{"start":{"line":34,"column":5,"offset":1472},"end":{"line":34,"column":11,"offset":1478},"indent":[]}}],"position":{"start":{"line":34,"column":1,"offset":1468},"end":{"line":34,"column":11,"offset":1478},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"Name         : Tamim\nAge          : 30\nTotal Matches: 180\nAvg          : 20\n\nName         : Sakib al\nAge          : 29\nTotal Matches: 200\nAvg          : 30","position":{"start":{"line":35,"column":1,"offset":1480},"end":{"line":45,"column":4,"offset":1653},"indent":[1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"C++ Implementation","position":{"start":{"line":47,"column":4,"offset":1660},"end":{"line":47,"column":22,"offset":1678},"indent":[]}}],"position":{"start":{"line":47,"column":1,"offset":1657},"end":{"line":47,"column":22,"offset":1678},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"24. Write a C++ program to create A record contains name of cricketer, his age, number of test matches that he has played and the average runs that he has scored in each test match. Create an array of structure to hold records of 20 such cricketer and then write a program to read these records and arrange them in ascending order by average runs. Use the qusort( ) standard library function.","position":{"start":{"line":48,"column":5,"offset":1684},"end":{"line":48,"column":397,"offset":2076},"indent":[]}}],"position":{"start":{"line":48,"column":1,"offset":1680},"end":{"line":48,"column":397,"offset":2076},"indent":[]}},{"type":"code","lang":"c","meta":null,"value":"//Write a C++ program to create A record contains name of cricketer, his age, number of test matches that he has played and the average runs that he has scored in each test match. Create an array of structure to hold records of 20 such cricketer and then write a program to read these records and arrange them in ascending order by average runs. Use the qusort( ) standard library function.\n\n#include<iostream>\n#include <string.h>\n#include<conio.h>\n#include<stdlib.h>\nusing namespace std;\nstruct cricketers\n{\n    int avg;\n    char name[30];\n    int age;\n    int totalmatch;\n};\nstruct cricketers bd[2]={20,\"Tamim\",30,180,30,\"Sakib al\",29,200};\nint compare(const void * a, const void * b)\n{\n    return (*(int*)a - *(int*)b);\n}\nint main()\n{\n    int i;\n    qsort(bd, 2, sizeof(struct cricketers), compare);\n    for (i = 0; i < 2; i++)\n    {\n        cout << \"\\nName         : \" <<  bd[i].name;\n        cout << \"\\nAge          : \" <<  bd[i].age;\n        cout << \"\\nTotal Matches: \" <<  bd[i].totalmatch;\n        cout << \"\\nAvg          : \" <<  bd[i].avg << endl;\n    }\n}","position":{"start":{"line":49,"column":1,"offset":2078},"end":{"line":81,"column":4,"offset":3183},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Output","position":{"start":{"line":82,"column":5,"offset":3189},"end":{"line":82,"column":11,"offset":3195},"indent":[]}}],"position":{"start":{"line":82,"column":1,"offset":3185},"end":{"line":82,"column":11,"offset":3195},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"Name         : Tamim\nAge          : 30\nTotal Matches: 180\nAvg          : 20\n\nName         : Sakib al\nAge          : 29\nTotal Matches: 200\nAvg          : 30","position":{"start":{"line":83,"column":1,"offset":3197},"end":{"line":93,"column":4,"offset":3370},"indent":[1,1,1,1,1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"Write a C/C++/Java program to create A record contains name of cricketer, his age, number of test matches that he has played and the average runs that he has scored in each test match. Create an array of structure to hold records of 20 such cricketer and then write a program to read these records and arrange them in ascending order by average runs. Use the qusort( ) standard library function.\",\"category\":\"Structure And Union Index\",\"tags\":[\"#c\",\"#c++\",\"#java\",\"#tutorial\"],\"date\":\"2020-04-16T00:00:00.000Z\",\"thumbnailText\":\"Index\"}","position":{"start":{"line":96,"column":1,"offset":3374},"end":{"line":96,"column":574,"offset":3947},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":96,"column":574,"offset":3947}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Write a C/C++/Java program to create A record contains name of cricketer, his age, number of test matches that he has played and the average runs that he has scored in each test match. Create an array of structure to hold records of 20 such cricketer and then write a program to read these records and arrange them in ascending order by average runs. Use the qusort( ) standard library function.\",\n  \"category\": \"Structure And Union Index\",\n  \"tags\": [\"#c\", \"#c++\", \"#java\", \"#tutorial\"],\n  \"date\": \"2020-04-16T00:00:00.000Z\",\n  \"thumbnailText\": \"Index\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"C Implementation\"), mdx(\"h3\", null, \"24. Write a C program to create A record contains name of cricketer, his age, number of test matches that he has played and the average runs that he has scored in each test match. Create an array of structure to hold records of 20 such cricketer and then write a program to read these records and arrange them in ascending order by average runs. Use the qusort( ) standard library function.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-c\"\n  }, \"//Write a C program to create A record contains name of cricketer, his age, number of test matches that he has played and the average runs that he has scored in each test match. Create an array of structure to hold records of 20 such cricketer and then write a program to read these records and arrange them in ascending order by average runs. Use the qusort( ) standard library function.\\n#include<stdio.h>\\n#include<conio.h>\\n#include<stdlib.h>\\nstruct cricketers\\n{\\n    int avg;\\n    char name[30];\\n    int age;\\n    int totalmatch;\\n};\\nstruct cricketers bd[2]={20,\\\"Tamim\\\",30,180,30,\\\"Sakib al\\\",29,200};\\nint compare(const void * a, const void * b)\\n{\\n    return (*(int*)a - *(int*)b);\\n}\\nint main()\\n{\\n    int i;\\n    qsort(bd, 2, sizeof(struct cricketers), compare);\\n    for (i = 0; i < 2; i++)\\n    {\\n        printf(\\\"\\\\nName         : %s\\\", bd[i].name);\\n        printf(\\\"\\\\nAge          : %d\\\", bd[i].age);\\n        printf(\\\"\\\\nTotal Matches: %d\\\", bd[i].totalmatch);\\n        printf(\\\"\\\\nAvg          : %d\\\\n\\\", bd[i].avg);\\n    }\\n}\\n\")), mdx(\"h3\", null, \"Output\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"Name         : Tamim\\nAge          : 30\\nTotal Matches: 180\\nAvg          : 20\\n\\nName         : Sakib al\\nAge          : 29\\nTotal Matches: 200\\nAvg          : 30\\n\")), mdx(\"h2\", null, \"C++ Implementation\"), mdx(\"h3\", null, \"24. Write a C++ program to create A record contains name of cricketer, his age, number of test matches that he has played and the average runs that he has scored in each test match. Create an array of structure to hold records of 20 such cricketer and then write a program to read these records and arrange them in ascending order by average runs. Use the qusort( ) standard library function.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-c\"\n  }, \"//Write a C++ program to create A record contains name of cricketer, his age, number of test matches that he has played and the average runs that he has scored in each test match. Create an array of structure to hold records of 20 such cricketer and then write a program to read these records and arrange them in ascending order by average runs. Use the qusort( ) standard library function.\\n\\n#include<iostream>\\n#include <string.h>\\n#include<conio.h>\\n#include<stdlib.h>\\nusing namespace std;\\nstruct cricketers\\n{\\n    int avg;\\n    char name[30];\\n    int age;\\n    int totalmatch;\\n};\\nstruct cricketers bd[2]={20,\\\"Tamim\\\",30,180,30,\\\"Sakib al\\\",29,200};\\nint compare(const void * a, const void * b)\\n{\\n    return (*(int*)a - *(int*)b);\\n}\\nint main()\\n{\\n    int i;\\n    qsort(bd, 2, sizeof(struct cricketers), compare);\\n    for (i = 0; i < 2; i++)\\n    {\\n        cout << \\\"\\\\nName         : \\\" <<  bd[i].name;\\n        cout << \\\"\\\\nAge          : \\\" <<  bd[i].age;\\n        cout << \\\"\\\\nTotal Matches: \\\" <<  bd[i].totalmatch;\\n        cout << \\\"\\\\nAvg          : \\\" <<  bd[i].avg << endl;\\n    }\\n}\\n\")), mdx(\"h3\", null, \"Output\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"Name         : Tamim\\nAge          : 30\\nTotal Matches: 180\\nAvg          : 20\\n\\nName         : Sakib al\\nAge          : 29\\nTotal Matches: 200\\nAvg          : 30\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"Write a C/C++/Java program to create A record contains name of cricketer, his age, number of test matches that he has played and the average runs that he has scored in each test match. Create an array of structure to hold records of 20 such cricketer and then write a program to read these records and arrange them in ascending order by average runs. Use the qusort( ) standard library function.\",\n  \"category\": \"Structure And Union Index\",\n  \"tags\": [\"#c\", \"#c++\", \"#java\", \"#tutorial\"],\n  \"date\": \"2020-04-16T00:00:00.000Z\",\n  \"thumbnailText\": \"Index\"\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h2>{`C Implementation`}</h2>\n    <h3>{`24. Write a C program to create A record contains name of cricketer, his age, number of test matches that he has played and the average runs that he has scored in each test match. Create an array of structure to hold records of 20 such cricketer and then write a program to read these records and arrange them in ascending order by average runs. Use the qusort( ) standard library function.`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-c\"\n      }}>{`//Write a C program to create A record contains name of cricketer, his age, number of test matches that he has played and the average runs that he has scored in each test match. Create an array of structure to hold records of 20 such cricketer and then write a program to read these records and arrange them in ascending order by average runs. Use the qusort( ) standard library function.\n#include<stdio.h>\n#include<conio.h>\n#include<stdlib.h>\nstruct cricketers\n{\n    int avg;\n    char name[30];\n    int age;\n    int totalmatch;\n};\nstruct cricketers bd[2]={20,\"Tamim\",30,180,30,\"Sakib al\",29,200};\nint compare(const void * a, const void * b)\n{\n    return (*(int*)a - *(int*)b);\n}\nint main()\n{\n    int i;\n    qsort(bd, 2, sizeof(struct cricketers), compare);\n    for (i = 0; i < 2; i++)\n    {\n        printf(\"\\\\nName         : %s\", bd[i].name);\n        printf(\"\\\\nAge          : %d\", bd[i].age);\n        printf(\"\\\\nTotal Matches: %d\", bd[i].totalmatch);\n        printf(\"\\\\nAvg          : %d\\\\n\", bd[i].avg);\n    }\n}\n`}</code></pre>\n    <h3>{`Output`}</h3>\n    <pre><code parentName=\"pre\" {...{}}>{`Name         : Tamim\nAge          : 30\nTotal Matches: 180\nAvg          : 20\n\nName         : Sakib al\nAge          : 29\nTotal Matches: 200\nAvg          : 30\n`}</code></pre>\n    <h2>{`C++ Implementation`}</h2>\n    <h3>{`24. Write a C++ program to create A record contains name of cricketer, his age, number of test matches that he has played and the average runs that he has scored in each test match. Create an array of structure to hold records of 20 such cricketer and then write a program to read these records and arrange them in ascending order by average runs. Use the qusort( ) standard library function.`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-c\"\n      }}>{`//Write a C++ program to create A record contains name of cricketer, his age, number of test matches that he has played and the average runs that he has scored in each test match. Create an array of structure to hold records of 20 such cricketer and then write a program to read these records and arrange them in ascending order by average runs. Use the qusort( ) standard library function.\n\n#include<iostream>\n#include <string.h>\n#include<conio.h>\n#include<stdlib.h>\nusing namespace std;\nstruct cricketers\n{\n    int avg;\n    char name[30];\n    int age;\n    int totalmatch;\n};\nstruct cricketers bd[2]={20,\"Tamim\",30,180,30,\"Sakib al\",29,200};\nint compare(const void * a, const void * b)\n{\n    return (*(int*)a - *(int*)b);\n}\nint main()\n{\n    int i;\n    qsort(bd, 2, sizeof(struct cricketers), compare);\n    for (i = 0; i < 2; i++)\n    {\n        cout << \"\\\\nName         : \" <<  bd[i].name;\n        cout << \"\\\\nAge          : \" <<  bd[i].age;\n        cout << \"\\\\nTotal Matches: \" <<  bd[i].totalmatch;\n        cout << \"\\\\nAvg          : \" <<  bd[i].avg << endl;\n    }\n}\n`}</code></pre>\n    <h3>{`Output`}</h3>\n    <pre><code parentName=\"pre\" {...{}}>{`Name         : Tamim\nAge          : 30\nTotal Matches: 180\nAvg          : 20\n\nName         : Sakib al\nAge          : 29\nTotal Matches: 200\nAvg          : 30\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}