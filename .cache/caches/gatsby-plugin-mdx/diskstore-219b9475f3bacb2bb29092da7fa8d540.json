{"expireTime":9007200883706345000,"key":"gatsby-plugin-mdx-entire-payload-be33e3fc29b77e7b413cc3d3a0979114--undefined","val":{"mdast":{"type":"root","children":[{"type":"heading","depth":2,"children":[{"type":"text","value":"C Implementation","position":{"start":{"line":2,"column":4,"offset":5},"end":{"line":2,"column":20,"offset":21},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":2},"end":{"line":2,"column":20,"offset":21},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"8. Write a C program to get the largest element of an array using recursion.","position":{"start":{"line":3,"column":5,"offset":27},"end":{"line":3,"column":81,"offset":103},"indent":[]}}],"position":{"start":{"line":3,"column":1,"offset":23},"end":{"line":3,"column":81,"offset":103},"indent":[]}},{"type":"code","lang":"c","meta":null,"value":"//Write a C program to get the largest element of an array using recursion.\n\n#include<stdio.h>\nint main(){\n    int k[]={1,2,30,4,5};\n    printf(\"%d\",arrayPrint(sizeof(k)/sizeof(int),k,0,0));\n}\nint arrayPrint(int length,int k[],int i,int large){\n    if(length<=i){\n        return large;\n    }\n    if(large<k[i])\n    {\n        large=k[i];\n    }\n    arrayPrint(length,k,++i,large);\n}","position":{"start":{"line":4,"column":1,"offset":105},"end":{"line":22,"column":4,"offset":512},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Output","position":{"start":{"line":23,"column":5,"offset":518},"end":{"line":23,"column":11,"offset":524},"indent":[]}}],"position":{"start":{"line":23,"column":1,"offset":514},"end":{"line":23,"column":11,"offset":524},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"30","position":{"start":{"line":24,"column":1,"offset":526},"end":{"line":26,"column":4,"offset":538},"indent":[1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"C++ Implementation","position":{"start":{"line":27,"column":4,"offset":543},"end":{"line":27,"column":22,"offset":561},"indent":[]}}],"position":{"start":{"line":27,"column":1,"offset":540},"end":{"line":27,"column":22,"offset":561},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"8. Write a C++ program to get the largest element of an array using recursion.","position":{"start":{"line":28,"column":5,"offset":567},"end":{"line":28,"column":83,"offset":645},"indent":[]}}],"position":{"start":{"line":28,"column":1,"offset":563},"end":{"line":28,"column":83,"offset":645},"indent":[]}},{"type":"code","lang":"c","meta":null,"value":"//Write a C++ program to get the largest element of an array using recursion.\n\n#include<iostream>\nusing namespace std;\nint main(){\n    int k[]={1,2,30,4,5};\n    cout << arrayPrint(sizeof(k)/sizeof(int),k,0,0) ;\n}\nint arrayPrint(int length,int k[],int i,int large){\n    if(length<=i){\n        return large;\n    }\n    if(large<k[i])\n    {\n        large=k[i];\n    }\n    arrayPrint(length,k,++i,large);\n}","position":{"start":{"line":29,"column":1,"offset":647},"end":{"line":48,"column":4,"offset":1075},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Output","position":{"start":{"line":49,"column":5,"offset":1081},"end":{"line":49,"column":11,"offset":1087},"indent":[]}}],"position":{"start":{"line":49,"column":1,"offset":1077},"end":{"line":49,"column":11,"offset":1087},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"30","position":{"start":{"line":50,"column":1,"offset":1089},"end":{"line":52,"column":4,"offset":1101},"indent":[1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Java Implementation","position":{"start":{"line":54,"column":4,"offset":1108},"end":{"line":54,"column":23,"offset":1127},"indent":[]}}],"position":{"start":{"line":54,"column":1,"offset":1105},"end":{"line":54,"column":23,"offset":1127},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"8. Write a Java program to get the largest element of an array using recursion.","position":{"start":{"line":55,"column":5,"offset":1133},"end":{"line":55,"column":84,"offset":1212},"indent":[]}}],"position":{"start":{"line":55,"column":1,"offset":1129},"end":{"line":55,"column":84,"offset":1212},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"//Write a Java program to get the largest element of an array using recursion.\nimport java.util.Scanner;\npublic class Funycode {\n    public static void main(String[] args) {\n        Scanner z = new Scanner(System.in);\n        int k[]={1,2,30,4,5};\n        System.out.println(arrayPrint(k.length/int.length,k,0,0));\n    }\n    static int arrayPrint(int length,int k[],int i,int large){\n        if(length<=i){\n            return large;\n        }\n        if(large<k[i])\n        {\n            large=k[i];\n        }\n        arrayPrint(length,k,++i,large);\n    }\n\n}","position":{"start":{"line":56,"column":1,"offset":1214},"end":{"line":77,"column":4,"offset":1803},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Output","position":{"start":{"line":78,"column":5,"offset":1809},"end":{"line":78,"column":11,"offset":1815},"indent":[]}}],"position":{"start":{"line":78,"column":1,"offset":1805},"end":{"line":78,"column":11,"offset":1815},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"30","position":{"start":{"line":79,"column":1,"offset":1817},"end":{"line":81,"column":4,"offset":1829},"indent":[1,1]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"Write a C/C++/Java program to get the largest element of an array using recursion.\",\"category\":\"Recursion Function Index\",\"tags\":[\"#c\",\"#c++\",\"#java\",\"#tutorial\"],\"date\":\"2020-04-16T00:00:00.000Z\",\"thumbnailText\":\"Index\"}","position":{"start":{"line":84,"column":1,"offset":1833},"end":{"line":84,"column":260,"offset":2092},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":84,"column":260,"offset":2092}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Write a C/C++/Java program to get the largest element of an array using recursion.\",\n  \"category\": \"Recursion Function Index\",\n  \"tags\": [\"#c\", \"#c++\", \"#java\", \"#tutorial\"],\n  \"date\": \"2020-04-16T00:00:00.000Z\",\n  \"thumbnailText\": \"Index\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"C Implementation\"), mdx(\"h3\", null, \"8. Write a C program to get the largest element of an array using recursion.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-c\"\n  }, \"//Write a C program to get the largest element of an array using recursion.\\n\\n#include<stdio.h>\\nint main(){\\n    int k[]={1,2,30,4,5};\\n    printf(\\\"%d\\\",arrayPrint(sizeof(k)/sizeof(int),k,0,0));\\n}\\nint arrayPrint(int length,int k[],int i,int large){\\n    if(length<=i){\\n        return large;\\n    }\\n    if(large<k[i])\\n    {\\n        large=k[i];\\n    }\\n    arrayPrint(length,k,++i,large);\\n}\\n\")), mdx(\"h3\", null, \"Output\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"30\\n\")), mdx(\"h2\", null, \"C++ Implementation\"), mdx(\"h3\", null, \"8. Write a C++ program to get the largest element of an array using recursion.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-c\"\n  }, \"//Write a C++ program to get the largest element of an array using recursion.\\n\\n#include<iostream>\\nusing namespace std;\\nint main(){\\n    int k[]={1,2,30,4,5};\\n    cout << arrayPrint(sizeof(k)/sizeof(int),k,0,0) ;\\n}\\nint arrayPrint(int length,int k[],int i,int large){\\n    if(length<=i){\\n        return large;\\n    }\\n    if(large<k[i])\\n    {\\n        large=k[i];\\n    }\\n    arrayPrint(length,k,++i,large);\\n}\\n\")), mdx(\"h3\", null, \"Output\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"30\\n\")), mdx(\"h2\", null, \"Java Implementation\"), mdx(\"h3\", null, \"8. Write a Java program to get the largest element of an array using recursion.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"//Write a Java program to get the largest element of an array using recursion.\\nimport java.util.Scanner;\\npublic class Funycode {\\n    public static void main(String[] args) {\\n        Scanner z = new Scanner(System.in);\\n        int k[]={1,2,30,4,5};\\n        System.out.println(arrayPrint(k.length/int.length,k,0,0));\\n    }\\n    static int arrayPrint(int length,int k[],int i,int large){\\n        if(length<=i){\\n            return large;\\n        }\\n        if(large<k[i])\\n        {\\n            large=k[i];\\n        }\\n        arrayPrint(length,k,++i,large);\\n    }\\n\\n}\\n\")), mdx(\"h3\", null, \"Output\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"30\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"Write a C/C++/Java program to get the largest element of an array using recursion.\",\n  \"category\": \"Recursion Function Index\",\n  \"tags\": [\"#c\", \"#c++\", \"#java\", \"#tutorial\"],\n  \"date\": \"2020-04-16T00:00:00.000Z\",\n  \"thumbnailText\": \"Index\"\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h2>{`C Implementation`}</h2>\n    <h3>{`8. Write a C program to get the largest element of an array using recursion.`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-c\"\n      }}>{`//Write a C program to get the largest element of an array using recursion.\n\n#include<stdio.h>\nint main(){\n    int k[]={1,2,30,4,5};\n    printf(\"%d\",arrayPrint(sizeof(k)/sizeof(int),k,0,0));\n}\nint arrayPrint(int length,int k[],int i,int large){\n    if(length<=i){\n        return large;\n    }\n    if(large<k[i])\n    {\n        large=k[i];\n    }\n    arrayPrint(length,k,++i,large);\n}\n`}</code></pre>\n    <h3>{`Output`}</h3>\n    <pre><code parentName=\"pre\" {...{}}>{`30\n`}</code></pre>\n    <h2>{`C++ Implementation`}</h2>\n    <h3>{`8. Write a C++ program to get the largest element of an array using recursion.`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-c\"\n      }}>{`//Write a C++ program to get the largest element of an array using recursion.\n\n#include<iostream>\nusing namespace std;\nint main(){\n    int k[]={1,2,30,4,5};\n    cout << arrayPrint(sizeof(k)/sizeof(int),k,0,0) ;\n}\nint arrayPrint(int length,int k[],int i,int large){\n    if(length<=i){\n        return large;\n    }\n    if(large<k[i])\n    {\n        large=k[i];\n    }\n    arrayPrint(length,k,++i,large);\n}\n`}</code></pre>\n    <h3>{`Output`}</h3>\n    <pre><code parentName=\"pre\" {...{}}>{`30\n`}</code></pre>\n    <h2>{`Java Implementation`}</h2>\n    <h3>{`8. Write a Java program to get the largest element of an array using recursion.`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`//Write a Java program to get the largest element of an array using recursion.\nimport java.util.Scanner;\npublic class Funycode {\n    public static void main(String[] args) {\n        Scanner z = new Scanner(System.in);\n        int k[]={1,2,30,4,5};\n        System.out.println(arrayPrint(k.length/int.length,k,0,0));\n    }\n    static int arrayPrint(int length,int k[],int i,int large){\n        if(length<=i){\n            return large;\n        }\n        if(large<k[i])\n        {\n            large=k[i];\n        }\n        arrayPrint(length,k,++i,large);\n    }\n\n}\n`}</code></pre>\n    <h3>{`Output`}</h3>\n    <pre><code parentName=\"pre\" {...{}}>{`30\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}