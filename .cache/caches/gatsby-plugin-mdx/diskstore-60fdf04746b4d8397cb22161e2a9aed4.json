{"expireTime":9007200883706345000,"key":"gatsby-plugin-mdx-entire-payload-3b1e92ed96dd73ca77dcaf87e8c957d7--undefined","val":{"mdast":{"type":"root","children":[{"type":"heading","depth":2,"children":[{"type":"text","value":"C Implementation","position":{"start":{"line":2,"column":4,"offset":5},"end":{"line":2,"column":20,"offset":21},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":2},"end":{"line":2,"column":20,"offset":21},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"11. Write a C program accept the details of employee and display them using structure. Details consist of Employee ID, Name, Designation, Department, Salary.","position":{"start":{"line":3,"column":5,"offset":27},"end":{"line":3,"column":162,"offset":184},"indent":[]}}],"position":{"start":{"line":3,"column":1,"offset":23},"end":{"line":3,"column":162,"offset":184},"indent":[]}},{"type":"code","lang":"c","meta":null,"value":"//Write a C++ program accept the details of employee and display them using structure. Details consist of Employee ID, Name, Designation, Department, Salary.\n#include<stdio.h>\nstruct employee{\n    char name[100];\n    int id;\n    char Designation[20];\n    char Department[50];\n    float Salary;\n};\nint main(){\n    struct employee emp1;\n    printf(\"input employee details\\n\");\n    printf(\"Enter employee Name: \");\n    fgets(emp1.name,sizeof(emp1.name),stdin);\n    printf(\"Enter employee ID: \");\n    scanf(\"%d\",&emp1.id);\n    getchar();\n    printf(\"Enter employee Designation: \");\n    fgets(emp1.Designation,sizeof(emp1.Designation),stdin);\n    printf(\"Enter employee Department: \");\n    fgets(emp1.Department,sizeof(emp1.Department),stdin);\n    printf(\"Enter employee Salary: \");\n    scanf(\"%f\",&emp1.Salary);\n    printf(\"\\n\\nEmployee Details:\\n\");\n    printf(\"Name        : %s\",emp1.name);\n    printf(\"ID          : %d\\n\",emp1.id);\n    printf(\"Designation : %s\",emp1.Designation);\n    printf(\"Department  : %s\",emp1.Department);\n    printf(\"Salary      : %f\\n\",emp1.Salary);\n}","position":{"start":{"line":4,"column":1,"offset":186},"end":{"line":35,"column":4,"offset":1301},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Output","position":{"start":{"line":36,"column":5,"offset":1307},"end":{"line":36,"column":11,"offset":1313},"indent":[]}}],"position":{"start":{"line":36,"column":1,"offset":1303},"end":{"line":36,"column":11,"offset":1313},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"input employee details\nEnter employee Name: Ahosanul Hasan\nEnter employee ID: 16105001\nEnter employee Designation: Funycode\nEnter employee Department: Programming\nEnter employee Salary: 110000\n\n\nEmployee Details:\nName        : Ahosanul Hasan\n\nID          : 16105001\nDesignation : Funycode\n\nDepartment  : Programming\n\nSalary      : 110000","position":{"start":{"line":37,"column":1,"offset":1315},"end":{"line":55,"column":4,"offset":1678},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"C++ Implementation","position":{"start":{"line":57,"column":4,"offset":1685},"end":{"line":57,"column":22,"offset":1703},"indent":[]}}],"position":{"start":{"line":57,"column":1,"offset":1682},"end":{"line":57,"column":22,"offset":1703},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"11. Write a C++ program accept the details of employee and display them using structure. Details consist of Employee ID, Name, Designation, Department, Salary.","position":{"start":{"line":58,"column":5,"offset":1709},"end":{"line":58,"column":164,"offset":1868},"indent":[]}}],"position":{"start":{"line":58,"column":1,"offset":1705},"end":{"line":58,"column":164,"offset":1868},"indent":[]}},{"type":"code","lang":"c","meta":null,"value":"//Write a C++ program to find accept the details of employee and display them using structure. Details consist of Employee ID, Name, Designation, Department, Salary.\n\n#include<iostream>\n#include <string.h>\nusing namespace std;\nstruct employee{\n    char name[100];\n    int id;\n    char Designation[20];\n    char Department[50];\n    float Salary;\n};\nint main(){\n    struct employee emp1;\n    cout << \"input employee details\\n\";\n    cout << \"Enter employee Name: \";\n    fgets(emp1.name,sizeof(emp1.name),stdin);\n    cout << \"Enter employee ID: \";\n    cin >> emp1.id;\n    getchar();\n    cout << \"Enter employee Designation: \";\n    fgets(emp1.Designation,sizeof(emp1.Designation),stdin);\n    cout << \"Enter employee Department: \";\n    fgets(emp1.Department,sizeof(emp1.Department),stdin);\n    cout << \"Enter employee Salary: \";\n    cin >> emp1.Salary;\n    cout << \"\\n\\nEmployee Details:\\n\";\n    cout << \"Name        : \"<< emp1.name << endl;\n    cout << \"ID          : \"<< emp1.id << endl;\n    cout << \"Designation : \"<< emp1.Designation << endl;\n    cout << \"Department  : \"<< emp1.Department << endl;\n    cout << \"Salary      : \"<< emp1.Salary << endl;\n}","position":{"start":{"line":59,"column":1,"offset":1870},"end":{"line":93,"column":4,"offset":3063},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Output","position":{"start":{"line":94,"column":5,"offset":3069},"end":{"line":94,"column":11,"offset":3075},"indent":[]}}],"position":{"start":{"line":94,"column":1,"offset":3065},"end":{"line":94,"column":11,"offset":3075},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"input employee details\nEnter employee Name: Ahosanul Hasan\nEnter employee ID: 16105001\nEnter employee Designation: Funycode\nEnter employee Department: Programming\nEnter employee Salary: 110000\n\n\nEmployee Details:\nName        : Ahosanul Hasan\n\nID          : 16105001\nDesignation : Funycode\n\nDepartment  : Programming\n\nSalary      : 110000","position":{"start":{"line":95,"column":1,"offset":3077},"end":{"line":113,"column":4,"offset":3440},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"Write a C/C++/Java program accept the details of employee and display them using structure. Details consist of Employee ID, Name, Designation, Department, Salary.\",\"category\":\"Structure And Union Index\",\"tags\":[\"#c\",\"#c++\",\"#java\",\"#tutorial\"],\"date\":\"2020-04-16T00:00:00.000Z\",\"thumbnailText\":\"Index\"}","position":{"start":{"line":116,"column":1,"offset":3444},"end":{"line":116,"column":341,"offset":3784},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":116,"column":341,"offset":3784}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Write a C/C++/Java program accept the details of employee and display them using structure. Details consist of Employee ID, Name, Designation, Department, Salary.\",\n  \"category\": \"Structure And Union Index\",\n  \"tags\": [\"#c\", \"#c++\", \"#java\", \"#tutorial\"],\n  \"date\": \"2020-04-16T00:00:00.000Z\",\n  \"thumbnailText\": \"Index\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"C Implementation\"), mdx(\"h3\", null, \"11. Write a C program accept the details of employee and display them using structure. Details consist of Employee ID, Name, Designation, Department, Salary.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-c\"\n  }, \"//Write a C++ program accept the details of employee and display them using structure. Details consist of Employee ID, Name, Designation, Department, Salary.\\n#include<stdio.h>\\nstruct employee{\\n    char name[100];\\n    int id;\\n    char Designation[20];\\n    char Department[50];\\n    float Salary;\\n};\\nint main(){\\n    struct employee emp1;\\n    printf(\\\"input employee details\\\\n\\\");\\n    printf(\\\"Enter employee Name: \\\");\\n    fgets(emp1.name,sizeof(emp1.name),stdin);\\n    printf(\\\"Enter employee ID: \\\");\\n    scanf(\\\"%d\\\",&emp1.id);\\n    getchar();\\n    printf(\\\"Enter employee Designation: \\\");\\n    fgets(emp1.Designation,sizeof(emp1.Designation),stdin);\\n    printf(\\\"Enter employee Department: \\\");\\n    fgets(emp1.Department,sizeof(emp1.Department),stdin);\\n    printf(\\\"Enter employee Salary: \\\");\\n    scanf(\\\"%f\\\",&emp1.Salary);\\n    printf(\\\"\\\\n\\\\nEmployee Details:\\\\n\\\");\\n    printf(\\\"Name        : %s\\\",emp1.name);\\n    printf(\\\"ID          : %d\\\\n\\\",emp1.id);\\n    printf(\\\"Designation : %s\\\",emp1.Designation);\\n    printf(\\\"Department  : %s\\\",emp1.Department);\\n    printf(\\\"Salary      : %f\\\\n\\\",emp1.Salary);\\n}\\n\")), mdx(\"h3\", null, \"Output\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"input employee details\\nEnter employee Name: Ahosanul Hasan\\nEnter employee ID: 16105001\\nEnter employee Designation: Funycode\\nEnter employee Department: Programming\\nEnter employee Salary: 110000\\n\\n\\nEmployee Details:\\nName        : Ahosanul Hasan\\n\\nID          : 16105001\\nDesignation : Funycode\\n\\nDepartment  : Programming\\n\\nSalary      : 110000\\n\")), mdx(\"h2\", null, \"C++ Implementation\"), mdx(\"h3\", null, \"11. Write a C++ program accept the details of employee and display them using structure. Details consist of Employee ID, Name, Designation, Department, Salary.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-c\"\n  }, \"//Write a C++ program to find accept the details of employee and display them using structure. Details consist of Employee ID, Name, Designation, Department, Salary.\\n\\n#include<iostream>\\n#include <string.h>\\nusing namespace std;\\nstruct employee{\\n    char name[100];\\n    int id;\\n    char Designation[20];\\n    char Department[50];\\n    float Salary;\\n};\\nint main(){\\n    struct employee emp1;\\n    cout << \\\"input employee details\\\\n\\\";\\n    cout << \\\"Enter employee Name: \\\";\\n    fgets(emp1.name,sizeof(emp1.name),stdin);\\n    cout << \\\"Enter employee ID: \\\";\\n    cin >> emp1.id;\\n    getchar();\\n    cout << \\\"Enter employee Designation: \\\";\\n    fgets(emp1.Designation,sizeof(emp1.Designation),stdin);\\n    cout << \\\"Enter employee Department: \\\";\\n    fgets(emp1.Department,sizeof(emp1.Department),stdin);\\n    cout << \\\"Enter employee Salary: \\\";\\n    cin >> emp1.Salary;\\n    cout << \\\"\\\\n\\\\nEmployee Details:\\\\n\\\";\\n    cout << \\\"Name        : \\\"<< emp1.name << endl;\\n    cout << \\\"ID          : \\\"<< emp1.id << endl;\\n    cout << \\\"Designation : \\\"<< emp1.Designation << endl;\\n    cout << \\\"Department  : \\\"<< emp1.Department << endl;\\n    cout << \\\"Salary      : \\\"<< emp1.Salary << endl;\\n}\\n\")), mdx(\"h3\", null, \"Output\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"input employee details\\nEnter employee Name: Ahosanul Hasan\\nEnter employee ID: 16105001\\nEnter employee Designation: Funycode\\nEnter employee Department: Programming\\nEnter employee Salary: 110000\\n\\n\\nEmployee Details:\\nName        : Ahosanul Hasan\\n\\nID          : 16105001\\nDesignation : Funycode\\n\\nDepartment  : Programming\\n\\nSalary      : 110000\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"Write a C/C++/Java program accept the details of employee and display them using structure. Details consist of Employee ID, Name, Designation, Department, Salary.\",\n  \"category\": \"Structure And Union Index\",\n  \"tags\": [\"#c\", \"#c++\", \"#java\", \"#tutorial\"],\n  \"date\": \"2020-04-16T00:00:00.000Z\",\n  \"thumbnailText\": \"Index\"\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h2>{`C Implementation`}</h2>\n    <h3>{`11. Write a C program accept the details of employee and display them using structure. Details consist of Employee ID, Name, Designation, Department, Salary.`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-c\"\n      }}>{`//Write a C++ program accept the details of employee and display them using structure. Details consist of Employee ID, Name, Designation, Department, Salary.\n#include<stdio.h>\nstruct employee{\n    char name[100];\n    int id;\n    char Designation[20];\n    char Department[50];\n    float Salary;\n};\nint main(){\n    struct employee emp1;\n    printf(\"input employee details\\\\n\");\n    printf(\"Enter employee Name: \");\n    fgets(emp1.name,sizeof(emp1.name),stdin);\n    printf(\"Enter employee ID: \");\n    scanf(\"%d\",&emp1.id);\n    getchar();\n    printf(\"Enter employee Designation: \");\n    fgets(emp1.Designation,sizeof(emp1.Designation),stdin);\n    printf(\"Enter employee Department: \");\n    fgets(emp1.Department,sizeof(emp1.Department),stdin);\n    printf(\"Enter employee Salary: \");\n    scanf(\"%f\",&emp1.Salary);\n    printf(\"\\\\n\\\\nEmployee Details:\\\\n\");\n    printf(\"Name        : %s\",emp1.name);\n    printf(\"ID          : %d\\\\n\",emp1.id);\n    printf(\"Designation : %s\",emp1.Designation);\n    printf(\"Department  : %s\",emp1.Department);\n    printf(\"Salary      : %f\\\\n\",emp1.Salary);\n}\n`}</code></pre>\n    <h3>{`Output`}</h3>\n    <pre><code parentName=\"pre\" {...{}}>{`input employee details\nEnter employee Name: Ahosanul Hasan\nEnter employee ID: 16105001\nEnter employee Designation: Funycode\nEnter employee Department: Programming\nEnter employee Salary: 110000\n\n\nEmployee Details:\nName        : Ahosanul Hasan\n\nID          : 16105001\nDesignation : Funycode\n\nDepartment  : Programming\n\nSalary      : 110000\n`}</code></pre>\n    <h2>{`C++ Implementation`}</h2>\n    <h3>{`11. Write a C++ program accept the details of employee and display them using structure. Details consist of Employee ID, Name, Designation, Department, Salary.`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-c\"\n      }}>{`//Write a C++ program to find accept the details of employee and display them using structure. Details consist of Employee ID, Name, Designation, Department, Salary.\n\n#include<iostream>\n#include <string.h>\nusing namespace std;\nstruct employee{\n    char name[100];\n    int id;\n    char Designation[20];\n    char Department[50];\n    float Salary;\n};\nint main(){\n    struct employee emp1;\n    cout << \"input employee details\\\\n\";\n    cout << \"Enter employee Name: \";\n    fgets(emp1.name,sizeof(emp1.name),stdin);\n    cout << \"Enter employee ID: \";\n    cin >> emp1.id;\n    getchar();\n    cout << \"Enter employee Designation: \";\n    fgets(emp1.Designation,sizeof(emp1.Designation),stdin);\n    cout << \"Enter employee Department: \";\n    fgets(emp1.Department,sizeof(emp1.Department),stdin);\n    cout << \"Enter employee Salary: \";\n    cin >> emp1.Salary;\n    cout << \"\\\\n\\\\nEmployee Details:\\\\n\";\n    cout << \"Name        : \"<< emp1.name << endl;\n    cout << \"ID          : \"<< emp1.id << endl;\n    cout << \"Designation : \"<< emp1.Designation << endl;\n    cout << \"Department  : \"<< emp1.Department << endl;\n    cout << \"Salary      : \"<< emp1.Salary << endl;\n}\n`}</code></pre>\n    <h3>{`Output`}</h3>\n    <pre><code parentName=\"pre\" {...{}}>{`input employee details\nEnter employee Name: Ahosanul Hasan\nEnter employee ID: 16105001\nEnter employee Designation: Funycode\nEnter employee Department: Programming\nEnter employee Salary: 110000\n\n\nEmployee Details:\nName        : Ahosanul Hasan\n\nID          : 16105001\nDesignation : Funycode\n\nDepartment  : Programming\n\nSalary      : 110000\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}