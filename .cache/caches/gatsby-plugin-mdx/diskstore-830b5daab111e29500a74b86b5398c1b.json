{"expireTime":9007200883710394000,"key":"gatsby-plugin-mdx-entire-payload-3169761f61be68e42633aaa67cee7109--undefined","val":{"mdast":{"type":"root","children":[{"type":"heading","depth":2,"children":[{"type":"text","value":"C Implementation","position":{"start":{"line":2,"column":4,"offset":5},"end":{"line":2,"column":20,"offset":21},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":2},"end":{"line":2,"column":20,"offset":21},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"9. Write a C program to find the largest element using Dynamic Memory Allocation.","position":{"start":{"line":3,"column":5,"offset":27},"end":{"line":3,"column":86,"offset":108},"indent":[]}}],"position":{"start":{"line":3,"column":1,"offset":23},"end":{"line":3,"column":86,"offset":108},"indent":[]}},{"type":"code","lang":"c","meta":null,"value":"//Write a C program to find the largest element using Dynamic Memory Allocation.\n#include <stdio.h>\nvoid main()\n{\n    int i,n;\n    float *p;\n    printf(\" Enter the number of elements= \");\n    scanf(\"%d\",&n);\n    p=(float*)calloc(n,sizeof(float));  // assigning memory\n\n    if(p==NULL)\n    {\n        printf(\" No memory is allocated.\");\n        exit(0);\n    }\n    printf(\"\\n Enter the elements\\n\");\n    for(i=0;i<n;++i)\n    {\n       scanf(\"%f\",p+i);\n    }\n    for(i=1;i<n;++i)\n    {\n       if(*p<*(p+i))\n           *p=*(p+i);\n    }\n    printf(\" The Largest element is= %.2f \",*p);\n}","position":{"start":{"line":4,"column":1,"offset":110},"end":{"line":32,"column":4,"offset":727},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Output","position":{"start":{"line":33,"column":5,"offset":733},"end":{"line":33,"column":11,"offset":739},"indent":[]}}],"position":{"start":{"line":33,"column":1,"offset":729},"end":{"line":33,"column":11,"offset":739},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":" Enter the number of elements= 3\n\n Enter the elements\n 1 2 3\n The Largest element is= 3.00","position":{"start":{"line":34,"column":1,"offset":741},"end":{"line":40,"column":4,"offset":845},"indent":[1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"C++ Implementation","position":{"start":{"line":41,"column":4,"offset":850},"end":{"line":41,"column":22,"offset":868},"indent":[]}}],"position":{"start":{"line":41,"column":1,"offset":847},"end":{"line":41,"column":22,"offset":868},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"9. Write a C++ program to find the largest element using Dynamic Memory Allocation.","position":{"start":{"line":42,"column":5,"offset":874},"end":{"line":42,"column":88,"offset":957},"indent":[]}}],"position":{"start":{"line":42,"column":1,"offset":870},"end":{"line":42,"column":88,"offset":957},"indent":[]}},{"type":"code","lang":"c","meta":null,"value":"//Write a C++ program to find the largest element using Dynamic Memory Allocation.\n#include <iostream>\n#include <stdlib.h>\nusing namespace std;\nint main()\n{\n    int i,n;\n    float *p;\n    cout<<(\" Enter the number of elements= \");\n    cin>>n;\n    p=(float*)calloc(n,sizeof(float));  // assigning memory\n\n    if(p==NULL)\n    {\n        cout<<(\" No memory is allocated.\");\n        exit(0);\n    }\n    cout<<(\"\\n Enter the elements\\n\");\n    for(i=0;i<n;++i)\n    {\n       cin>>*(p+i);\n    }\n    for(i=1;i<n;++i)\n    {\n       if(*p<*(p+i))\n           *p=*(p+i);\n    }\n    cout<<\" The Largest element is= \"<<*p;\n}","position":{"start":{"line":43,"column":1,"offset":959},"end":{"line":73,"column":4,"offset":1603},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Output","position":{"start":{"line":74,"column":5,"offset":1609},"end":{"line":74,"column":11,"offset":1615},"indent":[]}}],"position":{"start":{"line":74,"column":1,"offset":1605},"end":{"line":74,"column":11,"offset":1615},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":" Enter the number of elements= 3\n\n Enter the elements\n 1 2 3\n The Largest element is= 3.00","position":{"start":{"line":75,"column":1,"offset":1617},"end":{"line":81,"column":4,"offset":1721},"indent":[1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"Write a C/C++/Java program to find the largest element using Dynamic Memory Allocation.\",\"category\":\"Pointer Program Index\",\"tags\":[\"#c\",\"#c++\",\"#tutorial\"],\"date\":\"2020-04-16T00:00:00.000Z\",\"thumbnailText\":\"Index\"}","position":{"start":{"line":84,"column":1,"offset":1725},"end":{"line":84,"column":254,"offset":1978},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":84,"column":254,"offset":1978}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Write a C/C++/Java program to find the largest element using Dynamic Memory Allocation.\",\n  \"category\": \"Pointer Program Index\",\n  \"tags\": [\"#c\", \"#c++\", \"#tutorial\"],\n  \"date\": \"2020-04-16T00:00:00.000Z\",\n  \"thumbnailText\": \"Index\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"C Implementation\"), mdx(\"h3\", null, \"9. Write a C program to find the largest element using Dynamic Memory Allocation.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-c\"\n  }, \"//Write a C program to find the largest element using Dynamic Memory Allocation.\\n#include <stdio.h>\\nvoid main()\\n{\\n    int i,n;\\n    float *p;\\n    printf(\\\" Enter the number of elements= \\\");\\n    scanf(\\\"%d\\\",&n);\\n    p=(float*)calloc(n,sizeof(float));  // assigning memory\\n\\n    if(p==NULL)\\n    {\\n        printf(\\\" No memory is allocated.\\\");\\n        exit(0);\\n    }\\n    printf(\\\"\\\\n Enter the elements\\\\n\\\");\\n    for(i=0;i<n;++i)\\n    {\\n       scanf(\\\"%f\\\",p+i);\\n    }\\n    for(i=1;i<n;++i)\\n    {\\n       if(*p<*(p+i))\\n           *p=*(p+i);\\n    }\\n    printf(\\\" The Largest element is= %.2f \\\",*p);\\n}\\n\")), mdx(\"h3\", null, \"Output\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \" Enter the number of elements= 3\\n\\n Enter the elements\\n 1 2 3\\n The Largest element is= 3.00\\n\")), mdx(\"h2\", null, \"C++ Implementation\"), mdx(\"h3\", null, \"9. Write a C++ program to find the largest element using Dynamic Memory Allocation.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-c\"\n  }, \"//Write a C++ program to find the largest element using Dynamic Memory Allocation.\\n#include <iostream>\\n#include <stdlib.h>\\nusing namespace std;\\nint main()\\n{\\n    int i,n;\\n    float *p;\\n    cout<<(\\\" Enter the number of elements= \\\");\\n    cin>>n;\\n    p=(float*)calloc(n,sizeof(float));  // assigning memory\\n\\n    if(p==NULL)\\n    {\\n        cout<<(\\\" No memory is allocated.\\\");\\n        exit(0);\\n    }\\n    cout<<(\\\"\\\\n Enter the elements\\\\n\\\");\\n    for(i=0;i<n;++i)\\n    {\\n       cin>>*(p+i);\\n    }\\n    for(i=1;i<n;++i)\\n    {\\n       if(*p<*(p+i))\\n           *p=*(p+i);\\n    }\\n    cout<<\\\" The Largest element is= \\\"<<*p;\\n}\\n\")), mdx(\"h3\", null, \"Output\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \" Enter the number of elements= 3\\n\\n Enter the elements\\n 1 2 3\\n The Largest element is= 3.00\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"Write a C/C++/Java program to find the largest element using Dynamic Memory Allocation.\",\n  \"category\": \"Pointer Program Index\",\n  \"tags\": [\"#c\", \"#c++\", \"#tutorial\"],\n  \"date\": \"2020-04-16T00:00:00.000Z\",\n  \"thumbnailText\": \"Index\"\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h2>{`C Implementation`}</h2>\n    <h3>{`9. Write a C program to find the largest element using Dynamic Memory Allocation.`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-c\"\n      }}>{`//Write a C program to find the largest element using Dynamic Memory Allocation.\n#include <stdio.h>\nvoid main()\n{\n    int i,n;\n    float *p;\n    printf(\" Enter the number of elements= \");\n    scanf(\"%d\",&n);\n    p=(float*)calloc(n,sizeof(float));  // assigning memory\n\n    if(p==NULL)\n    {\n        printf(\" No memory is allocated.\");\n        exit(0);\n    }\n    printf(\"\\\\n Enter the elements\\\\n\");\n    for(i=0;i<n;++i)\n    {\n       scanf(\"%f\",p+i);\n    }\n    for(i=1;i<n;++i)\n    {\n       if(*p<*(p+i))\n           *p=*(p+i);\n    }\n    printf(\" The Largest element is= %.2f \",*p);\n}\n`}</code></pre>\n    <h3>{`Output`}</h3>\n    <pre><code parentName=\"pre\" {...{}}>{` Enter the number of elements= 3\n\n Enter the elements\n 1 2 3\n The Largest element is= 3.00\n`}</code></pre>\n    <h2>{`C++ Implementation`}</h2>\n    <h3>{`9. Write a C++ program to find the largest element using Dynamic Memory Allocation.`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-c\"\n      }}>{`//Write a C++ program to find the largest element using Dynamic Memory Allocation.\n#include <iostream>\n#include <stdlib.h>\nusing namespace std;\nint main()\n{\n    int i,n;\n    float *p;\n    cout<<(\" Enter the number of elements= \");\n    cin>>n;\n    p=(float*)calloc(n,sizeof(float));  // assigning memory\n\n    if(p==NULL)\n    {\n        cout<<(\" No memory is allocated.\");\n        exit(0);\n    }\n    cout<<(\"\\\\n Enter the elements\\\\n\");\n    for(i=0;i<n;++i)\n    {\n       cin>>*(p+i);\n    }\n    for(i=1;i<n;++i)\n    {\n       if(*p<*(p+i))\n           *p=*(p+i);\n    }\n    cout<<\" The Largest element is= \"<<*p;\n}\n`}</code></pre>\n    <h3>{`Output`}</h3>\n    <pre><code parentName=\"pre\" {...{}}>{` Enter the number of elements= 3\n\n Enter the elements\n 1 2 3\n The Largest element is= 3.00\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}