{"expireTime":9007200883710394000,"key":"gatsby-plugin-mdx-entire-payload-2c5233240cc8a1e67e4cb793cab365e3--undefined","val":{"mdast":{"type":"root","children":[{"type":"heading","depth":2,"children":[{"type":"text","value":"C Implementation","position":{"start":{"line":2,"column":4,"offset":5},"end":{"line":2,"column":20,"offset":21},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":2},"end":{"line":2,"column":20,"offset":21},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"14. Write a C program to sort an array using Pointer.","position":{"start":{"line":3,"column":5,"offset":27},"end":{"line":3,"column":58,"offset":80},"indent":[]}}],"position":{"start":{"line":3,"column":1,"offset":23},"end":{"line":3,"column":58,"offset":80},"indent":[]}},{"type":"code","lang":"c","meta":null,"value":"//Write a C program to sort an array using Pointer.\n#include <stdio.h>\nvoid sort(int n, int* p)\n{\n    int i, j, t;\n    for (i = 0; i < n; i++) {\n        for (j = i + 1; j < n; j++) {\n            if (*(p + j) < *(p + i)) {\n                t = *(p + i);\n                *(p + i) = *(p + j);\n                *(p + j) = t;\n            }\n        }\n    }\n    for (i = 0; i < n; i++)\n        printf(\"%d \", *(p + i));\n}\nvoid main()\n{\n     int a[1000],n,i;\n    int * p = a;\n\n    printf(\"Enter size of array: \");\n    scanf(\"%d\", &n);\n\n    printf(\"Enter elements in array:\\n\");\n    for (i = 0; i < n; i++){\n        scanf(\"%d\", p);        //input the element\n        p++;\n    }\n    sort(n, a); //call function\n}","position":{"start":{"line":4,"column":1,"offset":82},"end":{"line":37,"column":4,"offset":823},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Output","position":{"start":{"line":38,"column":5,"offset":829},"end":{"line":38,"column":11,"offset":835},"indent":[]}}],"position":{"start":{"line":38,"column":1,"offset":825},"end":{"line":38,"column":11,"offset":835},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"Enter size of array: 3\nEnter elements in array:\n1 4 2\n1 2 4","position":{"start":{"line":39,"column":1,"offset":837},"end":{"line":44,"column":4,"offset":909},"indent":[1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"C++ Implementation","position":{"start":{"line":45,"column":4,"offset":914},"end":{"line":45,"column":22,"offset":932},"indent":[]}}],"position":{"start":{"line":45,"column":1,"offset":911},"end":{"line":45,"column":22,"offset":932},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"14. Write a C++ program to sort an array using Pointer.","position":{"start":{"line":46,"column":5,"offset":938},"end":{"line":46,"column":60,"offset":993},"indent":[]}}],"position":{"start":{"line":46,"column":1,"offset":934},"end":{"line":46,"column":60,"offset":993},"indent":[]}},{"type":"code","lang":"c","meta":null,"value":"//Write a C++ program to sort an array using Pointer.\n#include <iostream>\nusing namespace std;\n\nvoid sort(int n, int* p)\n{\n    int i, j, t;\n    for (i = 0; i < n; i++)\n    {\n        for (j = i + 1; j < n; j++)\n        {\n            if (*(p + j) < *(p + i))\n            {\n                t = *(p + i);\n                *(p + i) = *(p + j);\n                *(p + j) = t;\n            }\n        }\n    }\n    for (i = 0; i < n; i++)\n        cout<< *(p + i);\n}\nint main()\n{\n    int a[1000],n,i;\n    int *p = a;\n\n    cout<<(\"Enter size of array: \");\n    cin>>n;\n\n    cout<<(\"Enter elements in array:\\n\");\n    for (i = 0; i < n; i++)\n    {\n        cin>>*p;        //input the element\n        p++;\n    }\n    sort(n, a); //call function\n}","position":{"start":{"line":47,"column":1,"offset":995},"end":{"line":86,"column":4,"offset":1769},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Output","position":{"start":{"line":87,"column":5,"offset":1775},"end":{"line":87,"column":11,"offset":1781},"indent":[]}}],"position":{"start":{"line":87,"column":1,"offset":1771},"end":{"line":87,"column":11,"offset":1781},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"Enter size of array: 3\nEnter elements in array:\n1 4 2\n1 2 4","position":{"start":{"line":88,"column":1,"offset":1783},"end":{"line":93,"column":4,"offset":1855},"indent":[1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"Write a C/C++/Java program to sort an array using Pointer.\",\"category\":\"Pointer Program Index\",\"tags\":[\"#c\",\"#c++\",\"#tutorial\"],\"date\":\"2020-04-16T00:00:00.000Z\",\"thumbnailText\":\"Index\"}","position":{"start":{"line":96,"column":1,"offset":1859},"end":{"line":96,"column":225,"offset":2083},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":96,"column":225,"offset":2083}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Write a C/C++/Java program to sort an array using Pointer.\",\n  \"category\": \"Pointer Program Index\",\n  \"tags\": [\"#c\", \"#c++\", \"#tutorial\"],\n  \"date\": \"2020-04-16T00:00:00.000Z\",\n  \"thumbnailText\": \"Index\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"C Implementation\"), mdx(\"h3\", null, \"14. Write a C program to sort an array using Pointer.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-c\"\n  }, \"//Write a C program to sort an array using Pointer.\\n#include <stdio.h>\\nvoid sort(int n, int* p)\\n{\\n    int i, j, t;\\n    for (i = 0; i < n; i++) {\\n        for (j = i + 1; j < n; j++) {\\n            if (*(p + j) < *(p + i)) {\\n                t = *(p + i);\\n                *(p + i) = *(p + j);\\n                *(p + j) = t;\\n            }\\n        }\\n    }\\n    for (i = 0; i < n; i++)\\n        printf(\\\"%d \\\", *(p + i));\\n}\\nvoid main()\\n{\\n     int a[1000],n,i;\\n    int * p = a;\\n\\n    printf(\\\"Enter size of array: \\\");\\n    scanf(\\\"%d\\\", &n);\\n\\n    printf(\\\"Enter elements in array:\\\\n\\\");\\n    for (i = 0; i < n; i++){\\n        scanf(\\\"%d\\\", p);        //input the element\\n        p++;\\n    }\\n    sort(n, a); //call function\\n}\\n\")), mdx(\"h3\", null, \"Output\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"Enter size of array: 3\\nEnter elements in array:\\n1 4 2\\n1 2 4\\n\")), mdx(\"h2\", null, \"C++ Implementation\"), mdx(\"h3\", null, \"14. Write a C++ program to sort an array using Pointer.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-c\"\n  }, \"//Write a C++ program to sort an array using Pointer.\\n#include <iostream>\\nusing namespace std;\\n\\nvoid sort(int n, int* p)\\n{\\n    int i, j, t;\\n    for (i = 0; i < n; i++)\\n    {\\n        for (j = i + 1; j < n; j++)\\n        {\\n            if (*(p + j) < *(p + i))\\n            {\\n                t = *(p + i);\\n                *(p + i) = *(p + j);\\n                *(p + j) = t;\\n            }\\n        }\\n    }\\n    for (i = 0; i < n; i++)\\n        cout<< *(p + i);\\n}\\nint main()\\n{\\n    int a[1000],n,i;\\n    int *p = a;\\n\\n    cout<<(\\\"Enter size of array: \\\");\\n    cin>>n;\\n\\n    cout<<(\\\"Enter elements in array:\\\\n\\\");\\n    for (i = 0; i < n; i++)\\n    {\\n        cin>>*p;        //input the element\\n        p++;\\n    }\\n    sort(n, a); //call function\\n}\\n\")), mdx(\"h3\", null, \"Output\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"Enter size of array: 3\\nEnter elements in array:\\n1 4 2\\n1 2 4\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"Write a C/C++/Java program to sort an array using Pointer.\",\n  \"category\": \"Pointer Program Index\",\n  \"tags\": [\"#c\", \"#c++\", \"#tutorial\"],\n  \"date\": \"2020-04-16T00:00:00.000Z\",\n  \"thumbnailText\": \"Index\"\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h2>{`C Implementation`}</h2>\n    <h3>{`14. Write a C program to sort an array using Pointer.`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-c\"\n      }}>{`//Write a C program to sort an array using Pointer.\n#include <stdio.h>\nvoid sort(int n, int* p)\n{\n    int i, j, t;\n    for (i = 0; i < n; i++) {\n        for (j = i + 1; j < n; j++) {\n            if (*(p + j) < *(p + i)) {\n                t = *(p + i);\n                *(p + i) = *(p + j);\n                *(p + j) = t;\n            }\n        }\n    }\n    for (i = 0; i < n; i++)\n        printf(\"%d \", *(p + i));\n}\nvoid main()\n{\n     int a[1000],n,i;\n    int * p = a;\n\n    printf(\"Enter size of array: \");\n    scanf(\"%d\", &n);\n\n    printf(\"Enter elements in array:\\\\n\");\n    for (i = 0; i < n; i++){\n        scanf(\"%d\", p);        //input the element\n        p++;\n    }\n    sort(n, a); //call function\n}\n`}</code></pre>\n    <h3>{`Output`}</h3>\n    <pre><code parentName=\"pre\" {...{}}>{`Enter size of array: 3\nEnter elements in array:\n1 4 2\n1 2 4\n`}</code></pre>\n    <h2>{`C++ Implementation`}</h2>\n    <h3>{`14. Write a C++ program to sort an array using Pointer.`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-c\"\n      }}>{`//Write a C++ program to sort an array using Pointer.\n#include <iostream>\nusing namespace std;\n\nvoid sort(int n, int* p)\n{\n    int i, j, t;\n    for (i = 0; i < n; i++)\n    {\n        for (j = i + 1; j < n; j++)\n        {\n            if (*(p + j) < *(p + i))\n            {\n                t = *(p + i);\n                *(p + i) = *(p + j);\n                *(p + j) = t;\n            }\n        }\n    }\n    for (i = 0; i < n; i++)\n        cout<< *(p + i);\n}\nint main()\n{\n    int a[1000],n,i;\n    int *p = a;\n\n    cout<<(\"Enter size of array: \");\n    cin>>n;\n\n    cout<<(\"Enter elements in array:\\\\n\");\n    for (i = 0; i < n; i++)\n    {\n        cin>>*p;        //input the element\n        p++;\n    }\n    sort(n, a); //call function\n}\n`}</code></pre>\n    <h3>{`Output`}</h3>\n    <pre><code parentName=\"pre\" {...{}}>{`Enter size of array: 3\nEnter elements in array:\n1 4 2\n1 2 4\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}