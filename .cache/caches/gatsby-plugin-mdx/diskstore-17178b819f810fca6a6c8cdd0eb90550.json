{"expireTime":9007200883706346000,"key":"gatsby-plugin-mdx-entire-payload-bb92050ff10524130239bddac6239b9a--undefined","val":{"mdast":{"type":"root","children":[{"type":"heading","depth":2,"children":[{"type":"text","value":"C Implementation","position":{"start":{"line":2,"column":4,"offset":5},"end":{"line":2,"column":20,"offset":21},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":2},"end":{"line":2,"column":20,"offset":21},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"17. Write a C program to menu driven program in ‘C’ which shows the working of library. The menu option should be Add book details. Display book details. List all books of given author. List the count of books in the library. Exit.","position":{"start":{"line":3,"column":5,"offset":27},"end":{"line":3,"column":236,"offset":258},"indent":[]}}],"position":{"start":{"line":3,"column":1,"offset":23},"end":{"line":3,"column":236,"offset":258},"indent":[]}},{"type":"code","lang":"c","meta":null,"value":"//Write a C program to menu driven program in ‘C’ which shows the working of library. The menu option should be Add book details. Display book details. List all books of given author. List the count of books in the library. Exit.\n#include<stdio.h>\nstruct Book{\n    char booName[100];\n    char authorName[100];\n};\nstruct Book book[100];\nint count=0;\nvoid input(struct Book *book){\n    getchar();\n    printf(\"Book Details \\n\");\n    printf(\"Book Name : \");\n    fgets(book->booName,sizeof(book->booName),stdin);\n    printf(\"author Name : \");\n    fgets(book->authorName,sizeof(book->authorName),stdin);\n}\nvoid details(struct Book *book){\n    printf(\"Book Details \\n\\n\");\n    printf(\"Book Name   : %s\",book->booName);\n    printf(\"author Name : %s\",book->authorName);\n}\nint main(){\n        printf(\"\\n\\n\\nselect from menu: \\n\");\n        printf(\"1) Add book details.\\n2) Display book details.\\n3) List all books of given author.\\n4) List the count of books in the library.\\n5) Exit.\\n\");\n        int k=0;\n        scanf(\"%d\",&k);\n        system(\"cls\");\n        switch(k){\n            case 1:{\n                if(count>100){\n                    printf(\"memory full\");\n                    main();\n                }\n                input(&book[count]);\n                count++;\n                main();\n            }\n            case 2:{\n                for(int i=0;i<count;i++)\n                {\n                    details(&book[i]);\n                }\n                 main();\n            }\n            case 3:{\n            int t=0;\n            printf(\"\\nEnter author name: \");\n            char temp[100];\n            getchar();\n            fgets(temp,sizeof(temp),stdin);\n            for(int i=0;i<count;i++)\n            {\n                 if(strcmp(book[i].authorName,temp)==0)\n                 {\n                     details(&book[i]);\n                     t++;\n                 }\n            }\n            t==0? printf(\"\\n NO data found !!\") : printf(\"\");\n            main();\n            }\n            case 4:{\n             printf(\"\\n\\nTotal books in library : %d\",count);\n             main();\n            }\n            case 5:{\n             exit(0);\n            }\n            default: {main();}\n        }\n}","position":{"start":{"line":4,"column":1,"offset":260},"end":{"line":76,"column":4,"offset":2540},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Output","position":{"start":{"line":77,"column":5,"offset":2546},"end":{"line":77,"column":11,"offset":2552},"indent":[]}}],"position":{"start":{"line":77,"column":1,"offset":2542},"end":{"line":77,"column":11,"offset":2552},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"select from menu:\n1) Add book details.\n2) Display book details.\n3) List all books of given author.\n4) List the count of books in the library.\n5) Exit.\n// Try yourself","position":{"start":{"line":78,"column":1,"offset":2554},"end":{"line":86,"column":4,"offset":2736},"indent":[1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"C++ Implementation","position":{"start":{"line":88,"column":4,"offset":2743},"end":{"line":88,"column":22,"offset":2761},"indent":[]}}],"position":{"start":{"line":88,"column":1,"offset":2740},"end":{"line":88,"column":22,"offset":2761},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"17. Write a C++ program to menu driven program in ‘C’ which shows the working of library. The menu option should be Add book details. Display book details. List all books of given author. List the count of books in the library. Exit.","position":{"start":{"line":89,"column":5,"offset":2767},"end":{"line":89,"column":238,"offset":3000},"indent":[]}}],"position":{"start":{"line":89,"column":1,"offset":2763},"end":{"line":89,"column":238,"offset":3000},"indent":[]}},{"type":"code","lang":"c","meta":null,"value":"//Write a C++ program to menu driven program in ‘C’ which shows the working of library. The menu option should be Add book details. Display book details. List all books of given author. List the count of books in the library. Exit.\n\n#include<iostream>\n#include <string.h>\nusing namespace std;\nstruct Book{\n    char booName[100];\n    char authorName[100];\n};\nstruct Book book[100];\nint count=0;\nvoid input(struct Book *book){\n    getchar();\n    cout << \"Book Details \\n\";\n    cout << \"Book Name : \";\n    fgets(book->booName,sizeof(book->booName),stdin);\n    cout << \"author Name : \";\n    fgets(book->authorName,sizeof(book->authorName),stdin);\n}\nvoid details(struct Book *book){\n    cout << \"Book Details \\n\\n\";\n    cout << \"Book Name   : \" << book->booName;\n    cout << \"author Name : \" << book->authorName;\n}\nint main(){\n        cout << \"\\n\\n\\nselect from menu: \\n\";\n        cout << \"1) Add book details.\\n2) Display book details.\\n3) List all books of given author.\\n4) List the count of books in the library.\\n5) Exit.\\n\";\n        int k=0;\n        cin >> k;\n        system(\"cls\");\n        switch(k){\n            case 1:{\n                if(count>100){\n                    cout << \"memory full\";\n                    main();\n                }\n                input(&book[count]);\n                count++;\n                main();\n            }\n            case 2:{\n                for(int i=0;i<count;i++)\n                {\n                    details(&book[i]);\n                }\n                 main();\n            }\n            case 3:{\n            int t=0;\n            cout << \"\\nEnter author name: \";\n            char temp[100];\n            getchar();\n            fgets(temp,sizeof(temp),stdin);\n            for(int i=0;i<count;i++)\n            {\n                 if(strcmp(book[i].authorName,temp)==0)\n                 {\n                     details(&book[i]);\n                     t++;\n                 }\n            }\n            t==0? cout << \"\\n NO data found !!\" : cout << \"\";\n            main();\n            }\n            case 4:{\n             cout << \"\\n\\nTotal books in library : \" << count;\n             main();\n            }\n            case 5:{\n             exit(0);\n            }\n            default: {main();}\n        }\n}","position":{"start":{"line":90,"column":1,"offset":3002},"end":{"line":165,"column":4,"offset":5327},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Output","position":{"start":{"line":166,"column":5,"offset":5333},"end":{"line":166,"column":11,"offset":5339},"indent":[]}}],"position":{"start":{"line":166,"column":1,"offset":5329},"end":{"line":166,"column":11,"offset":5339},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"select from menu:\n1) Add book details.\n2) Display book details.\n3) List all books of given author.\n4) List the count of books in the library.\n5) Exit.\n// Try yourself","position":{"start":{"line":167,"column":1,"offset":5341},"end":{"line":175,"column":4,"offset":5523},"indent":[1,1,1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"Write a C/C++/Java program to menu driven program in ‘C’ which shows the working of library. The menu option should be Add book details. Display book details. List all books of given author. List the count of books in the library. Exit.\",\"category\":\"Structure And Union Index\",\"tags\":[\"#c\",\"#c++\",\"#java\",\"#tutorial\"],\"date\":\"2020-04-16T00:00:00.000Z\",\"thumbnailText\":\"Index\"}","position":{"start":{"line":178,"column":1,"offset":5527},"end":{"line":178,"column":415,"offset":5941},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":178,"column":415,"offset":5941}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Write a C/C++/Java program to menu driven program in ‘C’ which shows the working of library. The menu option should be Add book details. Display book details. List all books of given author. List the count of books in the library. Exit.\",\n  \"category\": \"Structure And Union Index\",\n  \"tags\": [\"#c\", \"#c++\", \"#java\", \"#tutorial\"],\n  \"date\": \"2020-04-16T00:00:00.000Z\",\n  \"thumbnailText\": \"Index\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"C Implementation\"), mdx(\"h3\", null, \"17. Write a C program to menu driven program in \\u2018C\\u2019 which shows the working of library. The menu option should be Add book details. Display book details. List all books of given author. List the count of books in the library. Exit.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-c\"\n  }, \"//Write a C program to menu driven program in \\u2018C\\u2019 which shows the working of library. The menu option should be Add book details. Display book details. List all books of given author. List the count of books in the library. Exit.\\n#include<stdio.h>\\nstruct Book{\\n    char booName[100];\\n    char authorName[100];\\n};\\nstruct Book book[100];\\nint count=0;\\nvoid input(struct Book *book){\\n    getchar();\\n    printf(\\\"Book Details \\\\n\\\");\\n    printf(\\\"Book Name : \\\");\\n    fgets(book->booName,sizeof(book->booName),stdin);\\n    printf(\\\"author Name : \\\");\\n    fgets(book->authorName,sizeof(book->authorName),stdin);\\n}\\nvoid details(struct Book *book){\\n    printf(\\\"Book Details \\\\n\\\\n\\\");\\n    printf(\\\"Book Name   : %s\\\",book->booName);\\n    printf(\\\"author Name : %s\\\",book->authorName);\\n}\\nint main(){\\n        printf(\\\"\\\\n\\\\n\\\\nselect from menu: \\\\n\\\");\\n        printf(\\\"1) Add book details.\\\\n2) Display book details.\\\\n3) List all books of given author.\\\\n4) List the count of books in the library.\\\\n5) Exit.\\\\n\\\");\\n        int k=0;\\n        scanf(\\\"%d\\\",&k);\\n        system(\\\"cls\\\");\\n        switch(k){\\n            case 1:{\\n                if(count>100){\\n                    printf(\\\"memory full\\\");\\n                    main();\\n                }\\n                input(&book[count]);\\n                count++;\\n                main();\\n            }\\n            case 2:{\\n                for(int i=0;i<count;i++)\\n                {\\n                    details(&book[i]);\\n                }\\n                 main();\\n            }\\n            case 3:{\\n            int t=0;\\n            printf(\\\"\\\\nEnter author name: \\\");\\n            char temp[100];\\n            getchar();\\n            fgets(temp,sizeof(temp),stdin);\\n            for(int i=0;i<count;i++)\\n            {\\n                 if(strcmp(book[i].authorName,temp)==0)\\n                 {\\n                     details(&book[i]);\\n                     t++;\\n                 }\\n            }\\n            t==0? printf(\\\"\\\\n NO data found !!\\\") : printf(\\\"\\\");\\n            main();\\n            }\\n            case 4:{\\n             printf(\\\"\\\\n\\\\nTotal books in library : %d\\\",count);\\n             main();\\n            }\\n            case 5:{\\n             exit(0);\\n            }\\n            default: {main();}\\n        }\\n}\\n\")), mdx(\"h3\", null, \"Output\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"select from menu:\\n1) Add book details.\\n2) Display book details.\\n3) List all books of given author.\\n4) List the count of books in the library.\\n5) Exit.\\n// Try yourself\\n\")), mdx(\"h2\", null, \"C++ Implementation\"), mdx(\"h3\", null, \"17. Write a C++ program to menu driven program in \\u2018C\\u2019 which shows the working of library. The menu option should be Add book details. Display book details. List all books of given author. List the count of books in the library. Exit.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-c\"\n  }, \"//Write a C++ program to menu driven program in \\u2018C\\u2019 which shows the working of library. The menu option should be Add book details. Display book details. List all books of given author. List the count of books in the library. Exit.\\n\\n#include<iostream>\\n#include <string.h>\\nusing namespace std;\\nstruct Book{\\n    char booName[100];\\n    char authorName[100];\\n};\\nstruct Book book[100];\\nint count=0;\\nvoid input(struct Book *book){\\n    getchar();\\n    cout << \\\"Book Details \\\\n\\\";\\n    cout << \\\"Book Name : \\\";\\n    fgets(book->booName,sizeof(book->booName),stdin);\\n    cout << \\\"author Name : \\\";\\n    fgets(book->authorName,sizeof(book->authorName),stdin);\\n}\\nvoid details(struct Book *book){\\n    cout << \\\"Book Details \\\\n\\\\n\\\";\\n    cout << \\\"Book Name   : \\\" << book->booName;\\n    cout << \\\"author Name : \\\" << book->authorName;\\n}\\nint main(){\\n        cout << \\\"\\\\n\\\\n\\\\nselect from menu: \\\\n\\\";\\n        cout << \\\"1) Add book details.\\\\n2) Display book details.\\\\n3) List all books of given author.\\\\n4) List the count of books in the library.\\\\n5) Exit.\\\\n\\\";\\n        int k=0;\\n        cin >> k;\\n        system(\\\"cls\\\");\\n        switch(k){\\n            case 1:{\\n                if(count>100){\\n                    cout << \\\"memory full\\\";\\n                    main();\\n                }\\n                input(&book[count]);\\n                count++;\\n                main();\\n            }\\n            case 2:{\\n                for(int i=0;i<count;i++)\\n                {\\n                    details(&book[i]);\\n                }\\n                 main();\\n            }\\n            case 3:{\\n            int t=0;\\n            cout << \\\"\\\\nEnter author name: \\\";\\n            char temp[100];\\n            getchar();\\n            fgets(temp,sizeof(temp),stdin);\\n            for(int i=0;i<count;i++)\\n            {\\n                 if(strcmp(book[i].authorName,temp)==0)\\n                 {\\n                     details(&book[i]);\\n                     t++;\\n                 }\\n            }\\n            t==0? cout << \\\"\\\\n NO data found !!\\\" : cout << \\\"\\\";\\n            main();\\n            }\\n            case 4:{\\n             cout << \\\"\\\\n\\\\nTotal books in library : \\\" << count;\\n             main();\\n            }\\n            case 5:{\\n             exit(0);\\n            }\\n            default: {main();}\\n        }\\n}\\n\")), mdx(\"h3\", null, \"Output\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"select from menu:\\n1) Add book details.\\n2) Display book details.\\n3) List all books of given author.\\n4) List the count of books in the library.\\n5) Exit.\\n// Try yourself\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"Write a C/C++/Java program to menu driven program in ‘C’ which shows the working of library. The menu option should be Add book details. Display book details. List all books of given author. List the count of books in the library. Exit.\",\n  \"category\": \"Structure And Union Index\",\n  \"tags\": [\"#c\", \"#c++\", \"#java\", \"#tutorial\"],\n  \"date\": \"2020-04-16T00:00:00.000Z\",\n  \"thumbnailText\": \"Index\"\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h2>{`C Implementation`}</h2>\n    <h3>{`17. Write a C program to menu driven program in ‘C’ which shows the working of library. The menu option should be Add book details. Display book details. List all books of given author. List the count of books in the library. Exit.`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-c\"\n      }}>{`//Write a C program to menu driven program in ‘C’ which shows the working of library. The menu option should be Add book details. Display book details. List all books of given author. List the count of books in the library. Exit.\n#include<stdio.h>\nstruct Book{\n    char booName[100];\n    char authorName[100];\n};\nstruct Book book[100];\nint count=0;\nvoid input(struct Book *book){\n    getchar();\n    printf(\"Book Details \\\\n\");\n    printf(\"Book Name : \");\n    fgets(book->booName,sizeof(book->booName),stdin);\n    printf(\"author Name : \");\n    fgets(book->authorName,sizeof(book->authorName),stdin);\n}\nvoid details(struct Book *book){\n    printf(\"Book Details \\\\n\\\\n\");\n    printf(\"Book Name   : %s\",book->booName);\n    printf(\"author Name : %s\",book->authorName);\n}\nint main(){\n        printf(\"\\\\n\\\\n\\\\nselect from menu: \\\\n\");\n        printf(\"1) Add book details.\\\\n2) Display book details.\\\\n3) List all books of given author.\\\\n4) List the count of books in the library.\\\\n5) Exit.\\\\n\");\n        int k=0;\n        scanf(\"%d\",&k);\n        system(\"cls\");\n        switch(k){\n            case 1:{\n                if(count>100){\n                    printf(\"memory full\");\n                    main();\n                }\n                input(&book[count]);\n                count++;\n                main();\n            }\n            case 2:{\n                for(int i=0;i<count;i++)\n                {\n                    details(&book[i]);\n                }\n                 main();\n            }\n            case 3:{\n            int t=0;\n            printf(\"\\\\nEnter author name: \");\n            char temp[100];\n            getchar();\n            fgets(temp,sizeof(temp),stdin);\n            for(int i=0;i<count;i++)\n            {\n                 if(strcmp(book[i].authorName,temp)==0)\n                 {\n                     details(&book[i]);\n                     t++;\n                 }\n            }\n            t==0? printf(\"\\\\n NO data found !!\") : printf(\"\");\n            main();\n            }\n            case 4:{\n             printf(\"\\\\n\\\\nTotal books in library : %d\",count);\n             main();\n            }\n            case 5:{\n             exit(0);\n            }\n            default: {main();}\n        }\n}\n`}</code></pre>\n    <h3>{`Output`}</h3>\n    <pre><code parentName=\"pre\" {...{}}>{`select from menu:\n1) Add book details.\n2) Display book details.\n3) List all books of given author.\n4) List the count of books in the library.\n5) Exit.\n// Try yourself\n`}</code></pre>\n    <h2>{`C++ Implementation`}</h2>\n    <h3>{`17. Write a C++ program to menu driven program in ‘C’ which shows the working of library. The menu option should be Add book details. Display book details. List all books of given author. List the count of books in the library. Exit.`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-c\"\n      }}>{`//Write a C++ program to menu driven program in ‘C’ which shows the working of library. The menu option should be Add book details. Display book details. List all books of given author. List the count of books in the library. Exit.\n\n#include<iostream>\n#include <string.h>\nusing namespace std;\nstruct Book{\n    char booName[100];\n    char authorName[100];\n};\nstruct Book book[100];\nint count=0;\nvoid input(struct Book *book){\n    getchar();\n    cout << \"Book Details \\\\n\";\n    cout << \"Book Name : \";\n    fgets(book->booName,sizeof(book->booName),stdin);\n    cout << \"author Name : \";\n    fgets(book->authorName,sizeof(book->authorName),stdin);\n}\nvoid details(struct Book *book){\n    cout << \"Book Details \\\\n\\\\n\";\n    cout << \"Book Name   : \" << book->booName;\n    cout << \"author Name : \" << book->authorName;\n}\nint main(){\n        cout << \"\\\\n\\\\n\\\\nselect from menu: \\\\n\";\n        cout << \"1) Add book details.\\\\n2) Display book details.\\\\n3) List all books of given author.\\\\n4) List the count of books in the library.\\\\n5) Exit.\\\\n\";\n        int k=0;\n        cin >> k;\n        system(\"cls\");\n        switch(k){\n            case 1:{\n                if(count>100){\n                    cout << \"memory full\";\n                    main();\n                }\n                input(&book[count]);\n                count++;\n                main();\n            }\n            case 2:{\n                for(int i=0;i<count;i++)\n                {\n                    details(&book[i]);\n                }\n                 main();\n            }\n            case 3:{\n            int t=0;\n            cout << \"\\\\nEnter author name: \";\n            char temp[100];\n            getchar();\n            fgets(temp,sizeof(temp),stdin);\n            for(int i=0;i<count;i++)\n            {\n                 if(strcmp(book[i].authorName,temp)==0)\n                 {\n                     details(&book[i]);\n                     t++;\n                 }\n            }\n            t==0? cout << \"\\\\n NO data found !!\" : cout << \"\";\n            main();\n            }\n            case 4:{\n             cout << \"\\\\n\\\\nTotal books in library : \" << count;\n             main();\n            }\n            case 5:{\n             exit(0);\n            }\n            default: {main();}\n        }\n}\n`}</code></pre>\n    <h3>{`Output`}</h3>\n    <pre><code parentName=\"pre\" {...{}}>{`select from menu:\n1) Add book details.\n2) Display book details.\n3) List all books of given author.\n4) List the count of books in the library.\n5) Exit.\n// Try yourself\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}