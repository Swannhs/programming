{"expireTime":9007200883706343000,"key":"gatsby-plugin-mdx-entire-payload-742d5829a322bb19d1be87f21763176f--undefined","val":{"mdast":{"type":"root","children":[{"type":"heading","depth":2,"children":[{"type":"text","value":"C Implementation","position":{"start":{"line":2,"column":4,"offset":5},"end":{"line":2,"column":20,"offset":21},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":2},"end":{"line":2,"column":20,"offset":21},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"39. Write a C program to find LCM of a Number using Recursion","position":{"start":{"line":3,"column":5,"offset":27},"end":{"line":3,"column":66,"offset":88},"indent":[]}}],"position":{"start":{"line":3,"column":1,"offset":23},"end":{"line":3,"column":66,"offset":88},"indent":[]}},{"type":"code","lang":"c","meta":null,"value":"//Write a C program to find LCM of a Number using Recursion\n#include<stdio.h>\n\nint findLCM(int a,int b)\n{\n    static int tmp=1;\n    if(tmp%a==0 && tmp%b==0)\n    {\n        return tmp;\n    }\n    else\n    {\n        tmp++;\n        findLCM(a,b);\n        return tmp;\n    }\n}\n\nint main()\n{\n    int a,b;\n\n    printf(\"Enter two number: \");\n    scanf(\"%d%d\",&a,&b);\n    int lcm=findLCM(a,b);\n    printf(\"HCF is %d\\n\",lcm);\n\n    return 0;\n}","position":{"start":{"line":4,"column":1,"offset":90},"end":{"line":34,"column":4,"offset":558},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Output","position":{"start":{"line":35,"column":5,"offset":564},"end":{"line":35,"column":11,"offset":570},"indent":[]}}],"position":{"start":{"line":35,"column":1,"offset":560},"end":{"line":35,"column":11,"offset":570},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"Enter two number: 1 2\nHCF is 1","position":{"start":{"line":36,"column":1,"offset":572},"end":{"line":39,"column":4,"offset":613},"indent":[1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"C++ Implementation","position":{"start":{"line":41,"column":4,"offset":620},"end":{"line":41,"column":22,"offset":638},"indent":[]}}],"position":{"start":{"line":41,"column":1,"offset":617},"end":{"line":41,"column":22,"offset":638},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"39. Write a C++ program to find LCM of a Number using Recursion","position":{"start":{"line":42,"column":5,"offset":644},"end":{"line":42,"column":68,"offset":707},"indent":[]}}],"position":{"start":{"line":42,"column":1,"offset":640},"end":{"line":42,"column":68,"offset":707},"indent":[]}},{"type":"code","lang":"c","meta":null,"value":"//Write a C++ program to find LCM of a Number using Recursion\n\n#include<iostream>\nusing namespace std;\n\nint findLCM(int a,int b)\n{\n    static int tmp=1;\n    if(tmp%a==0 && tmp%b==0)\n    {\n        return tmp;\n    }\n    else\n    {\n        tmp++;\n        findLCM(a,b);\n        return tmp;\n    }\n}\n\nint main()\n{\n    int a,b;\n\n    cout << \"Enter two number: \";\n    cin >> a >> b;\n    int lcm=findLCM(a,b);\n    cout << \"HCF is \" << lcm;\n\n    return 0;\n}","position":{"start":{"line":43,"column":1,"offset":709},"end":{"line":75,"column":4,"offset":1197},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Output","position":{"start":{"line":76,"column":5,"offset":1203},"end":{"line":76,"column":11,"offset":1209},"indent":[]}}],"position":{"start":{"line":76,"column":1,"offset":1199},"end":{"line":76,"column":11,"offset":1209},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"Enter two number: 1 2\nHCF is 1","position":{"start":{"line":77,"column":1,"offset":1211},"end":{"line":80,"column":4,"offset":1252},"indent":[1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Java Implementation","position":{"start":{"line":82,"column":4,"offset":1259},"end":{"line":82,"column":23,"offset":1278},"indent":[]}}],"position":{"start":{"line":82,"column":1,"offset":1256},"end":{"line":82,"column":23,"offset":1278},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"39. Write a Java program to find LCM of a Number using Recursion","position":{"start":{"line":83,"column":5,"offset":1284},"end":{"line":83,"column":69,"offset":1348},"indent":[]}}],"position":{"start":{"line":83,"column":1,"offset":1280},"end":{"line":83,"column":69,"offset":1348},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"//Write a Java program to find LCM of a Number using Recursion\nimport java.util.Scanner;\npublic class Funycode {\n    static int findLCM(int a,int b)\n    {\n        static int tmp=1;\n        if(tmp%a==0 && tmp%b==0)\n        {\n            return tmp;\n        }\n        else\n        {\n            tmp++;\n            findLCM(a,b);\n            return tmp;\n        }\n    }\n\n    public static void main(String[] args) {\n        Scanner z = new Scanner(System.in);\n        int a,b;\n\n        System.out.println(\"Enter two number: \");\n        a = z.nextInt();\n        b = z.nextInt();\n        int lcm=findLCM(a,b);\n        System.out.println(\"HCF is \"+lcm);\n    }\n}","position":{"start":{"line":84,"column":1,"offset":1350},"end":{"line":114,"column":4,"offset":2044},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Output","position":{"start":{"line":115,"column":5,"offset":2050},"end":{"line":115,"column":11,"offset":2056},"indent":[]}}],"position":{"start":{"line":115,"column":1,"offset":2046},"end":{"line":115,"column":11,"offset":2056},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"Enter two number: 1 2\nHCF is 1","position":{"start":{"line":116,"column":1,"offset":2058},"end":{"line":119,"column":4,"offset":2099},"indent":[1,1,1]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"Write a C/C++/Java program to find LCM of a Number using Recursion\",\"category\":\"Function Program Index\",\"tags\":[\"#c\",\"#c++\",\"#java\",\"#tutorial\"],\"date\":\"2020-04-16T00:00:00.000Z\",\"thumbnailText\":\"Index\"}","position":{"start":{"line":122,"column":1,"offset":2103},"end":{"line":122,"column":242,"offset":2344},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":122,"column":242,"offset":2344}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Write a C/C++/Java program to find LCM of a Number using Recursion\",\n  \"category\": \"Function Program Index\",\n  \"tags\": [\"#c\", \"#c++\", \"#java\", \"#tutorial\"],\n  \"date\": \"2020-04-16T00:00:00.000Z\",\n  \"thumbnailText\": \"Index\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"C Implementation\"), mdx(\"h3\", null, \"39. Write a C program to find LCM of a Number using Recursion\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-c\"\n  }, \"//Write a C program to find LCM of a Number using Recursion\\n#include<stdio.h>\\n\\nint findLCM(int a,int b)\\n{\\n    static int tmp=1;\\n    if(tmp%a==0 && tmp%b==0)\\n    {\\n        return tmp;\\n    }\\n    else\\n    {\\n        tmp++;\\n        findLCM(a,b);\\n        return tmp;\\n    }\\n}\\n\\nint main()\\n{\\n    int a,b;\\n\\n    printf(\\\"Enter two number: \\\");\\n    scanf(\\\"%d%d\\\",&a,&b);\\n    int lcm=findLCM(a,b);\\n    printf(\\\"HCF is %d\\\\n\\\",lcm);\\n\\n    return 0;\\n}\\n\")), mdx(\"h3\", null, \"Output\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"Enter two number: 1 2\\nHCF is 1\\n\")), mdx(\"h2\", null, \"C++ Implementation\"), mdx(\"h3\", null, \"39. Write a C++ program to find LCM of a Number using Recursion\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-c\"\n  }, \"//Write a C++ program to find LCM of a Number using Recursion\\n\\n#include<iostream>\\nusing namespace std;\\n\\nint findLCM(int a,int b)\\n{\\n    static int tmp=1;\\n    if(tmp%a==0 && tmp%b==0)\\n    {\\n        return tmp;\\n    }\\n    else\\n    {\\n        tmp++;\\n        findLCM(a,b);\\n        return tmp;\\n    }\\n}\\n\\nint main()\\n{\\n    int a,b;\\n\\n    cout << \\\"Enter two number: \\\";\\n    cin >> a >> b;\\n    int lcm=findLCM(a,b);\\n    cout << \\\"HCF is \\\" << lcm;\\n\\n    return 0;\\n}\\n\")), mdx(\"h3\", null, \"Output\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"Enter two number: 1 2\\nHCF is 1\\n\")), mdx(\"h2\", null, \"Java Implementation\"), mdx(\"h3\", null, \"39. Write a Java program to find LCM of a Number using Recursion\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"//Write a Java program to find LCM of a Number using Recursion\\nimport java.util.Scanner;\\npublic class Funycode {\\n    static int findLCM(int a,int b)\\n    {\\n        static int tmp=1;\\n        if(tmp%a==0 && tmp%b==0)\\n        {\\n            return tmp;\\n        }\\n        else\\n        {\\n            tmp++;\\n            findLCM(a,b);\\n            return tmp;\\n        }\\n    }\\n\\n    public static void main(String[] args) {\\n        Scanner z = new Scanner(System.in);\\n        int a,b;\\n\\n        System.out.println(\\\"Enter two number: \\\");\\n        a = z.nextInt();\\n        b = z.nextInt();\\n        int lcm=findLCM(a,b);\\n        System.out.println(\\\"HCF is \\\"+lcm);\\n    }\\n}\\n\")), mdx(\"h3\", null, \"Output\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"Enter two number: 1 2\\nHCF is 1\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"Write a C/C++/Java program to find LCM of a Number using Recursion\",\n  \"category\": \"Function Program Index\",\n  \"tags\": [\"#c\", \"#c++\", \"#java\", \"#tutorial\"],\n  \"date\": \"2020-04-16T00:00:00.000Z\",\n  \"thumbnailText\": \"Index\"\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h2>{`C Implementation`}</h2>\n    <h3>{`39. Write a C program to find LCM of a Number using Recursion`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-c\"\n      }}>{`//Write a C program to find LCM of a Number using Recursion\n#include<stdio.h>\n\nint findLCM(int a,int b)\n{\n    static int tmp=1;\n    if(tmp%a==0 && tmp%b==0)\n    {\n        return tmp;\n    }\n    else\n    {\n        tmp++;\n        findLCM(a,b);\n        return tmp;\n    }\n}\n\nint main()\n{\n    int a,b;\n\n    printf(\"Enter two number: \");\n    scanf(\"%d%d\",&a,&b);\n    int lcm=findLCM(a,b);\n    printf(\"HCF is %d\\\\n\",lcm);\n\n    return 0;\n}\n`}</code></pre>\n    <h3>{`Output`}</h3>\n    <pre><code parentName=\"pre\" {...{}}>{`Enter two number: 1 2\nHCF is 1\n`}</code></pre>\n    <h2>{`C++ Implementation`}</h2>\n    <h3>{`39. Write a C++ program to find LCM of a Number using Recursion`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-c\"\n      }}>{`//Write a C++ program to find LCM of a Number using Recursion\n\n#include<iostream>\nusing namespace std;\n\nint findLCM(int a,int b)\n{\n    static int tmp=1;\n    if(tmp%a==0 && tmp%b==0)\n    {\n        return tmp;\n    }\n    else\n    {\n        tmp++;\n        findLCM(a,b);\n        return tmp;\n    }\n}\n\nint main()\n{\n    int a,b;\n\n    cout << \"Enter two number: \";\n    cin >> a >> b;\n    int lcm=findLCM(a,b);\n    cout << \"HCF is \" << lcm;\n\n    return 0;\n}\n`}</code></pre>\n    <h3>{`Output`}</h3>\n    <pre><code parentName=\"pre\" {...{}}>{`Enter two number: 1 2\nHCF is 1\n`}</code></pre>\n    <h2>{`Java Implementation`}</h2>\n    <h3>{`39. Write a Java program to find LCM of a Number using Recursion`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`//Write a Java program to find LCM of a Number using Recursion\nimport java.util.Scanner;\npublic class Funycode {\n    static int findLCM(int a,int b)\n    {\n        static int tmp=1;\n        if(tmp%a==0 && tmp%b==0)\n        {\n            return tmp;\n        }\n        else\n        {\n            tmp++;\n            findLCM(a,b);\n            return tmp;\n        }\n    }\n\n    public static void main(String[] args) {\n        Scanner z = new Scanner(System.in);\n        int a,b;\n\n        System.out.println(\"Enter two number: \");\n        a = z.nextInt();\n        b = z.nextInt();\n        int lcm=findLCM(a,b);\n        System.out.println(\"HCF is \"+lcm);\n    }\n}\n`}</code></pre>\n    <h3>{`Output`}</h3>\n    <pre><code parentName=\"pre\" {...{}}>{`Enter two number: 1 2\nHCF is 1\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}