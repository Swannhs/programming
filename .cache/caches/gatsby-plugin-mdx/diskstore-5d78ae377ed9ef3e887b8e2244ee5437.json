{"expireTime":9007200883706345000,"key":"gatsby-plugin-mdx-entire-payload-14e333c275e6ac854c5b8aa898fabbf2--undefined","val":{"mdast":{"type":"root","children":[{"type":"heading","depth":2,"children":[{"type":"text","value":"C Implementation","position":{"start":{"line":2,"column":4,"offset":5},"end":{"line":2,"column":20,"offset":21},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":2},"end":{"line":2,"column":20,"offset":21},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"8. Write a C program to add two distances in feet and inches using structure.","position":{"start":{"line":3,"column":5,"offset":27},"end":{"line":3,"column":82,"offset":104},"indent":[]}}],"position":{"start":{"line":3,"column":1,"offset":23},"end":{"line":3,"column":82,"offset":104},"indent":[]}},{"type":"code","lang":"c","meta":null,"value":"//Write a C++ program to add two distances in feet and inches using structure.\n#include<stdio.h>\n#include <string.h>\nstruct distances {\n   int feet;\n   float inch;\n};\nint main() {\n   struct distances d1,d2,result;\n   printf(\"Enter 1st distance Ex: 12-5.5\\n\");\n   scanf(\"%d-%f\", &d1.feet,&d1.inch);\n   printf(\"\\nEnter 2nd distance Ex: 20-0\\n\");\n   scanf(\"%d-%f\", &d2.feet,&d2.inch);\n   result.feet = d1.feet + d2.feet;\n   result.inch = d1.inch + d2.inch;\n   while (result.inch >= 12.0) {\n      result.inch = result.inch - 12.0;\n      ++result.feet;\n   }\n   printf(\"\\nSum of distances = %d\\'-%.1f\\\"\", result.feet, result.inch);\n}","position":{"start":{"line":4,"column":1,"offset":106},"end":{"line":26,"column":4,"offset":764},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Output","position":{"start":{"line":27,"column":5,"offset":770},"end":{"line":27,"column":11,"offset":776},"indent":[]}}],"position":{"start":{"line":27,"column":1,"offset":766},"end":{"line":27,"column":11,"offset":776},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"Enter 1st distance Ex: 12-5.5\n10 12\n\nEnter 2nd distance Ex: 20-0\n8 19\n\nSum of distances = 20-7","position":{"start":{"line":28,"column":1,"offset":778},"end":{"line":36,"column":4,"offset":888},"indent":[1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"C++ Implementation","position":{"start":{"line":38,"column":4,"offset":895},"end":{"line":38,"column":22,"offset":913},"indent":[]}}],"position":{"start":{"line":38,"column":1,"offset":892},"end":{"line":38,"column":22,"offset":913},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"8. Write a C++ program to add two distances in feet and inches using structure.","position":{"start":{"line":39,"column":5,"offset":919},"end":{"line":39,"column":84,"offset":998},"indent":[]}}],"position":{"start":{"line":39,"column":1,"offset":915},"end":{"line":39,"column":84,"offset":998},"indent":[]}},{"type":"code","lang":"c","meta":null,"value":"//Write a C++ program to find the add two distances in feet and inches using structure.\n\n#include<iostream>\n#include <string.h>\nusing namespace std;\nstruct distances {\n   int feet;\n   float inch;\n};\nint main() {\n   struct distances d1,d2,result;\n   cout << \"Enter 1st distance Ex: 12-5.5\\n\";\n   cin >> d1.feet >> d1.inch;\n   cout << \"\\nEnter 2nd distance Ex: 20-0\\n\";\n   cin >> d2.feet >> d2.inch;\n   result.feet = d1.feet + d2.feet;\n   result.inch = d1.inch + d2.inch;\n   while (result.inch >= 12.0) {\n      result.inch = result.inch - 12.0;\n      ++result.feet;\n   }\n   cout << \"\\nSum of distances = \" << result.feet << \"-\\\"\"<< result.inch;\n}","position":{"start":{"line":40,"column":1,"offset":1000},"end":{"line":64,"column":4,"offset":1677},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Output","position":{"start":{"line":65,"column":5,"offset":1683},"end":{"line":65,"column":11,"offset":1689},"indent":[]}}],"position":{"start":{"line":65,"column":1,"offset":1679},"end":{"line":65,"column":11,"offset":1689},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"Enter 1st distance Ex: 12-5.5\n10 12\n\nEnter 2nd distance Ex: 20-0\n8 19\n\nSum of distances = 20-7","position":{"start":{"line":66,"column":1,"offset":1691},"end":{"line":74,"column":4,"offset":1801},"indent":[1,1,1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"Write a C/C++/Java program to add two distances in feet and inches using structure.\",\"category\":\"Structure And Union Index\",\"tags\":[\"#c\",\"#c++\",\"#java\",\"#tutorial\"],\"date\":\"2020-04-16T00:00:00.000Z\",\"thumbnailText\":\"Index\"}","position":{"start":{"line":77,"column":1,"offset":1805},"end":{"line":77,"column":262,"offset":2066},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":77,"column":262,"offset":2066}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Write a C/C++/Java program to add two distances in feet and inches using structure.\",\n  \"category\": \"Structure And Union Index\",\n  \"tags\": [\"#c\", \"#c++\", \"#java\", \"#tutorial\"],\n  \"date\": \"2020-04-16T00:00:00.000Z\",\n  \"thumbnailText\": \"Index\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"C Implementation\"), mdx(\"h3\", null, \"8. Write a C program to add two distances in feet and inches using structure.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-c\"\n  }, \"//Write a C++ program to add two distances in feet and inches using structure.\\n#include<stdio.h>\\n#include <string.h>\\nstruct distances {\\n   int feet;\\n   float inch;\\n};\\nint main() {\\n   struct distances d1,d2,result;\\n   printf(\\\"Enter 1st distance Ex: 12-5.5\\\\n\\\");\\n   scanf(\\\"%d-%f\\\", &d1.feet,&d1.inch);\\n   printf(\\\"\\\\nEnter 2nd distance Ex: 20-0\\\\n\\\");\\n   scanf(\\\"%d-%f\\\", &d2.feet,&d2.inch);\\n   result.feet = d1.feet + d2.feet;\\n   result.inch = d1.inch + d2.inch;\\n   while (result.inch >= 12.0) {\\n      result.inch = result.inch - 12.0;\\n      ++result.feet;\\n   }\\n   printf(\\\"\\\\nSum of distances = %d\\\\'-%.1f\\\\\\\"\\\", result.feet, result.inch);\\n}\\n\")), mdx(\"h3\", null, \"Output\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"Enter 1st distance Ex: 12-5.5\\n10 12\\n\\nEnter 2nd distance Ex: 20-0\\n8 19\\n\\nSum of distances = 20-7\\n\")), mdx(\"h2\", null, \"C++ Implementation\"), mdx(\"h3\", null, \"8. Write a C++ program to add two distances in feet and inches using structure.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-c\"\n  }, \"//Write a C++ program to find the add two distances in feet and inches using structure.\\n\\n#include<iostream>\\n#include <string.h>\\nusing namespace std;\\nstruct distances {\\n   int feet;\\n   float inch;\\n};\\nint main() {\\n   struct distances d1,d2,result;\\n   cout << \\\"Enter 1st distance Ex: 12-5.5\\\\n\\\";\\n   cin >> d1.feet >> d1.inch;\\n   cout << \\\"\\\\nEnter 2nd distance Ex: 20-0\\\\n\\\";\\n   cin >> d2.feet >> d2.inch;\\n   result.feet = d1.feet + d2.feet;\\n   result.inch = d1.inch + d2.inch;\\n   while (result.inch >= 12.0) {\\n      result.inch = result.inch - 12.0;\\n      ++result.feet;\\n   }\\n   cout << \\\"\\\\nSum of distances = \\\" << result.feet << \\\"-\\\\\\\"\\\"<< result.inch;\\n}\\n\")), mdx(\"h3\", null, \"Output\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"Enter 1st distance Ex: 12-5.5\\n10 12\\n\\nEnter 2nd distance Ex: 20-0\\n8 19\\n\\nSum of distances = 20-7\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"Write a C/C++/Java program to add two distances in feet and inches using structure.\",\n  \"category\": \"Structure And Union Index\",\n  \"tags\": [\"#c\", \"#c++\", \"#java\", \"#tutorial\"],\n  \"date\": \"2020-04-16T00:00:00.000Z\",\n  \"thumbnailText\": \"Index\"\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h2>{`C Implementation`}</h2>\n    <h3>{`8. Write a C program to add two distances in feet and inches using structure.`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-c\"\n      }}>{`//Write a C++ program to add two distances in feet and inches using structure.\n#include<stdio.h>\n#include <string.h>\nstruct distances {\n   int feet;\n   float inch;\n};\nint main() {\n   struct distances d1,d2,result;\n   printf(\"Enter 1st distance Ex: 12-5.5\\\\n\");\n   scanf(\"%d-%f\", &d1.feet,&d1.inch);\n   printf(\"\\\\nEnter 2nd distance Ex: 20-0\\\\n\");\n   scanf(\"%d-%f\", &d2.feet,&d2.inch);\n   result.feet = d1.feet + d2.feet;\n   result.inch = d1.inch + d2.inch;\n   while (result.inch >= 12.0) {\n      result.inch = result.inch - 12.0;\n      ++result.feet;\n   }\n   printf(\"\\\\nSum of distances = %d\\\\'-%.1f\\\\\"\", result.feet, result.inch);\n}\n`}</code></pre>\n    <h3>{`Output`}</h3>\n    <pre><code parentName=\"pre\" {...{}}>{`Enter 1st distance Ex: 12-5.5\n10 12\n\nEnter 2nd distance Ex: 20-0\n8 19\n\nSum of distances = 20-7\n`}</code></pre>\n    <h2>{`C++ Implementation`}</h2>\n    <h3>{`8. Write a C++ program to add two distances in feet and inches using structure.`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-c\"\n      }}>{`//Write a C++ program to find the add two distances in feet and inches using structure.\n\n#include<iostream>\n#include <string.h>\nusing namespace std;\nstruct distances {\n   int feet;\n   float inch;\n};\nint main() {\n   struct distances d1,d2,result;\n   cout << \"Enter 1st distance Ex: 12-5.5\\\\n\";\n   cin >> d1.feet >> d1.inch;\n   cout << \"\\\\nEnter 2nd distance Ex: 20-0\\\\n\";\n   cin >> d2.feet >> d2.inch;\n   result.feet = d1.feet + d2.feet;\n   result.inch = d1.inch + d2.inch;\n   while (result.inch >= 12.0) {\n      result.inch = result.inch - 12.0;\n      ++result.feet;\n   }\n   cout << \"\\\\nSum of distances = \" << result.feet << \"-\\\\\"\"<< result.inch;\n}\n`}</code></pre>\n    <h3>{`Output`}</h3>\n    <pre><code parentName=\"pre\" {...{}}>{`Enter 1st distance Ex: 12-5.5\n10 12\n\nEnter 2nd distance Ex: 20-0\n8 19\n\nSum of distances = 20-7\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}