{"expireTime":9007200883706345000,"key":"gatsby-plugin-mdx-entire-payload-aed78bb871bf96fe26471aa601f6d920--undefined","val":{"mdast":{"type":"root","children":[{"type":"heading","depth":2,"children":[{"type":"text","value":"C Implementation","position":{"start":{"line":2,"column":4,"offset":5},"end":{"line":2,"column":20,"offset":21},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":2},"end":{"line":2,"column":20,"offset":21},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"9. Write a C program to extract individual bytes from an unsigned int using union.","position":{"start":{"line":3,"column":5,"offset":27},"end":{"line":3,"column":87,"offset":109},"indent":[]}}],"position":{"start":{"line":3,"column":1,"offset":23},"end":{"line":3,"column":87,"offset":109},"indent":[]}},{"type":"code","lang":"c","meta":null,"value":"//Write a C++ program to extract individual bytes from an unsigned int using union.\n#include<stdio.h>\n#include <string.h>\nunion tagname\n{\n    unsigned int a;\n    unsigned char s[4];\n};\nint main()\n{\n    union tagname object;\n    char i;\n    object.a=0xAABBCCDD;\n    printf(\"Integer number: %ld, hex: %X\\n\",object.a,object.a);\n    printf(\"Indivisual bytes: \");\n    for(i=3;i>=0;i--)\n        printf(\"%02X \",object.s[i]);\n    printf(\"\\n\");\n}","position":{"start":{"line":4,"column":1,"offset":111},"end":{"line":24,"column":4,"offset":577},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Output","position":{"start":{"line":25,"column":5,"offset":583},"end":{"line":25,"column":11,"offset":589},"indent":[]}}],"position":{"start":{"line":25,"column":1,"offset":579},"end":{"line":25,"column":11,"offset":589},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"Integer number: 2864434397 : 2864434397\nIndivisual bytes: � �  �","position":{"start":{"line":26,"column":1,"offset":591},"end":{"line":29,"column":4,"offset":666},"indent":[1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"C++ Implementation","position":{"start":{"line":31,"column":4,"offset":673},"end":{"line":31,"column":22,"offset":691},"indent":[]}}],"position":{"start":{"line":31,"column":1,"offset":670},"end":{"line":31,"column":22,"offset":691},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"9. Write a C++ program to extract individual bytes from an unsigned int using union.","position":{"start":{"line":32,"column":5,"offset":697},"end":{"line":32,"column":89,"offset":781},"indent":[]}}],"position":{"start":{"line":32,"column":1,"offset":693},"end":{"line":32,"column":89,"offset":781},"indent":[]}},{"type":"code","lang":"c","meta":null,"value":"//Write a C++ program to find the extract individual bytes from an unsigned int using union.\n\n#include<iostream>\n#include <string.h>\nusing namespace std;\nunion tagname\n{\n    unsigned int a;\n    unsigned char s[4];\n};\nint main()\n{\n    union tagname object;\n    char i;\n    object.a=0xAABBCCDD;\n    cout << \"Integer number: \" << object.a << \" : \" << object.a << endl;\n    cout << \"Indivisual bytes: \";\n    for(i=3;i>=0;i--)\n        cout << object.s[i] << \" \";\n    cout << \"\\n\";\n}","position":{"start":{"line":33,"column":1,"offset":783},"end":{"line":55,"column":4,"offset":1291},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Output","position":{"start":{"line":56,"column":5,"offset":1297},"end":{"line":56,"column":11,"offset":1303},"indent":[]}}],"position":{"start":{"line":56,"column":1,"offset":1293},"end":{"line":56,"column":11,"offset":1303},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"Integer number: 2864434397 : 2864434397\nIndivisual bytes: � �  �","position":{"start":{"line":57,"column":1,"offset":1305},"end":{"line":60,"column":4,"offset":1380},"indent":[1,1,1]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"Write a C/C++/Java program to extract individual bytes from an unsigned int using union.\",\"category\":\"Structure And Union Index\",\"tags\":[\"#c\",\"#c++\",\"#java\",\"#tutorial\"],\"date\":\"2020-04-16T00:00:00.000Z\",\"thumbnailText\":\"Index\"}","position":{"start":{"line":63,"column":1,"offset":1384},"end":{"line":63,"column":267,"offset":1650},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":63,"column":267,"offset":1650}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Write a C/C++/Java program to extract individual bytes from an unsigned int using union.\",\n  \"category\": \"Structure And Union Index\",\n  \"tags\": [\"#c\", \"#c++\", \"#java\", \"#tutorial\"],\n  \"date\": \"2020-04-16T00:00:00.000Z\",\n  \"thumbnailText\": \"Index\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"C Implementation\"), mdx(\"h3\", null, \"9. Write a C program to extract individual bytes from an unsigned int using union.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-c\"\n  }, \"//Write a C++ program to extract individual bytes from an unsigned int using union.\\n#include<stdio.h>\\n#include <string.h>\\nunion tagname\\n{\\n    unsigned int a;\\n    unsigned char s[4];\\n};\\nint main()\\n{\\n    union tagname object;\\n    char i;\\n    object.a=0xAABBCCDD;\\n    printf(\\\"Integer number: %ld, hex: %X\\\\n\\\",object.a,object.a);\\n    printf(\\\"Indivisual bytes: \\\");\\n    for(i=3;i>=0;i--)\\n        printf(\\\"%02X \\\",object.s[i]);\\n    printf(\\\"\\\\n\\\");\\n}\\n\")), mdx(\"h3\", null, \"Output\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"Integer number: 2864434397 : 2864434397\\nIndivisual bytes: \\uFFFD \\uFFFD  \\uFFFD\\n\")), mdx(\"h2\", null, \"C++ Implementation\"), mdx(\"h3\", null, \"9. Write a C++ program to extract individual bytes from an unsigned int using union.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-c\"\n  }, \"//Write a C++ program to find the extract individual bytes from an unsigned int using union.\\n\\n#include<iostream>\\n#include <string.h>\\nusing namespace std;\\nunion tagname\\n{\\n    unsigned int a;\\n    unsigned char s[4];\\n};\\nint main()\\n{\\n    union tagname object;\\n    char i;\\n    object.a=0xAABBCCDD;\\n    cout << \\\"Integer number: \\\" << object.a << \\\" : \\\" << object.a << endl;\\n    cout << \\\"Indivisual bytes: \\\";\\n    for(i=3;i>=0;i--)\\n        cout << object.s[i] << \\\" \\\";\\n    cout << \\\"\\\\n\\\";\\n}\\n\")), mdx(\"h3\", null, \"Output\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"Integer number: 2864434397 : 2864434397\\nIndivisual bytes: \\uFFFD \\uFFFD  \\uFFFD\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"Write a C/C++/Java program to extract individual bytes from an unsigned int using union.\",\n  \"category\": \"Structure And Union Index\",\n  \"tags\": [\"#c\", \"#c++\", \"#java\", \"#tutorial\"],\n  \"date\": \"2020-04-16T00:00:00.000Z\",\n  \"thumbnailText\": \"Index\"\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h2>{`C Implementation`}</h2>\n    <h3>{`9. Write a C program to extract individual bytes from an unsigned int using union.`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-c\"\n      }}>{`//Write a C++ program to extract individual bytes from an unsigned int using union.\n#include<stdio.h>\n#include <string.h>\nunion tagname\n{\n    unsigned int a;\n    unsigned char s[4];\n};\nint main()\n{\n    union tagname object;\n    char i;\n    object.a=0xAABBCCDD;\n    printf(\"Integer number: %ld, hex: %X\\\\n\",object.a,object.a);\n    printf(\"Indivisual bytes: \");\n    for(i=3;i>=0;i--)\n        printf(\"%02X \",object.s[i]);\n    printf(\"\\\\n\");\n}\n`}</code></pre>\n    <h3>{`Output`}</h3>\n    <pre><code parentName=\"pre\" {...{}}>{`Integer number: 2864434397 : 2864434397\nIndivisual bytes: � �  �\n`}</code></pre>\n    <h2>{`C++ Implementation`}</h2>\n    <h3>{`9. Write a C++ program to extract individual bytes from an unsigned int using union.`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-c\"\n      }}>{`//Write a C++ program to find the extract individual bytes from an unsigned int using union.\n\n#include<iostream>\n#include <string.h>\nusing namespace std;\nunion tagname\n{\n    unsigned int a;\n    unsigned char s[4];\n};\nint main()\n{\n    union tagname object;\n    char i;\n    object.a=0xAABBCCDD;\n    cout << \"Integer number: \" << object.a << \" : \" << object.a << endl;\n    cout << \"Indivisual bytes: \";\n    for(i=3;i>=0;i--)\n        cout << object.s[i] << \" \";\n    cout << \"\\\\n\";\n}\n`}</code></pre>\n    <h3>{`Output`}</h3>\n    <pre><code parentName=\"pre\" {...{}}>{`Integer number: 2864434397 : 2864434397\nIndivisual bytes: � �  �\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}