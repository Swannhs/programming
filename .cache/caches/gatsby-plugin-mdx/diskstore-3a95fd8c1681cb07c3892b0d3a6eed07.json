{"expireTime":9007200883718172000,"key":"gatsby-plugin-mdx-entire-payload-37cdafb2170d239595bef4d74afff755--undefined","val":{"mdast":{"type":"root","children":[{"type":"heading","depth":2,"children":[{"type":"text","value":"C Implementation","position":{"start":{"line":2,"column":4,"offset":5},"end":{"line":2,"column":20,"offset":21},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":2},"end":{"line":2,"column":20,"offset":21},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"4. Write a C to print the array elements using recursion.","position":{"start":{"line":3,"column":5,"offset":27},"end":{"line":3,"column":62,"offset":84},"indent":[]}}],"position":{"start":{"line":3,"column":1,"offset":23},"end":{"line":3,"column":62,"offset":84},"indent":[]}},{"type":"code","lang":"c","meta":null,"value":"//Write a C to print the array elements using recursion.\n#include<stdio.h>\nint main(){\n    int k[]={1,2,3,4,5};\n    arrayPrint(sizeof(k)/sizeof(int),k,0);\n}\nint arrayPrint(int length,int k[],int i){\n    if(length<=i){\n        return 0;\n    }\n    printf(\"%d\",k[i]);\n    arrayPrint(length,k,++i);\n}","position":{"start":{"line":4,"column":1,"offset":86},"end":{"line":18,"column":4,"offset":405},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Output","position":{"start":{"line":19,"column":5,"offset":411},"end":{"line":19,"column":11,"offset":417},"indent":[]}}],"position":{"start":{"line":19,"column":1,"offset":407},"end":{"line":19,"column":11,"offset":417},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"12345","position":{"start":{"line":20,"column":1,"offset":419},"end":{"line":22,"column":4,"offset":434},"indent":[1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"C++ Implementation","position":{"start":{"line":23,"column":4,"offset":439},"end":{"line":23,"column":22,"offset":457},"indent":[]}}],"position":{"start":{"line":23,"column":1,"offset":436},"end":{"line":23,"column":22,"offset":457},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"4. Write a C++ to print the array elements using recursion.","position":{"start":{"line":24,"column":5,"offset":463},"end":{"line":24,"column":64,"offset":522},"indent":[]}}],"position":{"start":{"line":24,"column":1,"offset":459},"end":{"line":24,"column":64,"offset":522},"indent":[]}},{"type":"code","lang":"c","meta":null,"value":"//Write a C++ to print the array elements using recursion.\n\n#include<iostream>\nusing namespace std;\nint main(){\n    int k[]={1,2,3,4,5};\n    arrayPrint(sizeof(k)/sizeof(int),k,0);\n}\nint arrayPrint(int length,int k[],int i){\n    if(length<=i){\n        return 0;\n    }\n    cout << k[i];\n    arrayPrint(length,k,++i);\n}","position":{"start":{"line":25,"column":1,"offset":524},"end":{"line":41,"column":4,"offset":865},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Output","position":{"start":{"line":42,"column":5,"offset":871},"end":{"line":42,"column":11,"offset":877},"indent":[]}}],"position":{"start":{"line":42,"column":1,"offset":867},"end":{"line":42,"column":11,"offset":877},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"12345","position":{"start":{"line":43,"column":1,"offset":879},"end":{"line":45,"column":4,"offset":894},"indent":[1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Java Implementation","position":{"start":{"line":46,"column":4,"offset":899},"end":{"line":46,"column":23,"offset":918},"indent":[]}}],"position":{"start":{"line":46,"column":1,"offset":896},"end":{"line":46,"column":23,"offset":918},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"4. Write a Java to print the array elements using recursion.","position":{"start":{"line":47,"column":5,"offset":924},"end":{"line":47,"column":65,"offset":984},"indent":[]}}],"position":{"start":{"line":47,"column":1,"offset":920},"end":{"line":47,"column":65,"offset":984},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"//Write a Java to print the array elements using recursion.\nimport java.util.Scanner;\npublic class Funycode {\n    public static void main(String[] args) {\n      Scanner z = new Scanner(System.in);\n      int k[]={1,2,3,4,5};\n      arrayPrint(sizeof(k)/sizeof(int),k,0);\n    }\n    static int febo(int n){\n      if(length<=i){\n          return 0;\n      }\n      System.out.printf(\" \" + k[i]);\n      arrayPrint(length,k,++i);\n    }\n}","position":{"start":{"line":48,"column":1,"offset":986},"end":{"line":65,"column":4,"offset":1441},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Output","position":{"start":{"line":66,"column":5,"offset":1447},"end":{"line":66,"column":11,"offset":1453},"indent":[]}}],"position":{"start":{"line":66,"column":1,"offset":1443},"end":{"line":66,"column":11,"offset":1453},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"12345","position":{"start":{"line":67,"column":1,"offset":1455},"end":{"line":69,"column":4,"offset":1470},"indent":[1,1]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"Write a C/C++/Java to print the array elements using recursion.\",\"category\":\"Recursion Function Index\",\"tags\":[\"recursion\"],\"date\":\"2020-04-16T00:00:00.000Z\",\"thumbnailText\":\"Index\"}","position":{"start":{"line":72,"column":1,"offset":1474},"end":{"line":72,"column":221,"offset":1694},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":72,"column":221,"offset":1694}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Write a C/C++/Java to print the array elements using recursion.\",\n  \"category\": \"Recursion Function Index\",\n  \"tags\": [\"recursion\"],\n  \"date\": \"2020-04-16T00:00:00.000Z\",\n  \"thumbnailText\": \"Index\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"C Implementation\"), mdx(\"h3\", null, \"4. Write a C to print the array elements using recursion.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-c\"\n  }, \"//Write a C to print the array elements using recursion.\\n#include<stdio.h>\\nint main(){\\n    int k[]={1,2,3,4,5};\\n    arrayPrint(sizeof(k)/sizeof(int),k,0);\\n}\\nint arrayPrint(int length,int k[],int i){\\n    if(length<=i){\\n        return 0;\\n    }\\n    printf(\\\"%d\\\",k[i]);\\n    arrayPrint(length,k,++i);\\n}\\n\")), mdx(\"h3\", null, \"Output\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"12345\\n\")), mdx(\"h2\", null, \"C++ Implementation\"), mdx(\"h3\", null, \"4. Write a C++ to print the array elements using recursion.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-c\"\n  }, \"//Write a C++ to print the array elements using recursion.\\n\\n#include<iostream>\\nusing namespace std;\\nint main(){\\n    int k[]={1,2,3,4,5};\\n    arrayPrint(sizeof(k)/sizeof(int),k,0);\\n}\\nint arrayPrint(int length,int k[],int i){\\n    if(length<=i){\\n        return 0;\\n    }\\n    cout << k[i];\\n    arrayPrint(length,k,++i);\\n}\\n\")), mdx(\"h3\", null, \"Output\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"12345\\n\")), mdx(\"h2\", null, \"Java Implementation\"), mdx(\"h3\", null, \"4. Write a Java to print the array elements using recursion.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"//Write a Java to print the array elements using recursion.\\nimport java.util.Scanner;\\npublic class Funycode {\\n    public static void main(String[] args) {\\n      Scanner z = new Scanner(System.in);\\n      int k[]={1,2,3,4,5};\\n      arrayPrint(sizeof(k)/sizeof(int),k,0);\\n    }\\n    static int febo(int n){\\n      if(length<=i){\\n          return 0;\\n      }\\n      System.out.printf(\\\" \\\" + k[i]);\\n      arrayPrint(length,k,++i);\\n    }\\n}\\n\")), mdx(\"h3\", null, \"Output\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"12345\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"Write a C/C++/Java to print the array elements using recursion.\",\n  \"category\": \"Recursion Function Index\",\n  \"tags\": [\"recursion\"],\n  \"date\": \"2020-04-16T00:00:00.000Z\",\n  \"thumbnailText\": \"Index\"\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h2>{`C Implementation`}</h2>\n    <h3>{`4. Write a C to print the array elements using recursion.`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-c\"\n      }}>{`//Write a C to print the array elements using recursion.\n#include<stdio.h>\nint main(){\n    int k[]={1,2,3,4,5};\n    arrayPrint(sizeof(k)/sizeof(int),k,0);\n}\nint arrayPrint(int length,int k[],int i){\n    if(length<=i){\n        return 0;\n    }\n    printf(\"%d\",k[i]);\n    arrayPrint(length,k,++i);\n}\n`}</code></pre>\n    <h3>{`Output`}</h3>\n    <pre><code parentName=\"pre\" {...{}}>{`12345\n`}</code></pre>\n    <h2>{`C++ Implementation`}</h2>\n    <h3>{`4. Write a C++ to print the array elements using recursion.`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-c\"\n      }}>{`//Write a C++ to print the array elements using recursion.\n\n#include<iostream>\nusing namespace std;\nint main(){\n    int k[]={1,2,3,4,5};\n    arrayPrint(sizeof(k)/sizeof(int),k,0);\n}\nint arrayPrint(int length,int k[],int i){\n    if(length<=i){\n        return 0;\n    }\n    cout << k[i];\n    arrayPrint(length,k,++i);\n}\n`}</code></pre>\n    <h3>{`Output`}</h3>\n    <pre><code parentName=\"pre\" {...{}}>{`12345\n`}</code></pre>\n    <h2>{`Java Implementation`}</h2>\n    <h3>{`4. Write a Java to print the array elements using recursion.`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`//Write a Java to print the array elements using recursion.\nimport java.util.Scanner;\npublic class Funycode {\n    public static void main(String[] args) {\n      Scanner z = new Scanner(System.in);\n      int k[]={1,2,3,4,5};\n      arrayPrint(sizeof(k)/sizeof(int),k,0);\n    }\n    static int febo(int n){\n      if(length<=i){\n          return 0;\n      }\n      System.out.printf(\" \" + k[i]);\n      arrayPrint(length,k,++i);\n    }\n}\n`}</code></pre>\n    <h3>{`Output`}</h3>\n    <pre><code parentName=\"pre\" {...{}}>{`12345\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}