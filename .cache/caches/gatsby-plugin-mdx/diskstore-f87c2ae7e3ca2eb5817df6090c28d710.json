{"expireTime":9007200883710394000,"key":"gatsby-plugin-mdx-entire-payload-de264fd6167c80e8016b2f7d9f030026--undefined","val":{"mdast":{"type":"root","children":[{"type":"heading","depth":2,"children":[{"type":"text","value":"C Implementation","position":{"start":{"line":2,"column":4,"offset":5},"end":{"line":2,"column":20,"offset":21},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":2},"end":{"line":2,"column":20,"offset":21},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"15. Write a C program to show how a function returning pointer.","position":{"start":{"line":3,"column":5,"offset":27},"end":{"line":3,"column":68,"offset":90},"indent":[]}}],"position":{"start":{"line":3,"column":1,"offset":23},"end":{"line":3,"column":68,"offset":90},"indent":[]}},{"type":"code","lang":"c","meta":null,"value":"//Write a C program to show how a function returning pointer.\n#include <stdio.h>\nvoid main()\n{\n int a,b;\n int *result;\n   printf(\" Enter the two number : \");\n   scanf(\"%d %d\", &a,&b);\n   int* findLarger(int*, int*);\n   result=findLarger(&a, &b);\n   printf(\" The larger number is=%d\",*result);\n\n}\n\nint* findLarger(int *n1, int *n2)\n{\n if(*n1 > *n2)\n  return n1;\n else\n  return n2;\n}","position":{"start":{"line":4,"column":1,"offset":92},"end":{"line":26,"column":4,"offset":504},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Output","position":{"start":{"line":27,"column":5,"offset":510},"end":{"line":27,"column":11,"offset":516},"indent":[]}}],"position":{"start":{"line":27,"column":1,"offset":506},"end":{"line":27,"column":11,"offset":516},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"Address of variable 'a' is: 0x7ffcdc9c3f64","position":{"start":{"line":28,"column":1,"offset":518},"end":{"line":30,"column":4,"offset":570},"indent":[1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"C++ Implementation","position":{"start":{"line":31,"column":4,"offset":575},"end":{"line":31,"column":22,"offset":593},"indent":[]}}],"position":{"start":{"line":31,"column":1,"offset":572},"end":{"line":31,"column":22,"offset":593},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"15. Write a C++ program to show how a function returning pointer.","position":{"start":{"line":32,"column":5,"offset":599},"end":{"line":32,"column":70,"offset":664},"indent":[]}}],"position":{"start":{"line":32,"column":1,"offset":595},"end":{"line":32,"column":70,"offset":664},"indent":[]}},{"type":"code","lang":"c","meta":null,"value":"//Write a C++ program to show how a function returning pointer.\n#include <iostream>\n#include <string.h>\nusing namespace std;\nint main()\n{\n    int a,b;\n    int *result;\n    cout<<(\" Enter the two number : \");\n    cin>>a>>b;\n    int* findLarger(int*, int*);\n    result=findLarger(&a, &b);\n    cout<<\" The larger number is=\"<<*result;\n\n}\n\nint* findLarger(int *n1, int *n2)\n{\n    if(*n1 > *n2)\n        return n1;\n    else\n        return n2;\n}","position":{"start":{"line":33,"column":1,"offset":666},"end":{"line":57,"column":4,"offset":1137},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Output","position":{"start":{"line":58,"column":5,"offset":1143},"end":{"line":58,"column":11,"offset":1149},"indent":[]}}],"position":{"start":{"line":58,"column":1,"offset":1139},"end":{"line":58,"column":11,"offset":1149},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"Address of variable 'a' is: 0x7ffcdc9c3f64","position":{"start":{"line":59,"column":1,"offset":1151},"end":{"line":61,"column":4,"offset":1203},"indent":[1,1]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"Write a C/C++/Java program to show how a function returning pointer.\",\"category\":\"Pointer Program Index\",\"tags\":[\"#c\",\"#c++\",\"#tutorial\"],\"date\":\"2020-04-16T00:00:00.000Z\",\"thumbnailText\":\"Index\"}","position":{"start":{"line":64,"column":1,"offset":1207},"end":{"line":64,"column":235,"offset":1441},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":64,"column":235,"offset":1441}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Write a C/C++/Java program to show how a function returning pointer.\",\n  \"category\": \"Pointer Program Index\",\n  \"tags\": [\"#c\", \"#c++\", \"#tutorial\"],\n  \"date\": \"2020-04-16T00:00:00.000Z\",\n  \"thumbnailText\": \"Index\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"C Implementation\"), mdx(\"h3\", null, \"15. Write a C program to show how a function returning pointer.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-c\"\n  }, \"//Write a C program to show how a function returning pointer.\\n#include <stdio.h>\\nvoid main()\\n{\\n int a,b;\\n int *result;\\n   printf(\\\" Enter the two number : \\\");\\n   scanf(\\\"%d %d\\\", &a,&b);\\n   int* findLarger(int*, int*);\\n   result=findLarger(&a, &b);\\n   printf(\\\" The larger number is=%d\\\",*result);\\n\\n}\\n\\nint* findLarger(int *n1, int *n2)\\n{\\n if(*n1 > *n2)\\n  return n1;\\n else\\n  return n2;\\n}\\n\")), mdx(\"h3\", null, \"Output\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"Address of variable 'a' is: 0x7ffcdc9c3f64\\n\")), mdx(\"h2\", null, \"C++ Implementation\"), mdx(\"h3\", null, \"15. Write a C++ program to show how a function returning pointer.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-c\"\n  }, \"//Write a C++ program to show how a function returning pointer.\\n#include <iostream>\\n#include <string.h>\\nusing namespace std;\\nint main()\\n{\\n    int a,b;\\n    int *result;\\n    cout<<(\\\" Enter the two number : \\\");\\n    cin>>a>>b;\\n    int* findLarger(int*, int*);\\n    result=findLarger(&a, &b);\\n    cout<<\\\" The larger number is=\\\"<<*result;\\n\\n}\\n\\nint* findLarger(int *n1, int *n2)\\n{\\n    if(*n1 > *n2)\\n        return n1;\\n    else\\n        return n2;\\n}\\n\")), mdx(\"h3\", null, \"Output\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"Address of variable 'a' is: 0x7ffcdc9c3f64\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"Write a C/C++/Java program to show how a function returning pointer.\",\n  \"category\": \"Pointer Program Index\",\n  \"tags\": [\"#c\", \"#c++\", \"#tutorial\"],\n  \"date\": \"2020-04-16T00:00:00.000Z\",\n  \"thumbnailText\": \"Index\"\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h2>{`C Implementation`}</h2>\n    <h3>{`15. Write a C program to show how a function returning pointer.`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-c\"\n      }}>{`//Write a C program to show how a function returning pointer.\n#include <stdio.h>\nvoid main()\n{\n int a,b;\n int *result;\n   printf(\" Enter the two number : \");\n   scanf(\"%d %d\", &a,&b);\n   int* findLarger(int*, int*);\n   result=findLarger(&a, &b);\n   printf(\" The larger number is=%d\",*result);\n\n}\n\nint* findLarger(int *n1, int *n2)\n{\n if(*n1 > *n2)\n  return n1;\n else\n  return n2;\n}\n`}</code></pre>\n    <h3>{`Output`}</h3>\n    <pre><code parentName=\"pre\" {...{}}>{`Address of variable 'a' is: 0x7ffcdc9c3f64\n`}</code></pre>\n    <h2>{`C++ Implementation`}</h2>\n    <h3>{`15. Write a C++ program to show how a function returning pointer.`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-c\"\n      }}>{`//Write a C++ program to show how a function returning pointer.\n#include <iostream>\n#include <string.h>\nusing namespace std;\nint main()\n{\n    int a,b;\n    int *result;\n    cout<<(\" Enter the two number : \");\n    cin>>a>>b;\n    int* findLarger(int*, int*);\n    result=findLarger(&a, &b);\n    cout<<\" The larger number is=\"<<*result;\n\n}\n\nint* findLarger(int *n1, int *n2)\n{\n    if(*n1 > *n2)\n        return n1;\n    else\n        return n2;\n}\n`}</code></pre>\n    <h3>{`Output`}</h3>\n    <pre><code parentName=\"pre\" {...{}}>{`Address of variable 'a' is: 0x7ffcdc9c3f64\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}