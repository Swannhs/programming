{"expireTime":9007200883710395000,"key":"gatsby-plugin-mdx-entire-payload-60bc5e89e146821e457a62c1938f02e4--undefined","val":{"mdast":{"type":"root","children":[{"type":"heading","depth":2,"children":[{"type":"text","value":"C Implementation","position":{"start":{"line":2,"column":4,"offset":5},"end":{"line":2,"column":20,"offset":21},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":2},"end":{"line":2,"column":20,"offset":21},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"19. Write a C program to show a pointer to union.","position":{"start":{"line":3,"column":5,"offset":27},"end":{"line":3,"column":54,"offset":76},"indent":[]}}],"position":{"start":{"line":3,"column":1,"offset":23},"end":{"line":3,"column":54,"offset":76},"indent":[]}},{"type":"code","lang":"c","meta":null,"value":"//Write a C program to show a pointer to union.\n#include <stdio.h>\nvoid main()\n{\n    union student\n    {\n        char *name;\n    };\n    union student stu,*p;\n    stu.name=\"abcde\";  //assign  the string\n    p=&stu;\n    printf(\" %s \\n\",(*p).name);\n}","position":{"start":{"line":4,"column":1,"offset":78},"end":{"line":18,"column":4,"offset":348},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Output","position":{"start":{"line":19,"column":5,"offset":354},"end":{"line":19,"column":11,"offset":360},"indent":[]}}],"position":{"start":{"line":19,"column":1,"offset":350},"end":{"line":19,"column":11,"offset":360},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"abcde","position":{"start":{"line":20,"column":1,"offset":362},"end":{"line":22,"column":4,"offset":377},"indent":[1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"C++ Implementation","position":{"start":{"line":23,"column":4,"offset":382},"end":{"line":23,"column":22,"offset":400},"indent":[]}}],"position":{"start":{"line":23,"column":1,"offset":379},"end":{"line":23,"column":22,"offset":400},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"19. Write a C++ program to show a pointer to union.","position":{"start":{"line":24,"column":5,"offset":406},"end":{"line":24,"column":56,"offset":457},"indent":[]}}],"position":{"start":{"line":24,"column":1,"offset":402},"end":{"line":24,"column":56,"offset":457},"indent":[]}},{"type":"code","lang":"c","meta":null,"value":"//Write a C++ program to show a pointer to union.\n#include <iostream>\n#include <string.h>\nusing namespace std;\nint main()\n{\n    union student\n    {\n        char *name;\n    };\n    union student stu,*p;\n    stu.name=\"abcde\";  //assign  the string\n    p=&stu;\n    cout<<(*p).name;\n}","position":{"start":{"line":25,"column":1,"offset":459},"end":{"line":41,"column":4,"offset":763},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Output","position":{"start":{"line":42,"column":5,"offset":769},"end":{"line":42,"column":11,"offset":775},"indent":[]}}],"position":{"start":{"line":42,"column":1,"offset":765},"end":{"line":42,"column":11,"offset":775},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"abcde","position":{"start":{"line":43,"column":1,"offset":777},"end":{"line":45,"column":4,"offset":792},"indent":[1,1]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"Write a C/C++/Java program to show a pointer to union.\",\"category\":\"Pointer Program Index\",\"tags\":[\"#c\",\"#c++\",\"#tutorial\"],\"date\":\"2020-04-16T00:00:00.000Z\",\"thumbnailText\":\"Index\"}","position":{"start":{"line":48,"column":1,"offset":796},"end":{"line":48,"column":221,"offset":1016},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":48,"column":221,"offset":1016}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Write a C/C++/Java program to show a pointer to union.\",\n  \"category\": \"Pointer Program Index\",\n  \"tags\": [\"#c\", \"#c++\", \"#tutorial\"],\n  \"date\": \"2020-04-16T00:00:00.000Z\",\n  \"thumbnailText\": \"Index\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"C Implementation\"), mdx(\"h3\", null, \"19. Write a C program to show a pointer to union.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-c\"\n  }, \"//Write a C program to show a pointer to union.\\n#include <stdio.h>\\nvoid main()\\n{\\n    union student\\n    {\\n        char *name;\\n    };\\n    union student stu,*p;\\n    stu.name=\\\"abcde\\\";  //assign  the string\\n    p=&stu;\\n    printf(\\\" %s \\\\n\\\",(*p).name);\\n}\\n\")), mdx(\"h3\", null, \"Output\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"abcde\\n\")), mdx(\"h2\", null, \"C++ Implementation\"), mdx(\"h3\", null, \"19. Write a C++ program to show a pointer to union.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-c\"\n  }, \"//Write a C++ program to show a pointer to union.\\n#include <iostream>\\n#include <string.h>\\nusing namespace std;\\nint main()\\n{\\n    union student\\n    {\\n        char *name;\\n    };\\n    union student stu,*p;\\n    stu.name=\\\"abcde\\\";  //assign  the string\\n    p=&stu;\\n    cout<<(*p).name;\\n}\\n\")), mdx(\"h3\", null, \"Output\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"abcde\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"Write a C/C++/Java program to show a pointer to union.\",\n  \"category\": \"Pointer Program Index\",\n  \"tags\": [\"#c\", \"#c++\", \"#tutorial\"],\n  \"date\": \"2020-04-16T00:00:00.000Z\",\n  \"thumbnailText\": \"Index\"\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h2>{`C Implementation`}</h2>\n    <h3>{`19. Write a C program to show a pointer to union.`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-c\"\n      }}>{`//Write a C program to show a pointer to union.\n#include <stdio.h>\nvoid main()\n{\n    union student\n    {\n        char *name;\n    };\n    union student stu,*p;\n    stu.name=\"abcde\";  //assign  the string\n    p=&stu;\n    printf(\" %s \\\\n\",(*p).name);\n}\n`}</code></pre>\n    <h3>{`Output`}</h3>\n    <pre><code parentName=\"pre\" {...{}}>{`abcde\n`}</code></pre>\n    <h2>{`C++ Implementation`}</h2>\n    <h3>{`19. Write a C++ program to show a pointer to union.`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-c\"\n      }}>{`//Write a C++ program to show a pointer to union.\n#include <iostream>\n#include <string.h>\nusing namespace std;\nint main()\n{\n    union student\n    {\n        char *name;\n    };\n    union student stu,*p;\n    stu.name=\"abcde\";  //assign  the string\n    p=&stu;\n    cout<<(*p).name;\n}\n`}</code></pre>\n    <h3>{`Output`}</h3>\n    <pre><code parentName=\"pre\" {...{}}>{`abcde\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}