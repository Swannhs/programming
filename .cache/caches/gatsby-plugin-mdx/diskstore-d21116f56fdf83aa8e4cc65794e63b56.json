{"expireTime":9007200883706346000,"key":"gatsby-plugin-mdx-entire-payload-cc6daef6771600b70c884c406951722c--undefined","val":{"mdast":{"type":"root","children":[{"type":"heading","depth":2,"children":[{"type":"text","value":"C Implementation","position":{"start":{"line":2,"column":4,"offset":5},"end":{"line":2,"column":20,"offset":21},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":2},"end":{"line":2,"column":20,"offset":21},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"19. Write a C program to create a structure of student having fields roll_no, stud_name, mark1, mark2, mark3. Calculate total marks and average marks. Arrange the records in descending order of marks.","position":{"start":{"line":3,"column":5,"offset":27},"end":{"line":3,"column":205,"offset":227},"indent":[]}}],"position":{"start":{"line":3,"column":1,"offset":23},"end":{"line":3,"column":205,"offset":227},"indent":[]}},{"type":"code","lang":"c","meta":null,"value":"//Write a C program to create a structure of student having fields roll_no, stud_name, mark1, mark2, mark3. Calculate total marks and average marks. Arrange the records in descending order of marks.\n#include<stdio.h>\nstruct Student{\n    int roll_no;\n    char name[100];\n    int mark[3];\n    int total;\n    float average;\n};\nint main(){\nstruct Student student[2];\nprintf(\"Enter student info\\n\");\nfor(int i=0;i<2;i++)\n{\n    printf(\"\\nEnter Name : \");\n    fgets(student[i].name,sizeof(student[i].name),stdin);\n    printf(\"Enter Roll : \");\n    scanf(\"%d\",&student[i].roll_no);\n    for(int j=0;j<3;j++)\n    {\n        printf(\"Subject No :%d Mark : \",j+1);\n        scanf(\"%d\",&student[i].mark[j]);\n        student[i].total+=student[i].mark[j];\n        getchar();\n    }\n    student[i].average=(student[i].total/3);\n}\nstruct Student b;\nfor(int i=0;i<2;i++)\n{\n   for(int j=0;j<2;j++)\n   {\n       if(student[i].total<student[j].total){\n        b=student[i];\n        student[i]=student[j];\n        student[j]=b;\n       }\n   }\n}\n    system(\"cls\");\n    printf(\"Total mark in descending order\\n\");\n    for(int i=0;i<2;i++)\n    {\n        printf(\"\\nName : %s\\nRoll : %d Avg : %f Total : %d\\n\",student[i].name,student[i].roll_no,student[i].average,student[i].total);\n    }\n}","position":{"start":{"line":4,"column":1,"offset":229},"end":{"line":51,"column":4,"offset":1541},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Output","position":{"start":{"line":52,"column":5,"offset":1547},"end":{"line":52,"column":11,"offset":1553},"indent":[]}}],"position":{"start":{"line":52,"column":1,"offset":1543},"end":{"line":52,"column":11,"offset":1553},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"Ahosanul Hasan\n16105001","position":{"start":{"line":53,"column":1,"offset":1555},"end":{"line":56,"column":4,"offset":1589},"indent":[1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"C++ Implementation","position":{"start":{"line":58,"column":4,"offset":1596},"end":{"line":58,"column":22,"offset":1614},"indent":[]}}],"position":{"start":{"line":58,"column":1,"offset":1593},"end":{"line":58,"column":22,"offset":1614},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"19. Write a C++ program to create a structure of student having fields roll_no, stud_name, mark1, mark2, mark3. Calculate total marks and average marks. Arrange the records in descending order of marks.","position":{"start":{"line":59,"column":5,"offset":1620},"end":{"line":59,"column":207,"offset":1822},"indent":[]}}],"position":{"start":{"line":59,"column":1,"offset":1616},"end":{"line":59,"column":207,"offset":1822},"indent":[]}},{"type":"code","lang":"c","meta":null,"value":"//Write a C++ program to create a structure of student having fields roll_no, stud_name, mark1, mark2, mark3. Calculate total marks and average marks. Arrange the records in descending order of marks.\n\n#include<iostream>\n#include <string.h>\nusing namespace std;\nstruct Student{\n    int roll_no;\n    char name[100];\n    int mark[3];\n    int total;\n    float average;\n};\nint main(){\n  struct Student student[2];\n  cout << \"Enter student info\\n\";\n  for(int i=0;i<2;i++)\n{\n    cout << \"\\nEnter Name : \";\n    fgets(student[i].name,sizeof(student[i].name),stdin);\n    cout << \"Enter Roll : \";\n    cin >> student[i].roll_no;\n    for(int j=0;j<3;j++)\n    {\n        cout << \"Subject No :\" << j+1 << \" Mark : \";\n        cin >> student[i].mark[j];\n        student[i].total+=student[i].mark[j];\n        getchar();\n    }\n    student[i].average=(student[i].total/3);\n}\nstruct Student b;\nfor(int i=0;i<2;i++)\n{\n   for(int j=0;j<2;j++)\n   {\n       if(student[i].total<student[j].total){\n        b=student[i];\n        student[i]=student[j];\n        student[j]=b;\n       }\n   }\n}\n    system(\"cls\");\n    printf(\"Total mark in descending order\\n\");\n    for(int i=0;i<2;i++)\n    {\n        printf(\"\\nName : %s\\nRoll : %d Avg : %f Total : %d\\n\",student[i].name,student[i].roll_no,student[i].average,student[i].total);\n    }\n}","position":{"start":{"line":60,"column":1,"offset":1824},"end":{"line":110,"column":4,"offset":3185},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Output","position":{"start":{"line":111,"column":5,"offset":3191},"end":{"line":111,"column":11,"offset":3197},"indent":[]}}],"position":{"start":{"line":111,"column":1,"offset":3187},"end":{"line":111,"column":11,"offset":3197},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"Ahosanul Hasan\n16105001","position":{"start":{"line":112,"column":1,"offset":3199},"end":{"line":115,"column":4,"offset":3233},"indent":[1,1,1]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"Write a C/C++/Java program to create a structure of student having fields roll_no, stud_name, mark1, mark2, mark3. Calculate total marks and average marks. Arrange the records in descending order of marks.\",\"category\":\"Structure And Union Index\",\"tags\":[\"#c\",\"#c++\",\"#java\",\"#tutorial\"],\"date\":\"2020-04-16T00:00:00.000Z\",\"thumbnailText\":\"Index\"}","position":{"start":{"line":118,"column":1,"offset":3237},"end":{"line":118,"column":384,"offset":3620},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":118,"column":384,"offset":3620}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Write a C/C++/Java program to create a structure of student having fields roll_no, stud_name, mark1, mark2, mark3. Calculate total marks and average marks. Arrange the records in descending order of marks.\",\n  \"category\": \"Structure And Union Index\",\n  \"tags\": [\"#c\", \"#c++\", \"#java\", \"#tutorial\"],\n  \"date\": \"2020-04-16T00:00:00.000Z\",\n  \"thumbnailText\": \"Index\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"C Implementation\"), mdx(\"h3\", null, \"19. Write a C program to create a structure of student having fields roll_no, stud_name, mark1, mark2, mark3. Calculate total marks and average marks. Arrange the records in descending order of marks.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-c\"\n  }, \"//Write a C program to create a structure of student having fields roll_no, stud_name, mark1, mark2, mark3. Calculate total marks and average marks. Arrange the records in descending order of marks.\\n#include<stdio.h>\\nstruct Student{\\n    int roll_no;\\n    char name[100];\\n    int mark[3];\\n    int total;\\n    float average;\\n};\\nint main(){\\nstruct Student student[2];\\nprintf(\\\"Enter student info\\\\n\\\");\\nfor(int i=0;i<2;i++)\\n{\\n    printf(\\\"\\\\nEnter Name : \\\");\\n    fgets(student[i].name,sizeof(student[i].name),stdin);\\n    printf(\\\"Enter Roll : \\\");\\n    scanf(\\\"%d\\\",&student[i].roll_no);\\n    for(int j=0;j<3;j++)\\n    {\\n        printf(\\\"Subject No :%d Mark : \\\",j+1);\\n        scanf(\\\"%d\\\",&student[i].mark[j]);\\n        student[i].total+=student[i].mark[j];\\n        getchar();\\n    }\\n    student[i].average=(student[i].total/3);\\n}\\nstruct Student b;\\nfor(int i=0;i<2;i++)\\n{\\n   for(int j=0;j<2;j++)\\n   {\\n       if(student[i].total<student[j].total){\\n        b=student[i];\\n        student[i]=student[j];\\n        student[j]=b;\\n       }\\n   }\\n}\\n    system(\\\"cls\\\");\\n    printf(\\\"Total mark in descending order\\\\n\\\");\\n    for(int i=0;i<2;i++)\\n    {\\n        printf(\\\"\\\\nName : %s\\\\nRoll : %d Avg : %f Total : %d\\\\n\\\",student[i].name,student[i].roll_no,student[i].average,student[i].total);\\n    }\\n}\\n\")), mdx(\"h3\", null, \"Output\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"Ahosanul Hasan\\n16105001\\n\")), mdx(\"h2\", null, \"C++ Implementation\"), mdx(\"h3\", null, \"19. Write a C++ program to create a structure of student having fields roll_no, stud_name, mark1, mark2, mark3. Calculate total marks and average marks. Arrange the records in descending order of marks.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-c\"\n  }, \"//Write a C++ program to create a structure of student having fields roll_no, stud_name, mark1, mark2, mark3. Calculate total marks and average marks. Arrange the records in descending order of marks.\\n\\n#include<iostream>\\n#include <string.h>\\nusing namespace std;\\nstruct Student{\\n    int roll_no;\\n    char name[100];\\n    int mark[3];\\n    int total;\\n    float average;\\n};\\nint main(){\\n  struct Student student[2];\\n  cout << \\\"Enter student info\\\\n\\\";\\n  for(int i=0;i<2;i++)\\n{\\n    cout << \\\"\\\\nEnter Name : \\\";\\n    fgets(student[i].name,sizeof(student[i].name),stdin);\\n    cout << \\\"Enter Roll : \\\";\\n    cin >> student[i].roll_no;\\n    for(int j=0;j<3;j++)\\n    {\\n        cout << \\\"Subject No :\\\" << j+1 << \\\" Mark : \\\";\\n        cin >> student[i].mark[j];\\n        student[i].total+=student[i].mark[j];\\n        getchar();\\n    }\\n    student[i].average=(student[i].total/3);\\n}\\nstruct Student b;\\nfor(int i=0;i<2;i++)\\n{\\n   for(int j=0;j<2;j++)\\n   {\\n       if(student[i].total<student[j].total){\\n        b=student[i];\\n        student[i]=student[j];\\n        student[j]=b;\\n       }\\n   }\\n}\\n    system(\\\"cls\\\");\\n    printf(\\\"Total mark in descending order\\\\n\\\");\\n    for(int i=0;i<2;i++)\\n    {\\n        printf(\\\"\\\\nName : %s\\\\nRoll : %d Avg : %f Total : %d\\\\n\\\",student[i].name,student[i].roll_no,student[i].average,student[i].total);\\n    }\\n}\\n\")), mdx(\"h3\", null, \"Output\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"Ahosanul Hasan\\n16105001\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"Write a C/C++/Java program to create a structure of student having fields roll_no, stud_name, mark1, mark2, mark3. Calculate total marks and average marks. Arrange the records in descending order of marks.\",\n  \"category\": \"Structure And Union Index\",\n  \"tags\": [\"#c\", \"#c++\", \"#java\", \"#tutorial\"],\n  \"date\": \"2020-04-16T00:00:00.000Z\",\n  \"thumbnailText\": \"Index\"\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h2>{`C Implementation`}</h2>\n    <h3>{`19. Write a C program to create a structure of student having fields roll_no, stud_name, mark1, mark2, mark3. Calculate total marks and average marks. Arrange the records in descending order of marks.`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-c\"\n      }}>{`//Write a C program to create a structure of student having fields roll_no, stud_name, mark1, mark2, mark3. Calculate total marks and average marks. Arrange the records in descending order of marks.\n#include<stdio.h>\nstruct Student{\n    int roll_no;\n    char name[100];\n    int mark[3];\n    int total;\n    float average;\n};\nint main(){\nstruct Student student[2];\nprintf(\"Enter student info\\\\n\");\nfor(int i=0;i<2;i++)\n{\n    printf(\"\\\\nEnter Name : \");\n    fgets(student[i].name,sizeof(student[i].name),stdin);\n    printf(\"Enter Roll : \");\n    scanf(\"%d\",&student[i].roll_no);\n    for(int j=0;j<3;j++)\n    {\n        printf(\"Subject No :%d Mark : \",j+1);\n        scanf(\"%d\",&student[i].mark[j]);\n        student[i].total+=student[i].mark[j];\n        getchar();\n    }\n    student[i].average=(student[i].total/3);\n}\nstruct Student b;\nfor(int i=0;i<2;i++)\n{\n   for(int j=0;j<2;j++)\n   {\n       if(student[i].total<student[j].total){\n        b=student[i];\n        student[i]=student[j];\n        student[j]=b;\n       }\n   }\n}\n    system(\"cls\");\n    printf(\"Total mark in descending order\\\\n\");\n    for(int i=0;i<2;i++)\n    {\n        printf(\"\\\\nName : %s\\\\nRoll : %d Avg : %f Total : %d\\\\n\",student[i].name,student[i].roll_no,student[i].average,student[i].total);\n    }\n}\n`}</code></pre>\n    <h3>{`Output`}</h3>\n    <pre><code parentName=\"pre\" {...{}}>{`Ahosanul Hasan\n16105001\n`}</code></pre>\n    <h2>{`C++ Implementation`}</h2>\n    <h3>{`19. Write a C++ program to create a structure of student having fields roll_no, stud_name, mark1, mark2, mark3. Calculate total marks and average marks. Arrange the records in descending order of marks.`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-c\"\n      }}>{`//Write a C++ program to create a structure of student having fields roll_no, stud_name, mark1, mark2, mark3. Calculate total marks and average marks. Arrange the records in descending order of marks.\n\n#include<iostream>\n#include <string.h>\nusing namespace std;\nstruct Student{\n    int roll_no;\n    char name[100];\n    int mark[3];\n    int total;\n    float average;\n};\nint main(){\n  struct Student student[2];\n  cout << \"Enter student info\\\\n\";\n  for(int i=0;i<2;i++)\n{\n    cout << \"\\\\nEnter Name : \";\n    fgets(student[i].name,sizeof(student[i].name),stdin);\n    cout << \"Enter Roll : \";\n    cin >> student[i].roll_no;\n    for(int j=0;j<3;j++)\n    {\n        cout << \"Subject No :\" << j+1 << \" Mark : \";\n        cin >> student[i].mark[j];\n        student[i].total+=student[i].mark[j];\n        getchar();\n    }\n    student[i].average=(student[i].total/3);\n}\nstruct Student b;\nfor(int i=0;i<2;i++)\n{\n   for(int j=0;j<2;j++)\n   {\n       if(student[i].total<student[j].total){\n        b=student[i];\n        student[i]=student[j];\n        student[j]=b;\n       }\n   }\n}\n    system(\"cls\");\n    printf(\"Total mark in descending order\\\\n\");\n    for(int i=0;i<2;i++)\n    {\n        printf(\"\\\\nName : %s\\\\nRoll : %d Avg : %f Total : %d\\\\n\",student[i].name,student[i].roll_no,student[i].average,student[i].total);\n    }\n}\n`}</code></pre>\n    <h3>{`Output`}</h3>\n    <pre><code parentName=\"pre\" {...{}}>{`Ahosanul Hasan\n16105001\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}