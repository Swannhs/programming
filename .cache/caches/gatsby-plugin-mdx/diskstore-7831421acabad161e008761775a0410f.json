{"expireTime":9007200883706346000,"key":"gatsby-plugin-mdx-entire-payload-20ffa5a80caf7681f50f04a1c26095d6--undefined","val":{"mdast":{"type":"root","children":[{"type":"heading","depth":2,"children":[{"type":"text","value":"C Implementation","position":{"start":{"line":2,"column":4,"offset":5},"end":{"line":2,"column":20,"offset":21},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":2},"end":{"line":2,"column":20,"offset":21},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"12. Write a C program to read the details of two workers and calculate total payment of workers using structure.","position":{"start":{"line":3,"column":5,"offset":27},"end":{"line":3,"column":117,"offset":139},"indent":[]}}],"position":{"start":{"line":3,"column":1,"offset":23},"end":{"line":3,"column":117,"offset":139},"indent":[]}},{"type":"code","lang":"c","meta":null,"value":"//Write a C++ program to read the details of two workers and calculate total payment of workers using structure.\n#include<stdio.h>\nstruct workers{\n    char name[50];\n    int salaryPerDay;\n    int totalDay;\n};\nint main(){\n    struct workers a;\n    printf(\"Enter first employee details\\n\");\n    printf(\"employee name : \");\n    fgets(a.name,sizeof(a.name),stdin);\n    printf(\"salary per day : \");\n    scanf(\"%d\",&a.salaryPerDay);\n    printf(\"total working days : \");\n    scanf(\"%d\",&a.totalDay);\n    getchar();\n    int total1=(a.salaryPerDay*a.totalDay);\n    struct workers b;\n    printf(\"Enter second employee details\\n\");\n    printf(\"employee name : \");\n    fgets(b.name,sizeof(b.name),stdin);\n    printf(\"salary per day : \");\n    scanf(\"%d\",&b.salaryPerDay);\n    printf(\"total working days : \");\n    scanf(\"%d\",&b.totalDay);\n    int total2=(b.salaryPerDay*b.totalDay);\n    printf(\" first employee details\\n\");\n    printf(\"name: %s\",a.name);\n    printf(\"Total Salary %d \\n\",total1);\n    printf(\" second employee details\\n\");\n    printf(\"name: %s\",b.name);\n    printf(\"Total Salary %d\",total2);\n}","position":{"start":{"line":4,"column":1,"offset":141},"end":{"line":39,"column":4,"offset":1279},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Output","position":{"start":{"line":40,"column":5,"offset":1285},"end":{"line":40,"column":11,"offset":1291},"indent":[]}}],"position":{"start":{"line":40,"column":1,"offset":1281},"end":{"line":40,"column":11,"offset":1291},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"Enter first employee details\n\nemployee name :Ahosanul Hasan\nsalary per day :30\ntotal working days :20\n\nEnter second employee details\n\nemployee name :Hossain\nsalary per day :50\ntotal working days : 25\n\nfirst employee details\nname: Ahosanul Hasan\n\nTotal Salary 600 second employee details\nname: Hossain\nTotal Salary 1250","position":{"start":{"line":41,"column":1,"offset":1293},"end":{"line":60,"column":4,"offset":1638},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"C++ Implementation","position":{"start":{"line":62,"column":4,"offset":1645},"end":{"line":62,"column":22,"offset":1663},"indent":[]}}],"position":{"start":{"line":62,"column":1,"offset":1642},"end":{"line":62,"column":22,"offset":1663},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"12. Write a C++ program to read the details of two workers and calculate total payment of workers using structure.","position":{"start":{"line":63,"column":5,"offset":1669},"end":{"line":63,"column":119,"offset":1783},"indent":[]}}],"position":{"start":{"line":63,"column":1,"offset":1665},"end":{"line":63,"column":119,"offset":1783},"indent":[]}},{"type":"code","lang":"c","meta":null,"value":"//Write a C++ program to read the details of two workers and calculate total payment of workers using structure.\n\n#include<iostream>\n#include <string.h>\nusing namespace std;\nstruct workers{\n    char name[50];\n    int salaryPerDay;\n    int totalDay;\n};\nint main(){\n    struct workers a;\n    cout << \"Enter first employee details\\n\"<< endl;\n    cout << \"employee name : \"<< endl;\n    fgets(a.name,sizeof(a.name),stdin);\n    cout << \"salary per day : \"<< endl;\n    cin >> a.salaryPerDay;\n    cout << \"total working days : \"<< endl;\n    cin >> a.totalDay;\n    getchar();\n    int total1=(a.salaryPerDay*a.totalDay);\n    struct workers b;\n    cout << \"Enter second employee details\\n\"<< endl;\n    cout << \"employee name : \"<< endl;\n    fgets(b.name,sizeof(b.name),stdin);\n    cout << \"salary per day : \"<< endl;\n    cin >> b.salaryPerDay;\n    cout << \"total working days : \"<< endl;\n    cin >> b.totalDay;\n    int total2=(b.salaryPerDay*b.totalDay);\n    cout << \" first employee details\\n\"<< endl;\n    cout << \"name: \"<<a.name<< endl;\n    cout << \"Total Salary \" << total1);\n    cout << \" second employee details\\n\"<< endl;\n    cout << \"name: \" << b.name<< endl;\n    cout << \"Total Salary << total2;\n}","position":{"start":{"line":64,"column":1,"offset":1785},"end":{"line":102,"column":4,"offset":3027},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Output","position":{"start":{"line":103,"column":5,"offset":3033},"end":{"line":103,"column":11,"offset":3039},"indent":[]}}],"position":{"start":{"line":103,"column":1,"offset":3029},"end":{"line":103,"column":11,"offset":3039},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"Enter first employee details\n\nemployee name :Ahosanul Hasan\nsalary per day :30\ntotal working days :20\n\nEnter second employee details\n\nemployee name :Hossain\nsalary per day :50\ntotal working days : 25\n\nfirst employee details\nname: Ahosanul Hasan\n\nTotal Salary 600 second employee details\nname: Hossain\nTotal Salary 1250","position":{"start":{"line":104,"column":1,"offset":3041},"end":{"line":123,"column":4,"offset":3386},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"Write a C/C++/Java program to read the details of two workers and calculate total payment of workers using structure.\",\"category\":\"Structure And Union Index\",\"tags\":[\"#c\",\"#c++\",\"#java\",\"#tutorial\"],\"date\":\"2020-04-16T00:00:00.000Z\",\"thumbnailText\":\"Index\"}","position":{"start":{"line":126,"column":1,"offset":3390},"end":{"line":126,"column":296,"offset":3685},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":126,"column":296,"offset":3685}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Write a C/C++/Java program to read the details of two workers and calculate total payment of workers using structure.\",\n  \"category\": \"Structure And Union Index\",\n  \"tags\": [\"#c\", \"#c++\", \"#java\", \"#tutorial\"],\n  \"date\": \"2020-04-16T00:00:00.000Z\",\n  \"thumbnailText\": \"Index\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"C Implementation\"), mdx(\"h3\", null, \"12. Write a C program to read the details of two workers and calculate total payment of workers using structure.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-c\"\n  }, \"//Write a C++ program to read the details of two workers and calculate total payment of workers using structure.\\n#include<stdio.h>\\nstruct workers{\\n    char name[50];\\n    int salaryPerDay;\\n    int totalDay;\\n};\\nint main(){\\n    struct workers a;\\n    printf(\\\"Enter first employee details\\\\n\\\");\\n    printf(\\\"employee name : \\\");\\n    fgets(a.name,sizeof(a.name),stdin);\\n    printf(\\\"salary per day : \\\");\\n    scanf(\\\"%d\\\",&a.salaryPerDay);\\n    printf(\\\"total working days : \\\");\\n    scanf(\\\"%d\\\",&a.totalDay);\\n    getchar();\\n    int total1=(a.salaryPerDay*a.totalDay);\\n    struct workers b;\\n    printf(\\\"Enter second employee details\\\\n\\\");\\n    printf(\\\"employee name : \\\");\\n    fgets(b.name,sizeof(b.name),stdin);\\n    printf(\\\"salary per day : \\\");\\n    scanf(\\\"%d\\\",&b.salaryPerDay);\\n    printf(\\\"total working days : \\\");\\n    scanf(\\\"%d\\\",&b.totalDay);\\n    int total2=(b.salaryPerDay*b.totalDay);\\n    printf(\\\" first employee details\\\\n\\\");\\n    printf(\\\"name: %s\\\",a.name);\\n    printf(\\\"Total Salary %d \\\\n\\\",total1);\\n    printf(\\\" second employee details\\\\n\\\");\\n    printf(\\\"name: %s\\\",b.name);\\n    printf(\\\"Total Salary %d\\\",total2);\\n}\\n\")), mdx(\"h3\", null, \"Output\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"Enter first employee details\\n\\nemployee name :Ahosanul Hasan\\nsalary per day :30\\ntotal working days :20\\n\\nEnter second employee details\\n\\nemployee name :Hossain\\nsalary per day :50\\ntotal working days : 25\\n\\nfirst employee details\\nname: Ahosanul Hasan\\n\\nTotal Salary 600 second employee details\\nname: Hossain\\nTotal Salary 1250\\n\")), mdx(\"h2\", null, \"C++ Implementation\"), mdx(\"h3\", null, \"12. Write a C++ program to read the details of two workers and calculate total payment of workers using structure.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-c\"\n  }, \"//Write a C++ program to read the details of two workers and calculate total payment of workers using structure.\\n\\n#include<iostream>\\n#include <string.h>\\nusing namespace std;\\nstruct workers{\\n    char name[50];\\n    int salaryPerDay;\\n    int totalDay;\\n};\\nint main(){\\n    struct workers a;\\n    cout << \\\"Enter first employee details\\\\n\\\"<< endl;\\n    cout << \\\"employee name : \\\"<< endl;\\n    fgets(a.name,sizeof(a.name),stdin);\\n    cout << \\\"salary per day : \\\"<< endl;\\n    cin >> a.salaryPerDay;\\n    cout << \\\"total working days : \\\"<< endl;\\n    cin >> a.totalDay;\\n    getchar();\\n    int total1=(a.salaryPerDay*a.totalDay);\\n    struct workers b;\\n    cout << \\\"Enter second employee details\\\\n\\\"<< endl;\\n    cout << \\\"employee name : \\\"<< endl;\\n    fgets(b.name,sizeof(b.name),stdin);\\n    cout << \\\"salary per day : \\\"<< endl;\\n    cin >> b.salaryPerDay;\\n    cout << \\\"total working days : \\\"<< endl;\\n    cin >> b.totalDay;\\n    int total2=(b.salaryPerDay*b.totalDay);\\n    cout << \\\" first employee details\\\\n\\\"<< endl;\\n    cout << \\\"name: \\\"<<a.name<< endl;\\n    cout << \\\"Total Salary \\\" << total1);\\n    cout << \\\" second employee details\\\\n\\\"<< endl;\\n    cout << \\\"name: \\\" << b.name<< endl;\\n    cout << \\\"Total Salary << total2;\\n}\\n\")), mdx(\"h3\", null, \"Output\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"Enter first employee details\\n\\nemployee name :Ahosanul Hasan\\nsalary per day :30\\ntotal working days :20\\n\\nEnter second employee details\\n\\nemployee name :Hossain\\nsalary per day :50\\ntotal working days : 25\\n\\nfirst employee details\\nname: Ahosanul Hasan\\n\\nTotal Salary 600 second employee details\\nname: Hossain\\nTotal Salary 1250\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"Write a C/C++/Java program to read the details of two workers and calculate total payment of workers using structure.\",\n  \"category\": \"Structure And Union Index\",\n  \"tags\": [\"#c\", \"#c++\", \"#java\", \"#tutorial\"],\n  \"date\": \"2020-04-16T00:00:00.000Z\",\n  \"thumbnailText\": \"Index\"\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h2>{`C Implementation`}</h2>\n    <h3>{`12. Write a C program to read the details of two workers and calculate total payment of workers using structure.`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-c\"\n      }}>{`//Write a C++ program to read the details of two workers and calculate total payment of workers using structure.\n#include<stdio.h>\nstruct workers{\n    char name[50];\n    int salaryPerDay;\n    int totalDay;\n};\nint main(){\n    struct workers a;\n    printf(\"Enter first employee details\\\\n\");\n    printf(\"employee name : \");\n    fgets(a.name,sizeof(a.name),stdin);\n    printf(\"salary per day : \");\n    scanf(\"%d\",&a.salaryPerDay);\n    printf(\"total working days : \");\n    scanf(\"%d\",&a.totalDay);\n    getchar();\n    int total1=(a.salaryPerDay*a.totalDay);\n    struct workers b;\n    printf(\"Enter second employee details\\\\n\");\n    printf(\"employee name : \");\n    fgets(b.name,sizeof(b.name),stdin);\n    printf(\"salary per day : \");\n    scanf(\"%d\",&b.salaryPerDay);\n    printf(\"total working days : \");\n    scanf(\"%d\",&b.totalDay);\n    int total2=(b.salaryPerDay*b.totalDay);\n    printf(\" first employee details\\\\n\");\n    printf(\"name: %s\",a.name);\n    printf(\"Total Salary %d \\\\n\",total1);\n    printf(\" second employee details\\\\n\");\n    printf(\"name: %s\",b.name);\n    printf(\"Total Salary %d\",total2);\n}\n`}</code></pre>\n    <h3>{`Output`}</h3>\n    <pre><code parentName=\"pre\" {...{}}>{`Enter first employee details\n\nemployee name :Ahosanul Hasan\nsalary per day :30\ntotal working days :20\n\nEnter second employee details\n\nemployee name :Hossain\nsalary per day :50\ntotal working days : 25\n\nfirst employee details\nname: Ahosanul Hasan\n\nTotal Salary 600 second employee details\nname: Hossain\nTotal Salary 1250\n`}</code></pre>\n    <h2>{`C++ Implementation`}</h2>\n    <h3>{`12. Write a C++ program to read the details of two workers and calculate total payment of workers using structure.`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-c\"\n      }}>{`//Write a C++ program to read the details of two workers and calculate total payment of workers using structure.\n\n#include<iostream>\n#include <string.h>\nusing namespace std;\nstruct workers{\n    char name[50];\n    int salaryPerDay;\n    int totalDay;\n};\nint main(){\n    struct workers a;\n    cout << \"Enter first employee details\\\\n\"<< endl;\n    cout << \"employee name : \"<< endl;\n    fgets(a.name,sizeof(a.name),stdin);\n    cout << \"salary per day : \"<< endl;\n    cin >> a.salaryPerDay;\n    cout << \"total working days : \"<< endl;\n    cin >> a.totalDay;\n    getchar();\n    int total1=(a.salaryPerDay*a.totalDay);\n    struct workers b;\n    cout << \"Enter second employee details\\\\n\"<< endl;\n    cout << \"employee name : \"<< endl;\n    fgets(b.name,sizeof(b.name),stdin);\n    cout << \"salary per day : \"<< endl;\n    cin >> b.salaryPerDay;\n    cout << \"total working days : \"<< endl;\n    cin >> b.totalDay;\n    int total2=(b.salaryPerDay*b.totalDay);\n    cout << \" first employee details\\\\n\"<< endl;\n    cout << \"name: \"<<a.name<< endl;\n    cout << \"Total Salary \" << total1);\n    cout << \" second employee details\\\\n\"<< endl;\n    cout << \"name: \" << b.name<< endl;\n    cout << \"Total Salary << total2;\n}\n`}</code></pre>\n    <h3>{`Output`}</h3>\n    <pre><code parentName=\"pre\" {...{}}>{`Enter first employee details\n\nemployee name :Ahosanul Hasan\nsalary per day :30\ntotal working days :20\n\nEnter second employee details\n\nemployee name :Hossain\nsalary per day :50\ntotal working days : 25\n\nfirst employee details\nname: Ahosanul Hasan\n\nTotal Salary 600 second employee details\nname: Hossain\nTotal Salary 1250\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}