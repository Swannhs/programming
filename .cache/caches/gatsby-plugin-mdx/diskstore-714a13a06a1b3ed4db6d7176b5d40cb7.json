{"expireTime":9007200883706346000,"key":"gatsby-plugin-mdx-entire-payload-584f28bc48d166d9d9df38e1fbce84ca--undefined","val":{"mdast":{"type":"root","children":[{"type":"heading","depth":2,"children":[{"type":"text","value":"C Implementation","position":{"start":{"line":2,"column":4,"offset":5},"end":{"line":2,"column":20,"offset":21},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":2},"end":{"line":2,"column":20,"offset":21},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"18. Write a C program to accept book details for ‘n’ books as book_title, author, publisher and cost. Assign the accession number to each book in increasing order. Display these details as, -Books of a specific author -Books by a specific Publisher -All Books costing Rs. 500 and above. -All Books.","position":{"start":{"line":3,"column":5,"offset":27},"end":{"line":3,"column":303,"offset":325},"indent":[]}}],"position":{"start":{"line":3,"column":1,"offset":23},"end":{"line":3,"column":303,"offset":325},"indent":[]}},{"type":"code","lang":"c","meta":null,"value":"//Write a C program to accept book details for ‘n’ books as book_title, author, publisher and cost. Assign the accession number to each book in increasing order. Display these details as, -Books of a specific author -Books by a specific Publisher -All Books costing Rs. 500 and above. -All Books.\n#include<stdio.h>\nstruct Book{\n    char book_title[100];\n    char author[100];\n    char publisher[50];\n    double cost;\n    int accessionNumber;\n};\nint count=0;\nstruct Book book[1000];\nvoid input(struct Book *book,int i){\n    getchar();\n    printf(\"Book Details \\n\");\n    printf(\"Book Name : \");\n    fgets(book->book_title,sizeof(book->book_title),stdin);\n    printf(\"author Name : \");\n    fgets(book->author,sizeof(book->author),stdin);\n    printf(\"publisher Name : \");\n    fgets(book->publisher,sizeof(book->publisher),stdin);\n    book->accessionNumber=i;\n    printf(\"Cost of book : \");\n    scanf(\"%lf\",&book->cost);\n}\nvoid details(struct Book *book){\n    printf(\"\\nBook Details \\n\\n\");\n    printf(\"Book Name      : %s\",book->book_title);\n    printf(\"author Name    : %s\",book->author);\n    printf(\"publisher Name : %s\",book->publisher);\n    printf(\"Price of Book  : %lf\",book->cost);\n}\nint main(){\n        if(count==0)\n        {\n        printf(\"How many book's do you want to store\\n\");\n        scanf(\"%d\",&count);\n        for(int i=0;i<count;i++)\n        {\n            input(&book[i],i);\n        }\n        }\n        printf(\"\\n\\n\\nselect from menu: \\n\");\n        printf(\"1) Books of a specific author.\\n2) Books by a specific Publisher.\\n3) All Books costing Rs. 500 and above.\\n4) All Books\\n\");\n        int k=0;\n        scanf(\"%d\",&k);\n        system(\"cls\");\n        switch(k){\n            case 1:{\n                int t=0;\n                printf(\"\\nEnter author name: \");\n                char temp[100];\n                getchar();\n                fgets(temp,sizeof(temp),stdin);\n                for(int i=0;i<count;i++)\n                {\n                     if(strcmp(book[i].author,temp)==0)\n                     {\n                         details(&book[i]);\n                         t++;\n                     }\n                }\n                t==0? printf(\"\\n NO data found !!\") : printf(\"\");\n                main();\n            }\n            case 2:{\n                int t=0;\n                printf(\"\\nEnter Publisher name: \");\n                char temp[100];\n                getchar();\n                fgets(temp,sizeof(temp),stdin);\n                for(int i=0;i<count;i++)\n                {\n                     if(strcmp(book[i].publisher,temp)==0)\n                     {\n                         details(&book[i]);\n                         t++;\n                     }\n                }\n                t==0? printf(\"\\n NO data found !!\") : printf(\"\");\n                main();\n            }\n            case 3:{\n                for(int i=0;i<count;i++)\n                {\n                    if(book[i].cost>500){\n                        details(&book[i]) ;\n                    }\n                }\n                main();\n            }\n            case 4:{\n              for(int i=0;i<count;i++)\n                {\n                        details(&book[i]) ;\n                }\n                main();\n             main();\n            }\n            default: {main();}\n        }\n}","position":{"start":{"line":4,"column":1,"offset":327},"end":{"line":106,"column":4,"offset":3727},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Output","position":{"start":{"line":107,"column":5,"offset":3733},"end":{"line":107,"column":11,"offset":3739},"indent":[]}}],"position":{"start":{"line":107,"column":1,"offset":3729},"end":{"line":107,"column":11,"offset":3739},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"How many book's do you want to store\n1\nBook Details\nBook Name : Spring Boot in Action\nauthor Name : Craig Walls\npublisher Name : Amazon\nCost of book : 100\n\n\n\nselect from menu:\n1) Books of a specific author.\n2) Books by a specific Publisher.\n3) All Books costing Rs. 500 and above.\n4) All Books\n4\nsh: 1: cls: not found\n\nBook Details\n\nBook Name      : Spring Boot in Action\nauthor Name    : Craig Walls\npublisher Name : Amazon\nPrice of Book  : 100\n\n\nselect from menu:\n1) Books of a specific author.\n2) Books by a specific Publisher.\n3) All Books costing Rs. 500 and above.\n4) All Books","position":{"start":{"line":108,"column":1,"offset":3741},"end":{"line":140,"column":4,"offset":4364},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"C++ Implementation","position":{"start":{"line":142,"column":4,"offset":4371},"end":{"line":142,"column":22,"offset":4389},"indent":[]}}],"position":{"start":{"line":142,"column":1,"offset":4368},"end":{"line":142,"column":22,"offset":4389},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"18. Write a C++ program to accept book details for ‘n’ books as book_title, author, publisher and cost. Assign the accession number to each book in increasing order. Display these details as, -Books of a specific author -Books by a specific Publisher -All Books costing Rs. 500 and above. -All Books.","position":{"start":{"line":143,"column":5,"offset":4395},"end":{"line":143,"column":305,"offset":4695},"indent":[]}}],"position":{"start":{"line":143,"column":1,"offset":4391},"end":{"line":143,"column":305,"offset":4695},"indent":[]}},{"type":"code","lang":"c","meta":null,"value":"//Write a C++ program to accept book details for ‘n’ books as book_title, author, publisher and cost. Assign the accession number to each book in increasing order. Display these details as, -Books of a specific author -Books by a specific Publisher -All Books costing Rs. 500 and above. -All Books.\n\n#include<iostream>\n#include <string.h>\nusing namespace std;\nstruct Book{\n    char book_title[100];\n    char author[100];\n    char publisher[50];\n    double cost;\n    int accessionNumber;\n};\nint count=0;\nstruct Book book[1000];\nvoid input(struct Book *book,int i){\n    getchar();\n    cout << \"Book Details \\n\";\n    cout << \"Book Name : \";\n    fgets(book->book_title,sizeof(book->book_title),stdin);\n    cout << \"author Name : \";\n    fgets(book->author,sizeof(book->author),stdin);\n    cout << \"publisher Name : \";\n    fgets(book->publisher,sizeof(book->publisher),stdin);\n    book->accessionNumber=i;\n    cout << \"Cost of book : \";\n    cin >> book->cost;\n}\nvoid details(struct Book *book){\n    cout << \"\\nBook Details \\n\\n\";\n    cout << \"Book Name      : \" << book->book_title;\n    cout << \"author Name    : \" << book->author;\n    cout << \"publisher Name : \" << book->publisher;\n    cout << \"Price of Book  : \" << book->cost;\n}\nint main(){\n     if(count==0)\n     {\n        cout << \"How many book's do you want to store\\n\";\n        cin >> count;\n        for(int i=0;i<count;i++)\n        {\n            input(&book[i],i);\n        }\n        }\n        cout << \"\\n\\n\\nselect from menu: \\n\";\n        cout << \"1) Books of a specific author.\\n2) Books by a specific Publisher.\\n3) All Books costing Rs. 500 and above.\\n4) All Books\\n\";\n        int k=0;\n        cin >> k;\n        system(\"cls\");\n        switch(k){\n            case 1:{\n                int t=0;\n                cout << \"\\nEnter author name: \";\n                char temp[100];\n                getchar();\n                fgets(temp,sizeof(temp),stdin);\n                for(int i=0;i<count;i++)\n                {\n                     if(strcmp(book[i].author,temp)==0)\n                     {\n                         details(&book[i]);\n                         t++;\n                     }\n                }\n                t==0? cout << \"\\n NO data found !!\" : cout << \"\";\n                main();\n            }\n            case 2:{\n                int t=0;\n                cout << \"\\nEnter Publisher name: \";\n                char temp[100];\n                getchar();\n                fgets(temp,sizeof(temp),stdin);\n                for(int i=0;i<count;i++)\n                {\n                     if(strcmp(book[i].publisher,temp)==0)\n                     {\n                         details(&book[i]);\n                         t++;\n                     }\n                }\n                t==0? cout << \"\\n NO data found !!\" : cout << \"\";\n                main();\n            }\n            case 3:{\n                for(int i=0;i<count;i++)\n                {\n                    if(book[i].cost>500){\n                        details(&book[i]) ;\n                    }\n                }\n                main();\n            }\n            case 4:{\n              for(int i=0;i<count;i++)\n                {\n                        details(&book[i]) ;\n                }\n                main();\n             main();\n            }\n            default: {main();}\n     }\n}","position":{"start":{"line":144,"column":1,"offset":4697},"end":{"line":249,"column":4,"offset":8120},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Output","position":{"start":{"line":250,"column":5,"offset":8126},"end":{"line":250,"column":11,"offset":8132},"indent":[]}}],"position":{"start":{"line":250,"column":1,"offset":8122},"end":{"line":250,"column":11,"offset":8132},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"How many book's do you want to store\n1\nBook Details\nBook Name : Spring Boot in Action\nauthor Name : Craig Walls\npublisher Name : Amazon\nCost of book : 100\n\n\n\nselect from menu:\n1) Books of a specific author.\n2) Books by a specific Publisher.\n3) All Books costing Rs. 500 and above.\n4) All Books\n4\nsh: 1: cls: not found\n\nBook Details\n\nBook Name      : Spring Boot in Action\nauthor Name    : Craig Walls\npublisher Name : Amazon\nPrice of Book  : 100\n\n\nselect from menu:\n1) Books of a specific author.\n2) Books by a specific Publisher.\n3) All Books costing Rs. 500 and above.\n4) All Books","position":{"start":{"line":251,"column":1,"offset":8134},"end":{"line":283,"column":4,"offset":8757},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"Write a C/C++/Java program to accept book details for ‘n’ books as book_title, author, publisher and cost. Assign the accession number to each book in increasing order. Display these details as, -Books of a specific author -Books by a specific Publisher -All Books costing Rs. 500 and above. -All Books.\",\"category\":\"Structure And Union Index\",\"tags\":[\"#c\",\"#c++\",\"#java\",\"#tutorial\"],\"date\":\"2020-04-16T00:00:00.000Z\",\"thumbnailText\":\"Index\"}","position":{"start":{"line":286,"column":1,"offset":8761},"end":{"line":286,"column":482,"offset":9242},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":286,"column":482,"offset":9242}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Write a C/C++/Java program to accept book details for ‘n’ books as book_title, author, publisher and cost. Assign the accession number to each book in increasing order. Display these details as, -Books of a specific author -Books by a specific Publisher -All Books costing Rs. 500 and above. -All Books.\",\n  \"category\": \"Structure And Union Index\",\n  \"tags\": [\"#c\", \"#c++\", \"#java\", \"#tutorial\"],\n  \"date\": \"2020-04-16T00:00:00.000Z\",\n  \"thumbnailText\": \"Index\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"C Implementation\"), mdx(\"h3\", null, \"18. Write a C program to accept book details for \\u2018n\\u2019 books as book_title, author, publisher and cost. Assign the accession number to each book in increasing order. Display these details as, -Books of a specific author -Books by a specific Publisher -All Books costing Rs. 500 and above. -All Books.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-c\"\n  }, \"//Write a C program to accept book details for \\u2018n\\u2019 books as book_title, author, publisher and cost. Assign the accession number to each book in increasing order. Display these details as, -Books of a specific author -Books by a specific Publisher -All Books costing Rs. 500 and above. -All Books.\\n#include<stdio.h>\\nstruct Book{\\n    char book_title[100];\\n    char author[100];\\n    char publisher[50];\\n    double cost;\\n    int accessionNumber;\\n};\\nint count=0;\\nstruct Book book[1000];\\nvoid input(struct Book *book,int i){\\n    getchar();\\n    printf(\\\"Book Details \\\\n\\\");\\n    printf(\\\"Book Name : \\\");\\n    fgets(book->book_title,sizeof(book->book_title),stdin);\\n    printf(\\\"author Name : \\\");\\n    fgets(book->author,sizeof(book->author),stdin);\\n    printf(\\\"publisher Name : \\\");\\n    fgets(book->publisher,sizeof(book->publisher),stdin);\\n    book->accessionNumber=i;\\n    printf(\\\"Cost of book : \\\");\\n    scanf(\\\"%lf\\\",&book->cost);\\n}\\nvoid details(struct Book *book){\\n    printf(\\\"\\\\nBook Details \\\\n\\\\n\\\");\\n    printf(\\\"Book Name      : %s\\\",book->book_title);\\n    printf(\\\"author Name    : %s\\\",book->author);\\n    printf(\\\"publisher Name : %s\\\",book->publisher);\\n    printf(\\\"Price of Book  : %lf\\\",book->cost);\\n}\\nint main(){\\n        if(count==0)\\n        {\\n        printf(\\\"How many book's do you want to store\\\\n\\\");\\n        scanf(\\\"%d\\\",&count);\\n        for(int i=0;i<count;i++)\\n        {\\n            input(&book[i],i);\\n        }\\n        }\\n        printf(\\\"\\\\n\\\\n\\\\nselect from menu: \\\\n\\\");\\n        printf(\\\"1) Books of a specific author.\\\\n2) Books by a specific Publisher.\\\\n3) All Books costing Rs. 500 and above.\\\\n4) All Books\\\\n\\\");\\n        int k=0;\\n        scanf(\\\"%d\\\",&k);\\n        system(\\\"cls\\\");\\n        switch(k){\\n            case 1:{\\n                int t=0;\\n                printf(\\\"\\\\nEnter author name: \\\");\\n                char temp[100];\\n                getchar();\\n                fgets(temp,sizeof(temp),stdin);\\n                for(int i=0;i<count;i++)\\n                {\\n                     if(strcmp(book[i].author,temp)==0)\\n                     {\\n                         details(&book[i]);\\n                         t++;\\n                     }\\n                }\\n                t==0? printf(\\\"\\\\n NO data found !!\\\") : printf(\\\"\\\");\\n                main();\\n            }\\n            case 2:{\\n                int t=0;\\n                printf(\\\"\\\\nEnter Publisher name: \\\");\\n                char temp[100];\\n                getchar();\\n                fgets(temp,sizeof(temp),stdin);\\n                for(int i=0;i<count;i++)\\n                {\\n                     if(strcmp(book[i].publisher,temp)==0)\\n                     {\\n                         details(&book[i]);\\n                         t++;\\n                     }\\n                }\\n                t==0? printf(\\\"\\\\n NO data found !!\\\") : printf(\\\"\\\");\\n                main();\\n            }\\n            case 3:{\\n                for(int i=0;i<count;i++)\\n                {\\n                    if(book[i].cost>500){\\n                        details(&book[i]) ;\\n                    }\\n                }\\n                main();\\n            }\\n            case 4:{\\n              for(int i=0;i<count;i++)\\n                {\\n                        details(&book[i]) ;\\n                }\\n                main();\\n             main();\\n            }\\n            default: {main();}\\n        }\\n}\\n\")), mdx(\"h3\", null, \"Output\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"How many book's do you want to store\\n1\\nBook Details\\nBook Name : Spring Boot in Action\\nauthor Name : Craig Walls\\npublisher Name : Amazon\\nCost of book : 100\\n\\n\\n\\nselect from menu:\\n1) Books of a specific author.\\n2) Books by a specific Publisher.\\n3) All Books costing Rs. 500 and above.\\n4) All Books\\n4\\nsh: 1: cls: not found\\n\\nBook Details\\n\\nBook Name      : Spring Boot in Action\\nauthor Name    : Craig Walls\\npublisher Name : Amazon\\nPrice of Book  : 100\\n\\n\\nselect from menu:\\n1) Books of a specific author.\\n2) Books by a specific Publisher.\\n3) All Books costing Rs. 500 and above.\\n4) All Books\\n\")), mdx(\"h2\", null, \"C++ Implementation\"), mdx(\"h3\", null, \"18. Write a C++ program to accept book details for \\u2018n\\u2019 books as book_title, author, publisher and cost. Assign the accession number to each book in increasing order. Display these details as, -Books of a specific author -Books by a specific Publisher -All Books costing Rs. 500 and above. -All Books.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-c\"\n  }, \"//Write a C++ program to accept book details for \\u2018n\\u2019 books as book_title, author, publisher and cost. Assign the accession number to each book in increasing order. Display these details as, -Books of a specific author -Books by a specific Publisher -All Books costing Rs. 500 and above. -All Books.\\n\\n#include<iostream>\\n#include <string.h>\\nusing namespace std;\\nstruct Book{\\n    char book_title[100];\\n    char author[100];\\n    char publisher[50];\\n    double cost;\\n    int accessionNumber;\\n};\\nint count=0;\\nstruct Book book[1000];\\nvoid input(struct Book *book,int i){\\n    getchar();\\n    cout << \\\"Book Details \\\\n\\\";\\n    cout << \\\"Book Name : \\\";\\n    fgets(book->book_title,sizeof(book->book_title),stdin);\\n    cout << \\\"author Name : \\\";\\n    fgets(book->author,sizeof(book->author),stdin);\\n    cout << \\\"publisher Name : \\\";\\n    fgets(book->publisher,sizeof(book->publisher),stdin);\\n    book->accessionNumber=i;\\n    cout << \\\"Cost of book : \\\";\\n    cin >> book->cost;\\n}\\nvoid details(struct Book *book){\\n    cout << \\\"\\\\nBook Details \\\\n\\\\n\\\";\\n    cout << \\\"Book Name      : \\\" << book->book_title;\\n    cout << \\\"author Name    : \\\" << book->author;\\n    cout << \\\"publisher Name : \\\" << book->publisher;\\n    cout << \\\"Price of Book  : \\\" << book->cost;\\n}\\nint main(){\\n     if(count==0)\\n     {\\n        cout << \\\"How many book's do you want to store\\\\n\\\";\\n        cin >> count;\\n        for(int i=0;i<count;i++)\\n        {\\n            input(&book[i],i);\\n        }\\n        }\\n        cout << \\\"\\\\n\\\\n\\\\nselect from menu: \\\\n\\\";\\n        cout << \\\"1) Books of a specific author.\\\\n2) Books by a specific Publisher.\\\\n3) All Books costing Rs. 500 and above.\\\\n4) All Books\\\\n\\\";\\n        int k=0;\\n        cin >> k;\\n        system(\\\"cls\\\");\\n        switch(k){\\n            case 1:{\\n                int t=0;\\n                cout << \\\"\\\\nEnter author name: \\\";\\n                char temp[100];\\n                getchar();\\n                fgets(temp,sizeof(temp),stdin);\\n                for(int i=0;i<count;i++)\\n                {\\n                     if(strcmp(book[i].author,temp)==0)\\n                     {\\n                         details(&book[i]);\\n                         t++;\\n                     }\\n                }\\n                t==0? cout << \\\"\\\\n NO data found !!\\\" : cout << \\\"\\\";\\n                main();\\n            }\\n            case 2:{\\n                int t=0;\\n                cout << \\\"\\\\nEnter Publisher name: \\\";\\n                char temp[100];\\n                getchar();\\n                fgets(temp,sizeof(temp),stdin);\\n                for(int i=0;i<count;i++)\\n                {\\n                     if(strcmp(book[i].publisher,temp)==0)\\n                     {\\n                         details(&book[i]);\\n                         t++;\\n                     }\\n                }\\n                t==0? cout << \\\"\\\\n NO data found !!\\\" : cout << \\\"\\\";\\n                main();\\n            }\\n            case 3:{\\n                for(int i=0;i<count;i++)\\n                {\\n                    if(book[i].cost>500){\\n                        details(&book[i]) ;\\n                    }\\n                }\\n                main();\\n            }\\n            case 4:{\\n              for(int i=0;i<count;i++)\\n                {\\n                        details(&book[i]) ;\\n                }\\n                main();\\n             main();\\n            }\\n            default: {main();}\\n     }\\n}\\n\")), mdx(\"h3\", null, \"Output\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"How many book's do you want to store\\n1\\nBook Details\\nBook Name : Spring Boot in Action\\nauthor Name : Craig Walls\\npublisher Name : Amazon\\nCost of book : 100\\n\\n\\n\\nselect from menu:\\n1) Books of a specific author.\\n2) Books by a specific Publisher.\\n3) All Books costing Rs. 500 and above.\\n4) All Books\\n4\\nsh: 1: cls: not found\\n\\nBook Details\\n\\nBook Name      : Spring Boot in Action\\nauthor Name    : Craig Walls\\npublisher Name : Amazon\\nPrice of Book  : 100\\n\\n\\nselect from menu:\\n1) Books of a specific author.\\n2) Books by a specific Publisher.\\n3) All Books costing Rs. 500 and above.\\n4) All Books\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"Write a C/C++/Java program to accept book details for ‘n’ books as book_title, author, publisher and cost. Assign the accession number to each book in increasing order. Display these details as, -Books of a specific author -Books by a specific Publisher -All Books costing Rs. 500 and above. -All Books.\",\n  \"category\": \"Structure And Union Index\",\n  \"tags\": [\"#c\", \"#c++\", \"#java\", \"#tutorial\"],\n  \"date\": \"2020-04-16T00:00:00.000Z\",\n  \"thumbnailText\": \"Index\"\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h2>{`C Implementation`}</h2>\n    <h3>{`18. Write a C program to accept book details for ‘n’ books as book_title, author, publisher and cost. Assign the accession number to each book in increasing order. Display these details as, -Books of a specific author -Books by a specific Publisher -All Books costing Rs. 500 and above. -All Books.`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-c\"\n      }}>{`//Write a C program to accept book details for ‘n’ books as book_title, author, publisher and cost. Assign the accession number to each book in increasing order. Display these details as, -Books of a specific author -Books by a specific Publisher -All Books costing Rs. 500 and above. -All Books.\n#include<stdio.h>\nstruct Book{\n    char book_title[100];\n    char author[100];\n    char publisher[50];\n    double cost;\n    int accessionNumber;\n};\nint count=0;\nstruct Book book[1000];\nvoid input(struct Book *book,int i){\n    getchar();\n    printf(\"Book Details \\\\n\");\n    printf(\"Book Name : \");\n    fgets(book->book_title,sizeof(book->book_title),stdin);\n    printf(\"author Name : \");\n    fgets(book->author,sizeof(book->author),stdin);\n    printf(\"publisher Name : \");\n    fgets(book->publisher,sizeof(book->publisher),stdin);\n    book->accessionNumber=i;\n    printf(\"Cost of book : \");\n    scanf(\"%lf\",&book->cost);\n}\nvoid details(struct Book *book){\n    printf(\"\\\\nBook Details \\\\n\\\\n\");\n    printf(\"Book Name      : %s\",book->book_title);\n    printf(\"author Name    : %s\",book->author);\n    printf(\"publisher Name : %s\",book->publisher);\n    printf(\"Price of Book  : %lf\",book->cost);\n}\nint main(){\n        if(count==0)\n        {\n        printf(\"How many book's do you want to store\\\\n\");\n        scanf(\"%d\",&count);\n        for(int i=0;i<count;i++)\n        {\n            input(&book[i],i);\n        }\n        }\n        printf(\"\\\\n\\\\n\\\\nselect from menu: \\\\n\");\n        printf(\"1) Books of a specific author.\\\\n2) Books by a specific Publisher.\\\\n3) All Books costing Rs. 500 and above.\\\\n4) All Books\\\\n\");\n        int k=0;\n        scanf(\"%d\",&k);\n        system(\"cls\");\n        switch(k){\n            case 1:{\n                int t=0;\n                printf(\"\\\\nEnter author name: \");\n                char temp[100];\n                getchar();\n                fgets(temp,sizeof(temp),stdin);\n                for(int i=0;i<count;i++)\n                {\n                     if(strcmp(book[i].author,temp)==0)\n                     {\n                         details(&book[i]);\n                         t++;\n                     }\n                }\n                t==0? printf(\"\\\\n NO data found !!\") : printf(\"\");\n                main();\n            }\n            case 2:{\n                int t=0;\n                printf(\"\\\\nEnter Publisher name: \");\n                char temp[100];\n                getchar();\n                fgets(temp,sizeof(temp),stdin);\n                for(int i=0;i<count;i++)\n                {\n                     if(strcmp(book[i].publisher,temp)==0)\n                     {\n                         details(&book[i]);\n                         t++;\n                     }\n                }\n                t==0? printf(\"\\\\n NO data found !!\") : printf(\"\");\n                main();\n            }\n            case 3:{\n                for(int i=0;i<count;i++)\n                {\n                    if(book[i].cost>500){\n                        details(&book[i]) ;\n                    }\n                }\n                main();\n            }\n            case 4:{\n              for(int i=0;i<count;i++)\n                {\n                        details(&book[i]) ;\n                }\n                main();\n             main();\n            }\n            default: {main();}\n        }\n}\n`}</code></pre>\n    <h3>{`Output`}</h3>\n    <pre><code parentName=\"pre\" {...{}}>{`How many book's do you want to store\n1\nBook Details\nBook Name : Spring Boot in Action\nauthor Name : Craig Walls\npublisher Name : Amazon\nCost of book : 100\n\n\n\nselect from menu:\n1) Books of a specific author.\n2) Books by a specific Publisher.\n3) All Books costing Rs. 500 and above.\n4) All Books\n4\nsh: 1: cls: not found\n\nBook Details\n\nBook Name      : Spring Boot in Action\nauthor Name    : Craig Walls\npublisher Name : Amazon\nPrice of Book  : 100\n\n\nselect from menu:\n1) Books of a specific author.\n2) Books by a specific Publisher.\n3) All Books costing Rs. 500 and above.\n4) All Books\n`}</code></pre>\n    <h2>{`C++ Implementation`}</h2>\n    <h3>{`18. Write a C++ program to accept book details for ‘n’ books as book_title, author, publisher and cost. Assign the accession number to each book in increasing order. Display these details as, -Books of a specific author -Books by a specific Publisher -All Books costing Rs. 500 and above. -All Books.`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-c\"\n      }}>{`//Write a C++ program to accept book details for ‘n’ books as book_title, author, publisher and cost. Assign the accession number to each book in increasing order. Display these details as, -Books of a specific author -Books by a specific Publisher -All Books costing Rs. 500 and above. -All Books.\n\n#include<iostream>\n#include <string.h>\nusing namespace std;\nstruct Book{\n    char book_title[100];\n    char author[100];\n    char publisher[50];\n    double cost;\n    int accessionNumber;\n};\nint count=0;\nstruct Book book[1000];\nvoid input(struct Book *book,int i){\n    getchar();\n    cout << \"Book Details \\\\n\";\n    cout << \"Book Name : \";\n    fgets(book->book_title,sizeof(book->book_title),stdin);\n    cout << \"author Name : \";\n    fgets(book->author,sizeof(book->author),stdin);\n    cout << \"publisher Name : \";\n    fgets(book->publisher,sizeof(book->publisher),stdin);\n    book->accessionNumber=i;\n    cout << \"Cost of book : \";\n    cin >> book->cost;\n}\nvoid details(struct Book *book){\n    cout << \"\\\\nBook Details \\\\n\\\\n\";\n    cout << \"Book Name      : \" << book->book_title;\n    cout << \"author Name    : \" << book->author;\n    cout << \"publisher Name : \" << book->publisher;\n    cout << \"Price of Book  : \" << book->cost;\n}\nint main(){\n     if(count==0)\n     {\n        cout << \"How many book's do you want to store\\\\n\";\n        cin >> count;\n        for(int i=0;i<count;i++)\n        {\n            input(&book[i],i);\n        }\n        }\n        cout << \"\\\\n\\\\n\\\\nselect from menu: \\\\n\";\n        cout << \"1) Books of a specific author.\\\\n2) Books by a specific Publisher.\\\\n3) All Books costing Rs. 500 and above.\\\\n4) All Books\\\\n\";\n        int k=0;\n        cin >> k;\n        system(\"cls\");\n        switch(k){\n            case 1:{\n                int t=0;\n                cout << \"\\\\nEnter author name: \";\n                char temp[100];\n                getchar();\n                fgets(temp,sizeof(temp),stdin);\n                for(int i=0;i<count;i++)\n                {\n                     if(strcmp(book[i].author,temp)==0)\n                     {\n                         details(&book[i]);\n                         t++;\n                     }\n                }\n                t==0? cout << \"\\\\n NO data found !!\" : cout << \"\";\n                main();\n            }\n            case 2:{\n                int t=0;\n                cout << \"\\\\nEnter Publisher name: \";\n                char temp[100];\n                getchar();\n                fgets(temp,sizeof(temp),stdin);\n                for(int i=0;i<count;i++)\n                {\n                     if(strcmp(book[i].publisher,temp)==0)\n                     {\n                         details(&book[i]);\n                         t++;\n                     }\n                }\n                t==0? cout << \"\\\\n NO data found !!\" : cout << \"\";\n                main();\n            }\n            case 3:{\n                for(int i=0;i<count;i++)\n                {\n                    if(book[i].cost>500){\n                        details(&book[i]) ;\n                    }\n                }\n                main();\n            }\n            case 4:{\n              for(int i=0;i<count;i++)\n                {\n                        details(&book[i]) ;\n                }\n                main();\n             main();\n            }\n            default: {main();}\n     }\n}\n`}</code></pre>\n    <h3>{`Output`}</h3>\n    <pre><code parentName=\"pre\" {...{}}>{`How many book's do you want to store\n1\nBook Details\nBook Name : Spring Boot in Action\nauthor Name : Craig Walls\npublisher Name : Amazon\nCost of book : 100\n\n\n\nselect from menu:\n1) Books of a specific author.\n2) Books by a specific Publisher.\n3) All Books costing Rs. 500 and above.\n4) All Books\n4\nsh: 1: cls: not found\n\nBook Details\n\nBook Name      : Spring Boot in Action\nauthor Name    : Craig Walls\npublisher Name : Amazon\nPrice of Book  : 100\n\n\nselect from menu:\n1) Books of a specific author.\n2) Books by a specific Publisher.\n3) All Books costing Rs. 500 and above.\n4) All Books\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}