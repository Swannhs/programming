{"expireTime":9007200883710394000,"key":"gatsby-plugin-mdx-entire-payload-b6ddd19858a112eb088e1a6bde5e2128--undefined","val":{"mdast":{"type":"root","children":[{"type":"heading","depth":2,"children":[{"type":"text","value":"C Implementation","position":{"start":{"line":2,"column":4,"offset":5},"end":{"line":2,"column":20,"offset":21},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":2},"end":{"line":2,"column":20,"offset":21},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"8. Write a C program to print all permutations of a given string using pointers.","position":{"start":{"line":3,"column":5,"offset":27},"end":{"line":3,"column":85,"offset":107},"indent":[]}}],"position":{"start":{"line":3,"column":1,"offset":23},"end":{"line":3,"column":85,"offset":107},"indent":[]}},{"type":"code","lang":"c","meta":null,"value":"//Write a C program to print all permutations of a given string using pointers.\n#include <stdio.h>\nvoid changePosition(char *c1, char *c2)\n{\n    char tmp;\n    tmp = *c1;\n    *c1 = *c2;\n    *c2 = tmp;\n}\nvoid charPermute(char *ch, int a, int n)\n{\n   int i;\n   if (a == n)\n     printf(\"%s  \", ch);\n   else\n   {\n       for (i = a; i <= n; i++)\n       {\n          changePosition((ch+a), (ch+i));\n          charPermute(ch, a+1, n);\n          changePosition((ch+a), (ch+i));\n       }\n   }\n}\n\nvoid main()\n{\n    char str[] = \"abc\";\n    int n = strlen(str);\n    printf(\" The permutations of the string are : \\n\");\n    charPermute(str, 0, n-1);\n}","position":{"start":{"line":4,"column":1,"offset":109},"end":{"line":37,"column":4,"offset":786},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Output","position":{"start":{"line":38,"column":5,"offset":792},"end":{"line":38,"column":11,"offset":798},"indent":[]}}],"position":{"start":{"line":38,"column":1,"offset":788},"end":{"line":38,"column":11,"offset":798},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"The permutations of the string are :\nabc  acb  bac  bca  cba  cab","position":{"start":{"line":39,"column":1,"offset":800},"end":{"line":42,"column":4,"offset":876},"indent":[1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"C++ Implementation","position":{"start":{"line":43,"column":4,"offset":881},"end":{"line":43,"column":22,"offset":899},"indent":[]}}],"position":{"start":{"line":43,"column":1,"offset":878},"end":{"line":43,"column":22,"offset":899},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"8. Write a C++ program to print all permutations of a given string using pointers.","position":{"start":{"line":44,"column":5,"offset":905},"end":{"line":44,"column":87,"offset":987},"indent":[]}}],"position":{"start":{"line":44,"column":1,"offset":901},"end":{"line":44,"column":87,"offset":987},"indent":[]}},{"type":"code","lang":"c","meta":null,"value":"//Write a C++ program to print all permutations of a given string using pointers.\n#include <iostream>\n#include <string.h>\nusing namespace std;\n\nvoid changePosition(char *c1, char *c2)\n{\n    char tmp;\n    tmp = *c1;\n    *c1 = *c2;\n    *c2 = tmp;\n}\nvoid charPermute(char *ch, int a, int n)\n{\n   int i;\n   if (a == n)\n     cout<<ch<<\" \";\n   else\n   {\n       for (i = a; i <= n; i++)\n       {\n          changePosition((ch+a), (ch+i));\n          charPermute(ch, a+1, n);\n          changePosition((ch+a), (ch+i));\n       }\n   }\n}\n\nint main()\n{\n    char str[] = \"abc\";\n    int n = strlen(str);\n    cout<<(\" The permutations of the string are : \\n\");\n    charPermute(str, 0, n-1);\n}","position":{"start":{"line":45,"column":1,"offset":989},"end":{"line":81,"column":4,"offset":1708},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Output","position":{"start":{"line":82,"column":5,"offset":1714},"end":{"line":82,"column":11,"offset":1720},"indent":[]}}],"position":{"start":{"line":82,"column":1,"offset":1710},"end":{"line":82,"column":11,"offset":1720},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"The permutations of the string are :\nabc  acb  bac  bca  cba  cab","position":{"start":{"line":83,"column":1,"offset":1722},"end":{"line":86,"column":4,"offset":1798},"indent":[1,1,1]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"Write a C/C++/Java program to print all permutations of a given string using pointers.\",\"category\":\"Pointer Program Index\",\"tags\":[\"#c\",\"#c++\",\"#tutorial\"],\"date\":\"2020-04-16T00:00:00.000Z\",\"thumbnailText\":\"Index\"}","position":{"start":{"line":89,"column":1,"offset":1802},"end":{"line":89,"column":253,"offset":2054},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":89,"column":253,"offset":2054}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Write a C/C++/Java program to print all permutations of a given string using pointers.\",\n  \"category\": \"Pointer Program Index\",\n  \"tags\": [\"#c\", \"#c++\", \"#tutorial\"],\n  \"date\": \"2020-04-16T00:00:00.000Z\",\n  \"thumbnailText\": \"Index\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"C Implementation\"), mdx(\"h3\", null, \"8. Write a C program to print all permutations of a given string using pointers.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-c\"\n  }, \"//Write a C program to print all permutations of a given string using pointers.\\n#include <stdio.h>\\nvoid changePosition(char *c1, char *c2)\\n{\\n    char tmp;\\n    tmp = *c1;\\n    *c1 = *c2;\\n    *c2 = tmp;\\n}\\nvoid charPermute(char *ch, int a, int n)\\n{\\n   int i;\\n   if (a == n)\\n     printf(\\\"%s  \\\", ch);\\n   else\\n   {\\n       for (i = a; i <= n; i++)\\n       {\\n          changePosition((ch+a), (ch+i));\\n          charPermute(ch, a+1, n);\\n          changePosition((ch+a), (ch+i));\\n       }\\n   }\\n}\\n\\nvoid main()\\n{\\n    char str[] = \\\"abc\\\";\\n    int n = strlen(str);\\n    printf(\\\" The permutations of the string are : \\\\n\\\");\\n    charPermute(str, 0, n-1);\\n}\\n\")), mdx(\"h3\", null, \"Output\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"The permutations of the string are :\\nabc  acb  bac  bca  cba  cab\\n\")), mdx(\"h2\", null, \"C++ Implementation\"), mdx(\"h3\", null, \"8. Write a C++ program to print all permutations of a given string using pointers.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-c\"\n  }, \"//Write a C++ program to print all permutations of a given string using pointers.\\n#include <iostream>\\n#include <string.h>\\nusing namespace std;\\n\\nvoid changePosition(char *c1, char *c2)\\n{\\n    char tmp;\\n    tmp = *c1;\\n    *c1 = *c2;\\n    *c2 = tmp;\\n}\\nvoid charPermute(char *ch, int a, int n)\\n{\\n   int i;\\n   if (a == n)\\n     cout<<ch<<\\\" \\\";\\n   else\\n   {\\n       for (i = a; i <= n; i++)\\n       {\\n          changePosition((ch+a), (ch+i));\\n          charPermute(ch, a+1, n);\\n          changePosition((ch+a), (ch+i));\\n       }\\n   }\\n}\\n\\nint main()\\n{\\n    char str[] = \\\"abc\\\";\\n    int n = strlen(str);\\n    cout<<(\\\" The permutations of the string are : \\\\n\\\");\\n    charPermute(str, 0, n-1);\\n}\\n\")), mdx(\"h3\", null, \"Output\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"The permutations of the string are :\\nabc  acb  bac  bca  cba  cab\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"Write a C/C++/Java program to print all permutations of a given string using pointers.\",\n  \"category\": \"Pointer Program Index\",\n  \"tags\": [\"#c\", \"#c++\", \"#tutorial\"],\n  \"date\": \"2020-04-16T00:00:00.000Z\",\n  \"thumbnailText\": \"Index\"\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h2>{`C Implementation`}</h2>\n    <h3>{`8. Write a C program to print all permutations of a given string using pointers.`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-c\"\n      }}>{`//Write a C program to print all permutations of a given string using pointers.\n#include <stdio.h>\nvoid changePosition(char *c1, char *c2)\n{\n    char tmp;\n    tmp = *c1;\n    *c1 = *c2;\n    *c2 = tmp;\n}\nvoid charPermute(char *ch, int a, int n)\n{\n   int i;\n   if (a == n)\n     printf(\"%s  \", ch);\n   else\n   {\n       for (i = a; i <= n; i++)\n       {\n          changePosition((ch+a), (ch+i));\n          charPermute(ch, a+1, n);\n          changePosition((ch+a), (ch+i));\n       }\n   }\n}\n\nvoid main()\n{\n    char str[] = \"abc\";\n    int n = strlen(str);\n    printf(\" The permutations of the string are : \\\\n\");\n    charPermute(str, 0, n-1);\n}\n`}</code></pre>\n    <h3>{`Output`}</h3>\n    <pre><code parentName=\"pre\" {...{}}>{`The permutations of the string are :\nabc  acb  bac  bca  cba  cab\n`}</code></pre>\n    <h2>{`C++ Implementation`}</h2>\n    <h3>{`8. Write a C++ program to print all permutations of a given string using pointers.`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-c\"\n      }}>{`//Write a C++ program to print all permutations of a given string using pointers.\n#include <iostream>\n#include <string.h>\nusing namespace std;\n\nvoid changePosition(char *c1, char *c2)\n{\n    char tmp;\n    tmp = *c1;\n    *c1 = *c2;\n    *c2 = tmp;\n}\nvoid charPermute(char *ch, int a, int n)\n{\n   int i;\n   if (a == n)\n     cout<<ch<<\" \";\n   else\n   {\n       for (i = a; i <= n; i++)\n       {\n          changePosition((ch+a), (ch+i));\n          charPermute(ch, a+1, n);\n          changePosition((ch+a), (ch+i));\n       }\n   }\n}\n\nint main()\n{\n    char str[] = \"abc\";\n    int n = strlen(str);\n    cout<<(\" The permutations of the string are : \\\\n\");\n    charPermute(str, 0, n-1);\n}\n`}</code></pre>\n    <h3>{`Output`}</h3>\n    <pre><code parentName=\"pre\" {...{}}>{`The permutations of the string are :\nabc  acb  bac  bca  cba  cab\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}