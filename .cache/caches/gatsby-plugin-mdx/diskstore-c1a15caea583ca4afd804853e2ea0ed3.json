{"expireTime":9007200883710395000,"key":"gatsby-plugin-mdx-entire-payload-04b69019d0798cbcce1c27c2d38a4736--undefined","val":{"mdast":{"type":"root","children":[{"type":"heading","depth":2,"children":[{"type":"text","value":"C Implementation","position":{"start":{"line":2,"column":4,"offset":5},"end":{"line":2,"column":20,"offset":21},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":2},"end":{"line":2,"column":20,"offset":21},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"21. Write a C program to print all the alphabets using a pointer.","position":{"start":{"line":3,"column":5,"offset":27},"end":{"line":3,"column":70,"offset":92},"indent":[]}}],"position":{"start":{"line":3,"column":1,"offset":23},"end":{"line":3,"column":70,"offset":92},"indent":[]}},{"type":"code","lang":"c","meta":null,"value":"//Write a C program to print all the alphabets using a pointer.\n#include<stdio.h>\nvoid main()\n{\n    char *C;\n    char *c;\n    C = (char*)malloc(sizeof(char));    // assigning memory to c\n    printf(\"Upper Case\\n\");\n    *C = 'A';\n    while (*C <= 'Z')\n    {\n        printf(\"%c  \", *C);\n        *C = *C + 1;\n    }\n    printf(\"\\n\");\n    c = (char*)malloc(sizeof(char));    // assigning memory to c\n    printf(\"Lower Case\\n\");\n    *c = 'a';\n    while (*c <= 'z')\n    {\n        printf(\"%c  \", *c);\n        *c = *c + 1;\n    }\n}","position":{"start":{"line":4,"column":1,"offset":94},"end":{"line":29,"column":4,"offset":649},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Output","position":{"start":{"line":30,"column":5,"offset":655},"end":{"line":30,"column":11,"offset":661},"indent":[]}}],"position":{"start":{"line":30,"column":1,"offset":651},"end":{"line":30,"column":11,"offset":661},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"Upper Case\nA  B  C  D  E  F  G  H  I  J  K  L  M  N  O  P  Q  R  S  T  U  V  W  X  Y  Z\nLower Case\na  b  c  d  e  f  g  h  i  j  k  l  m  n  o  p  q  r  s  t  u  v  w  x  y  z","position":{"start":{"line":31,"column":1,"offset":663},"end":{"line":36,"column":4,"offset":851},"indent":[1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"C++ Implementation","position":{"start":{"line":37,"column":4,"offset":856},"end":{"line":37,"column":22,"offset":874},"indent":[]}}],"position":{"start":{"line":37,"column":1,"offset":853},"end":{"line":37,"column":22,"offset":874},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"21. Write a C++ program to print all the alphabets using a pointer.","position":{"start":{"line":38,"column":5,"offset":880},"end":{"line":38,"column":72,"offset":947},"indent":[]}}],"position":{"start":{"line":38,"column":1,"offset":876},"end":{"line":38,"column":72,"offset":947},"indent":[]}},{"type":"code","lang":"c","meta":null,"value":"//Write a C++ program to print all the alphabets using a pointer.\n#include<iostream>\nusing namespace std;\nint main()\n{\n    char *C;\n    char *c;\n    C = (char*)malloc(sizeof(char));\t// assigning memory to c\n    cout<<(\"Upper Case\\n\");\n    *C = 'A';\n    while (*C <= 'Z')\n    {\n        cout<<*C;\n        *C = *C + 1;\n    }\n    printf(\"\\n\");\n    c = (char*)malloc(sizeof(char));\t// assigning memory to c\n    cout<<(\"Lower Case\\n\");\n    *c = 'a';\n    while (*c <= 'z')\n    {\n        cout<< *c;\n        *c = *c + 1;\n    }\n}","position":{"start":{"line":39,"column":1,"offset":949},"end":{"line":65,"column":4,"offset":1503},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Output","position":{"start":{"line":66,"column":5,"offset":1509},"end":{"line":66,"column":11,"offset":1515},"indent":[]}}],"position":{"start":{"line":66,"column":1,"offset":1505},"end":{"line":66,"column":11,"offset":1515},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"Upper Case\nA  B  C  D  E  F  G  H  I  J  K  L  M  N  O  P  Q  R  S  T  U  V  W  X  Y  Z\nLower Case\na  b  c  d  e  f  g  h  i  j  k  l  m  n  o  p  q  r  s  t  u  v  w  x  y  z","position":{"start":{"line":67,"column":1,"offset":1517},"end":{"line":72,"column":4,"offset":1705},"indent":[1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"Write a C/C++/Java program to print all the alphabets using a pointer.\",\"category\":\"Pointer Program Index\",\"tags\":[\"#c\",\"#c++\",\"#tutorial\"],\"date\":\"2020-04-16T00:00:00.000Z\",\"thumbnailText\":\"Index\"}","position":{"start":{"line":75,"column":1,"offset":1709},"end":{"line":75,"column":237,"offset":1945},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":75,"column":237,"offset":1945}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Write a C/C++/Java program to print all the alphabets using a pointer.\",\n  \"category\": \"Pointer Program Index\",\n  \"tags\": [\"#c\", \"#c++\", \"#tutorial\"],\n  \"date\": \"2020-04-16T00:00:00.000Z\",\n  \"thumbnailText\": \"Index\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"C Implementation\"), mdx(\"h3\", null, \"21. Write a C program to print all the alphabets using a pointer.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-c\"\n  }, \"//Write a C program to print all the alphabets using a pointer.\\n#include<stdio.h>\\nvoid main()\\n{\\n    char *C;\\n    char *c;\\n    C = (char*)malloc(sizeof(char));    // assigning memory to c\\n    printf(\\\"Upper Case\\\\n\\\");\\n    *C = 'A';\\n    while (*C <= 'Z')\\n    {\\n        printf(\\\"%c  \\\", *C);\\n        *C = *C + 1;\\n    }\\n    printf(\\\"\\\\n\\\");\\n    c = (char*)malloc(sizeof(char));    // assigning memory to c\\n    printf(\\\"Lower Case\\\\n\\\");\\n    *c = 'a';\\n    while (*c <= 'z')\\n    {\\n        printf(\\\"%c  \\\", *c);\\n        *c = *c + 1;\\n    }\\n}\\n\")), mdx(\"h3\", null, \"Output\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"Upper Case\\nA  B  C  D  E  F  G  H  I  J  K  L  M  N  O  P  Q  R  S  T  U  V  W  X  Y  Z\\nLower Case\\na  b  c  d  e  f  g  h  i  j  k  l  m  n  o  p  q  r  s  t  u  v  w  x  y  z\\n\")), mdx(\"h2\", null, \"C++ Implementation\"), mdx(\"h3\", null, \"21. Write a C++ program to print all the alphabets using a pointer.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-c\"\n  }, \"//Write a C++ program to print all the alphabets using a pointer.\\n#include<iostream>\\nusing namespace std;\\nint main()\\n{\\n    char *C;\\n    char *c;\\n    C = (char*)malloc(sizeof(char));    // assigning memory to c\\n    cout<<(\\\"Upper Case\\\\n\\\");\\n    *C = 'A';\\n    while (*C <= 'Z')\\n    {\\n        cout<<*C;\\n        *C = *C + 1;\\n    }\\n    printf(\\\"\\\\n\\\");\\n    c = (char*)malloc(sizeof(char));    // assigning memory to c\\n    cout<<(\\\"Lower Case\\\\n\\\");\\n    *c = 'a';\\n    while (*c <= 'z')\\n    {\\n        cout<< *c;\\n        *c = *c + 1;\\n    }\\n}\\n\")), mdx(\"h3\", null, \"Output\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"Upper Case\\nA  B  C  D  E  F  G  H  I  J  K  L  M  N  O  P  Q  R  S  T  U  V  W  X  Y  Z\\nLower Case\\na  b  c  d  e  f  g  h  i  j  k  l  m  n  o  p  q  r  s  t  u  v  w  x  y  z\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"Write a C/C++/Java program to print all the alphabets using a pointer.\",\n  \"category\": \"Pointer Program Index\",\n  \"tags\": [\"#c\", \"#c++\", \"#tutorial\"],\n  \"date\": \"2020-04-16T00:00:00.000Z\",\n  \"thumbnailText\": \"Index\"\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h2>{`C Implementation`}</h2>\n    <h3>{`21. Write a C program to print all the alphabets using a pointer.`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-c\"\n      }}>{`//Write a C program to print all the alphabets using a pointer.\n#include<stdio.h>\nvoid main()\n{\n    char *C;\n    char *c;\n    C = (char*)malloc(sizeof(char));    // assigning memory to c\n    printf(\"Upper Case\\\\n\");\n    *C = 'A';\n    while (*C <= 'Z')\n    {\n        printf(\"%c  \", *C);\n        *C = *C + 1;\n    }\n    printf(\"\\\\n\");\n    c = (char*)malloc(sizeof(char));    // assigning memory to c\n    printf(\"Lower Case\\\\n\");\n    *c = 'a';\n    while (*c <= 'z')\n    {\n        printf(\"%c  \", *c);\n        *c = *c + 1;\n    }\n}\n`}</code></pre>\n    <h3>{`Output`}</h3>\n    <pre><code parentName=\"pre\" {...{}}>{`Upper Case\nA  B  C  D  E  F  G  H  I  J  K  L  M  N  O  P  Q  R  S  T  U  V  W  X  Y  Z\nLower Case\na  b  c  d  e  f  g  h  i  j  k  l  m  n  o  p  q  r  s  t  u  v  w  x  y  z\n`}</code></pre>\n    <h2>{`C++ Implementation`}</h2>\n    <h3>{`21. Write a C++ program to print all the alphabets using a pointer.`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-c\"\n      }}>{`//Write a C++ program to print all the alphabets using a pointer.\n#include<iostream>\nusing namespace std;\nint main()\n{\n    char *C;\n    char *c;\n    C = (char*)malloc(sizeof(char));    // assigning memory to c\n    cout<<(\"Upper Case\\\\n\");\n    *C = 'A';\n    while (*C <= 'Z')\n    {\n        cout<<*C;\n        *C = *C + 1;\n    }\n    printf(\"\\\\n\");\n    c = (char*)malloc(sizeof(char));    // assigning memory to c\n    cout<<(\"Lower Case\\\\n\");\n    *c = 'a';\n    while (*c <= 'z')\n    {\n        cout<< *c;\n        *c = *c + 1;\n    }\n}\n`}</code></pre>\n    <h3>{`Output`}</h3>\n    <pre><code parentName=\"pre\" {...{}}>{`Upper Case\nA  B  C  D  E  F  G  H  I  J  K  L  M  N  O  P  Q  R  S  T  U  V  W  X  Y  Z\nLower Case\na  b  c  d  e  f  g  h  i  j  k  l  m  n  o  p  q  r  s  t  u  v  w  x  y  z\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}