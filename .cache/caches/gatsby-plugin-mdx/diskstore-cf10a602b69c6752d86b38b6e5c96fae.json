{"expireTime":9007200883706345000,"key":"gatsby-plugin-mdx-entire-payload-c9f4d741eacc6b6ff152ced1665769c6--undefined","val":{"mdast":{"type":"root","children":[{"type":"heading","depth":2,"children":[{"type":"text","value":"C Implementation","position":{"start":{"line":2,"column":4,"offset":5},"end":{"line":2,"column":20,"offset":21},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":2},"end":{"line":2,"column":20,"offset":21},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"27. Write a C program to find last occurrence of a word in a given string.","position":{"start":{"line":3,"column":5,"offset":27},"end":{"line":3,"column":79,"offset":101},"indent":[]}}],"position":{"start":{"line":3,"column":1,"offset":23},"end":{"line":3,"column":79,"offset":101},"indent":[]}},{"type":"code","lang":"c","meta":null,"value":"//Write a C program to find last occurrence of a word in a given string.\n#include <stdio.h>\n#include <string.h>\n#define MAX_SIZE 100 // Maximum string size\n\nint main()\n{\n    char str[100],word[100];\n\n    int i, j, index, found;\n    int strLen, wordLen;\n    printf(\"Enter any string: \");\n    gets(str);\n    printf(\"Enter any word to search: \");\n    gets(word);\n\n    index = -1;\n    strLen  = strlen(str);\n    wordLen = strlen(word);\n    for(i=0; i<=strLen - wordLen; i++)\n    {\n        found = 1;\n        for(j=0; j<wordLen; j++)\n        {\n\n            if(str[i + j] != word[j])\n            {\n                found = 0;\n                break;\n            }\n        }\n\n        if(found == 1)\n        {\n            index = i;\n        }\n    }\n\n    if(index == -1)\n    {\n        printf(\"\\n'%s' not found.\", word);\n    }\n    else\n    {\n        printf(\"\\nLast index of '%s' = %d\", word, index+1);\n    }\n\n    return 0;\n}","position":{"start":{"line":4,"column":1,"offset":103},"end":{"line":54,"column":4,"offset":1074},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Output","position":{"start":{"line":55,"column":5,"offset":1080},"end":{"line":55,"column":11,"offset":1086},"indent":[]}}],"position":{"start":{"line":55,"column":1,"offset":1076},"end":{"line":55,"column":11,"offset":1086},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"Enter any string: hello from funycode\nEnter any word to search: funycode\n\nLast index of 'funycode' = 12","position":{"start":{"line":56,"column":1,"offset":1088},"end":{"line":61,"column":4,"offset":1204},"indent":[1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"C++ Implementation","position":{"start":{"line":62,"column":4,"offset":1209},"end":{"line":62,"column":22,"offset":1227},"indent":[]}}],"position":{"start":{"line":62,"column":1,"offset":1206},"end":{"line":62,"column":22,"offset":1227},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"27. Write a C++ program to find last occurrence of a word in a given string.","position":{"start":{"line":63,"column":5,"offset":1233},"end":{"line":63,"column":81,"offset":1309},"indent":[]}}],"position":{"start":{"line":63,"column":1,"offset":1229},"end":{"line":63,"column":81,"offset":1309},"indent":[]}},{"type":"code","lang":"c","meta":null,"value":"//Write a C++ program to find last occurrence of a word in a given string.\n\n#include <iostream>\n#include <string.h>\nusing namespace std;\nint main()\n{\n    char str[100],word[100];\n    int i, j, index, found;\n    int strLen, wordLen;\n    cout << \"Enter any string: \";\n    cin >> str;\n    cout << \"Enter any word to search: \";\n    cin >> word;\n    index = -1;\n    strLen  = strlen(str);\n    wordLen = strlen(word);\n    for(i=0; i<=strLen - wordLen; i++)\n    {\n        found = 1;\n        for(j=0; j<wordLen; j++)\n        {\n            if(str[i + j] != word[j])\n            {\n                found = 0;\n                break;\n            }\n        }\n        if(found == 1)\n        {\n            index = i;\n        }\n    }\n    if(index == -1)\n    {\n        cout << \"\\n not found.\"<< word;\n    }\n    else\n    {\n        cout << \"\\nLast index of \" << word << \" = \" << index+1;\n    }\n    return 0;\n}","position":{"start":{"line":64,"column":1,"offset":1311},"end":{"line":108,"column":4,"offset":2253},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Output","position":{"start":{"line":109,"column":5,"offset":2259},"end":{"line":109,"column":11,"offset":2265},"indent":[]}}],"position":{"start":{"line":109,"column":1,"offset":2255},"end":{"line":109,"column":11,"offset":2265},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"Enter any string: hello from funycode\nEnter any word to search: funycode\n\nLast index of 'funycode' = 12","position":{"start":{"line":110,"column":1,"offset":2267},"end":{"line":115,"column":4,"offset":2383},"indent":[1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Java Implementation","position":{"start":{"line":117,"column":4,"offset":2390},"end":{"line":117,"column":23,"offset":2409},"indent":[]}}],"position":{"start":{"line":117,"column":1,"offset":2387},"end":{"line":117,"column":23,"offset":2409},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"27. Write a Java program to find last occurrence of a word in a given string.","position":{"start":{"line":118,"column":5,"offset":2415},"end":{"line":118,"column":82,"offset":2492},"indent":[]}}],"position":{"start":{"line":118,"column":1,"offset":2411},"end":{"line":118,"column":82,"offset":2492},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"//Write a Java program to find last occurrence of a word in a given string.\nimport java.util.Scanner;\npublic class Funycode {\n    public static void main(String[] args) {\n        Scanner z=new Scanner(System.in);\n        System.out.println(\"Enter a character: \");\n        char str[100],word[100];\n\n        int i, j, index, found;\n        int strLen, wordLen;\n        System.out.println(\"Enter any string: \");\n        str = z.nextLine();\n        System.out.println(\"Enter any word to search: \");\n        word = z.nextLine();\n\n        index = -1;\n        strLen  = strlen(str);\n        wordLen = strlen(word);\n        for(i=0; i<=strLen - wordLen; i++)\n        {\n            found = 1;\n            for(j=0; j<wordLen; j++)\n            {\n\n                if(str[i + j] != word[j])\n                {\n                    found = 0;\n                    break;\n                }\n            }\n\n            if(found == 1)\n            {\n                index = i;\n            }\n        }\n\n        if(index == -1)\n        {\n            System.out.println(word + \" not found.\");\n        }\n        else\n        {\n            System.out.println(\"Last index of \" +word+ \" = \"+ index+1);\n        }\n    }\n}","position":{"start":{"line":119,"column":1,"offset":2494},"end":{"line":167,"column":4,"offset":3742},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Output","position":{"start":{"line":168,"column":5,"offset":3748},"end":{"line":168,"column":11,"offset":3754},"indent":[]}}],"position":{"start":{"line":168,"column":1,"offset":3744},"end":{"line":168,"column":11,"offset":3754},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"Enter any string: hello from funycode\nEnter any word to search: funycode\n\nLast index of 'funycode' = 12","position":{"start":{"line":169,"column":1,"offset":3756},"end":{"line":174,"column":4,"offset":3872},"indent":[1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"Write a C/C++/Java program to find last occurrence of a word in a given string.\",\"category\":\"String Index\",\"tags\":[\"#c\",\"#c++\",\"#java\",\"#tutorial\"],\"date\":\"2020-04-16T00:00:00.000Z\",\"thumbnailText\":\"Index\"}","position":{"start":{"line":177,"column":1,"offset":3876},"end":{"line":177,"column":245,"offset":4120},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":177,"column":245,"offset":4120}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Write a C/C++/Java program to find last occurrence of a word in a given string.\",\n  \"category\": \"String Index\",\n  \"tags\": [\"#c\", \"#c++\", \"#java\", \"#tutorial\"],\n  \"date\": \"2020-04-16T00:00:00.000Z\",\n  \"thumbnailText\": \"Index\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"C Implementation\"), mdx(\"h3\", null, \"27. Write a C program to find last occurrence of a word in a given string.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-c\"\n  }, \"//Write a C program to find last occurrence of a word in a given string.\\n#include <stdio.h>\\n#include <string.h>\\n#define MAX_SIZE 100 // Maximum string size\\n\\nint main()\\n{\\n    char str[100],word[100];\\n\\n    int i, j, index, found;\\n    int strLen, wordLen;\\n    printf(\\\"Enter any string: \\\");\\n    gets(str);\\n    printf(\\\"Enter any word to search: \\\");\\n    gets(word);\\n\\n    index = -1;\\n    strLen  = strlen(str);\\n    wordLen = strlen(word);\\n    for(i=0; i<=strLen - wordLen; i++)\\n    {\\n        found = 1;\\n        for(j=0; j<wordLen; j++)\\n        {\\n\\n            if(str[i + j] != word[j])\\n            {\\n                found = 0;\\n                break;\\n            }\\n        }\\n\\n        if(found == 1)\\n        {\\n            index = i;\\n        }\\n    }\\n\\n    if(index == -1)\\n    {\\n        printf(\\\"\\\\n'%s' not found.\\\", word);\\n    }\\n    else\\n    {\\n        printf(\\\"\\\\nLast index of '%s' = %d\\\", word, index+1);\\n    }\\n\\n    return 0;\\n}\\n\")), mdx(\"h3\", null, \"Output\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"Enter any string: hello from funycode\\nEnter any word to search: funycode\\n\\nLast index of 'funycode' = 12\\n\")), mdx(\"h2\", null, \"C++ Implementation\"), mdx(\"h3\", null, \"27. Write a C++ program to find last occurrence of a word in a given string.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-c\"\n  }, \"//Write a C++ program to find last occurrence of a word in a given string.\\n\\n#include <iostream>\\n#include <string.h>\\nusing namespace std;\\nint main()\\n{\\n    char str[100],word[100];\\n    int i, j, index, found;\\n    int strLen, wordLen;\\n    cout << \\\"Enter any string: \\\";\\n    cin >> str;\\n    cout << \\\"Enter any word to search: \\\";\\n    cin >> word;\\n    index = -1;\\n    strLen  = strlen(str);\\n    wordLen = strlen(word);\\n    for(i=0; i<=strLen - wordLen; i++)\\n    {\\n        found = 1;\\n        for(j=0; j<wordLen; j++)\\n        {\\n            if(str[i + j] != word[j])\\n            {\\n                found = 0;\\n                break;\\n            }\\n        }\\n        if(found == 1)\\n        {\\n            index = i;\\n        }\\n    }\\n    if(index == -1)\\n    {\\n        cout << \\\"\\\\n not found.\\\"<< word;\\n    }\\n    else\\n    {\\n        cout << \\\"\\\\nLast index of \\\" << word << \\\" = \\\" << index+1;\\n    }\\n    return 0;\\n}\\n\")), mdx(\"h3\", null, \"Output\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"Enter any string: hello from funycode\\nEnter any word to search: funycode\\n\\nLast index of 'funycode' = 12\\n\")), mdx(\"h2\", null, \"Java Implementation\"), mdx(\"h3\", null, \"27. Write a Java program to find last occurrence of a word in a given string.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"//Write a Java program to find last occurrence of a word in a given string.\\nimport java.util.Scanner;\\npublic class Funycode {\\n    public static void main(String[] args) {\\n        Scanner z=new Scanner(System.in);\\n        System.out.println(\\\"Enter a character: \\\");\\n        char str[100],word[100];\\n\\n        int i, j, index, found;\\n        int strLen, wordLen;\\n        System.out.println(\\\"Enter any string: \\\");\\n        str = z.nextLine();\\n        System.out.println(\\\"Enter any word to search: \\\");\\n        word = z.nextLine();\\n\\n        index = -1;\\n        strLen  = strlen(str);\\n        wordLen = strlen(word);\\n        for(i=0; i<=strLen - wordLen; i++)\\n        {\\n            found = 1;\\n            for(j=0; j<wordLen; j++)\\n            {\\n\\n                if(str[i + j] != word[j])\\n                {\\n                    found = 0;\\n                    break;\\n                }\\n            }\\n\\n            if(found == 1)\\n            {\\n                index = i;\\n            }\\n        }\\n\\n        if(index == -1)\\n        {\\n            System.out.println(word + \\\" not found.\\\");\\n        }\\n        else\\n        {\\n            System.out.println(\\\"Last index of \\\" +word+ \\\" = \\\"+ index+1);\\n        }\\n    }\\n}\\n\")), mdx(\"h3\", null, \"Output\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"Enter any string: hello from funycode\\nEnter any word to search: funycode\\n\\nLast index of 'funycode' = 12\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"Write a C/C++/Java program to find last occurrence of a word in a given string.\",\n  \"category\": \"String Index\",\n  \"tags\": [\"#c\", \"#c++\", \"#java\", \"#tutorial\"],\n  \"date\": \"2020-04-16T00:00:00.000Z\",\n  \"thumbnailText\": \"Index\"\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h2>{`C Implementation`}</h2>\n    <h3>{`27. Write a C program to find last occurrence of a word in a given string.`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-c\"\n      }}>{`//Write a C program to find last occurrence of a word in a given string.\n#include <stdio.h>\n#include <string.h>\n#define MAX_SIZE 100 // Maximum string size\n\nint main()\n{\n    char str[100],word[100];\n\n    int i, j, index, found;\n    int strLen, wordLen;\n    printf(\"Enter any string: \");\n    gets(str);\n    printf(\"Enter any word to search: \");\n    gets(word);\n\n    index = -1;\n    strLen  = strlen(str);\n    wordLen = strlen(word);\n    for(i=0; i<=strLen - wordLen; i++)\n    {\n        found = 1;\n        for(j=0; j<wordLen; j++)\n        {\n\n            if(str[i + j] != word[j])\n            {\n                found = 0;\n                break;\n            }\n        }\n\n        if(found == 1)\n        {\n            index = i;\n        }\n    }\n\n    if(index == -1)\n    {\n        printf(\"\\\\n'%s' not found.\", word);\n    }\n    else\n    {\n        printf(\"\\\\nLast index of '%s' = %d\", word, index+1);\n    }\n\n    return 0;\n}\n`}</code></pre>\n    <h3>{`Output`}</h3>\n    <pre><code parentName=\"pre\" {...{}}>{`Enter any string: hello from funycode\nEnter any word to search: funycode\n\nLast index of 'funycode' = 12\n`}</code></pre>\n    <h2>{`C++ Implementation`}</h2>\n    <h3>{`27. Write a C++ program to find last occurrence of a word in a given string.`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-c\"\n      }}>{`//Write a C++ program to find last occurrence of a word in a given string.\n\n#include <iostream>\n#include <string.h>\nusing namespace std;\nint main()\n{\n    char str[100],word[100];\n    int i, j, index, found;\n    int strLen, wordLen;\n    cout << \"Enter any string: \";\n    cin >> str;\n    cout << \"Enter any word to search: \";\n    cin >> word;\n    index = -1;\n    strLen  = strlen(str);\n    wordLen = strlen(word);\n    for(i=0; i<=strLen - wordLen; i++)\n    {\n        found = 1;\n        for(j=0; j<wordLen; j++)\n        {\n            if(str[i + j] != word[j])\n            {\n                found = 0;\n                break;\n            }\n        }\n        if(found == 1)\n        {\n            index = i;\n        }\n    }\n    if(index == -1)\n    {\n        cout << \"\\\\n not found.\"<< word;\n    }\n    else\n    {\n        cout << \"\\\\nLast index of \" << word << \" = \" << index+1;\n    }\n    return 0;\n}\n`}</code></pre>\n    <h3>{`Output`}</h3>\n    <pre><code parentName=\"pre\" {...{}}>{`Enter any string: hello from funycode\nEnter any word to search: funycode\n\nLast index of 'funycode' = 12\n`}</code></pre>\n    <h2>{`Java Implementation`}</h2>\n    <h3>{`27. Write a Java program to find last occurrence of a word in a given string.`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`//Write a Java program to find last occurrence of a word in a given string.\nimport java.util.Scanner;\npublic class Funycode {\n    public static void main(String[] args) {\n        Scanner z=new Scanner(System.in);\n        System.out.println(\"Enter a character: \");\n        char str[100],word[100];\n\n        int i, j, index, found;\n        int strLen, wordLen;\n        System.out.println(\"Enter any string: \");\n        str = z.nextLine();\n        System.out.println(\"Enter any word to search: \");\n        word = z.nextLine();\n\n        index = -1;\n        strLen  = strlen(str);\n        wordLen = strlen(word);\n        for(i=0; i<=strLen - wordLen; i++)\n        {\n            found = 1;\n            for(j=0; j<wordLen; j++)\n            {\n\n                if(str[i + j] != word[j])\n                {\n                    found = 0;\n                    break;\n                }\n            }\n\n            if(found == 1)\n            {\n                index = i;\n            }\n        }\n\n        if(index == -1)\n        {\n            System.out.println(word + \" not found.\");\n        }\n        else\n        {\n            System.out.println(\"Last index of \" +word+ \" = \"+ index+1);\n        }\n    }\n}\n`}</code></pre>\n    <h3>{`Output`}</h3>\n    <pre><code parentName=\"pre\" {...{}}>{`Enter any string: hello from funycode\nEnter any word to search: funycode\n\nLast index of 'funycode' = 12\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}