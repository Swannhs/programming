{"expireTime":9007200883706345000,"key":"gatsby-plugin-mdx-entire-payload-7eb0e970cfea223ebed140df496a4bc5--undefined","val":{"mdast":{"type":"root","children":[{"type":"heading","depth":2,"children":[{"type":"text","value":"C Implementation","position":{"start":{"line":2,"column":4,"offset":5},"end":{"line":2,"column":20,"offset":21},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":2},"end":{"line":2,"column":20,"offset":21},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"10. Write a C program for passing structures as function arguments and returning a structure from a function.","position":{"start":{"line":3,"column":5,"offset":27},"end":{"line":3,"column":114,"offset":136},"indent":[]}}],"position":{"start":{"line":3,"column":1,"offset":23},"end":{"line":3,"column":114,"offset":136},"indent":[]}},{"type":"code","lang":"c","meta":null,"value":"//Write a C++ program for passing structures as function arguments and returning a structure from a function.\n#include<stdio.h>\n#include <string.h>\nstruct Book{\n    char booName[100];\n    char authorName[100];\n};\nstruct Book input(struct Book book){\n    printf(\"Book Details \\n\");\n    printf(\"Book Name : \");\n    fgets(book.booName,sizeof(book.booName),stdin);\n    printf(\"author Name : \");\n    fgets(book.authorName,sizeof(book.authorName),stdin);\n    return book;\n};\nvoid details(struct Book book){\n    printf(\"\\nBook info \\n\\n\");\n    printf(\"Book Name   : %s\",book.booName);\n    printf(\"author Name : %s\",book.authorName);\n}\nint main(){\n    struct Book a;\n    a=input(a);\n    details(a);\n}","position":{"start":{"line":4,"column":1,"offset":138},"end":{"line":30,"column":4,"offset":865},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Output","position":{"start":{"line":31,"column":5,"offset":871},"end":{"line":31,"column":11,"offset":877},"indent":[]}}],"position":{"start":{"line":31,"column":1,"offset":867},"end":{"line":31,"column":11,"offset":877},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"Book Details\nBook Name : funycode\nauthor Name : C C++ JAVA\n\nBook info\n\nBook Name   : funycode\nauthor Name : C C++ JAVA","position":{"start":{"line":32,"column":1,"offset":879},"end":{"line":41,"column":4,"offset":1014},"indent":[1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"C++ Implementation","position":{"start":{"line":43,"column":4,"offset":1021},"end":{"line":43,"column":22,"offset":1039},"indent":[]}}],"position":{"start":{"line":43,"column":1,"offset":1018},"end":{"line":43,"column":22,"offset":1039},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"10. Write a C++ program for passing structures as function arguments and returning a structure from a function.","position":{"start":{"line":44,"column":5,"offset":1045},"end":{"line":44,"column":116,"offset":1156},"indent":[]}}],"position":{"start":{"line":44,"column":1,"offset":1041},"end":{"line":44,"column":116,"offset":1156},"indent":[]}},{"type":"code","lang":"c","meta":null,"value":"//Write a C++ program to find for passing structures as function arguments and returning a structure from a function.\n\n#include<iostream>\n#include <string.h>\nusing namespace std;\nstruct Book{\n    char booName[100];\n    char authorName[100];\n};\nstruct Book input(struct Book book){\n    cout << \"Book Details \\n\";\n    cout << \"Book Name : \";\n    fgets(book.booName,sizeof(book.booName),stdin);\n    cout << \"author Name : \";\n    fgets(book.authorName,sizeof(book.authorName),stdin);\n    return book;\n};\nvoid details(struct Book book){\n    cout << \"\\nBook info \\n\\n\";\n    cout << \"Book Name   : \"<<book.booName;\n    cout << \"author Name : \"<<book.authorName;\n}\nint main(){\n    struct Book a;\n    a=input(a);\n    details(a);\n}","position":{"start":{"line":45,"column":1,"offset":1158},"end":{"line":73,"column":4,"offset":1916},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Output","position":{"start":{"line":74,"column":5,"offset":1922},"end":{"line":74,"column":11,"offset":1928},"indent":[]}}],"position":{"start":{"line":74,"column":1,"offset":1918},"end":{"line":74,"column":11,"offset":1928},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"Book Details\nBook Name : funycode\nauthor Name : C C++ JAVA\n\nBook info\n\nBook Name   : funycode\nauthor Name : C C++ JAVA","position":{"start":{"line":75,"column":1,"offset":1930},"end":{"line":84,"column":4,"offset":2065},"indent":[1,1,1,1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"Write a C/C++/Java program for passing structures as function arguments and returning a structure from a function.\",\"category\":\"Structure And Union Index\",\"tags\":[\"#c\",\"#c++\",\"#java\",\"#tutorial\"],\"date\":\"2020-04-16T00:00:00.000Z\",\"thumbnailText\":\"Index\"}","position":{"start":{"line":87,"column":1,"offset":2069},"end":{"line":87,"column":293,"offset":2361},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":87,"column":293,"offset":2361}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Write a C/C++/Java program for passing structures as function arguments and returning a structure from a function.\",\n  \"category\": \"Structure And Union Index\",\n  \"tags\": [\"#c\", \"#c++\", \"#java\", \"#tutorial\"],\n  \"date\": \"2020-04-16T00:00:00.000Z\",\n  \"thumbnailText\": \"Index\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"C Implementation\"), mdx(\"h3\", null, \"10. Write a C program for passing structures as function arguments and returning a structure from a function.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-c\"\n  }, \"//Write a C++ program for passing structures as function arguments and returning a structure from a function.\\n#include<stdio.h>\\n#include <string.h>\\nstruct Book{\\n    char booName[100];\\n    char authorName[100];\\n};\\nstruct Book input(struct Book book){\\n    printf(\\\"Book Details \\\\n\\\");\\n    printf(\\\"Book Name : \\\");\\n    fgets(book.booName,sizeof(book.booName),stdin);\\n    printf(\\\"author Name : \\\");\\n    fgets(book.authorName,sizeof(book.authorName),stdin);\\n    return book;\\n};\\nvoid details(struct Book book){\\n    printf(\\\"\\\\nBook info \\\\n\\\\n\\\");\\n    printf(\\\"Book Name   : %s\\\",book.booName);\\n    printf(\\\"author Name : %s\\\",book.authorName);\\n}\\nint main(){\\n    struct Book a;\\n    a=input(a);\\n    details(a);\\n}\\n\")), mdx(\"h3\", null, \"Output\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"Book Details\\nBook Name : funycode\\nauthor Name : C C++ JAVA\\n\\nBook info\\n\\nBook Name   : funycode\\nauthor Name : C C++ JAVA\\n\")), mdx(\"h2\", null, \"C++ Implementation\"), mdx(\"h3\", null, \"10. Write a C++ program for passing structures as function arguments and returning a structure from a function.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-c\"\n  }, \"//Write a C++ program to find for passing structures as function arguments and returning a structure from a function.\\n\\n#include<iostream>\\n#include <string.h>\\nusing namespace std;\\nstruct Book{\\n    char booName[100];\\n    char authorName[100];\\n};\\nstruct Book input(struct Book book){\\n    cout << \\\"Book Details \\\\n\\\";\\n    cout << \\\"Book Name : \\\";\\n    fgets(book.booName,sizeof(book.booName),stdin);\\n    cout << \\\"author Name : \\\";\\n    fgets(book.authorName,sizeof(book.authorName),stdin);\\n    return book;\\n};\\nvoid details(struct Book book){\\n    cout << \\\"\\\\nBook info \\\\n\\\\n\\\";\\n    cout << \\\"Book Name   : \\\"<<book.booName;\\n    cout << \\\"author Name : \\\"<<book.authorName;\\n}\\nint main(){\\n    struct Book a;\\n    a=input(a);\\n    details(a);\\n}\\n\")), mdx(\"h3\", null, \"Output\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"Book Details\\nBook Name : funycode\\nauthor Name : C C++ JAVA\\n\\nBook info\\n\\nBook Name   : funycode\\nauthor Name : C C++ JAVA\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"Write a C/C++/Java program for passing structures as function arguments and returning a structure from a function.\",\n  \"category\": \"Structure And Union Index\",\n  \"tags\": [\"#c\", \"#c++\", \"#java\", \"#tutorial\"],\n  \"date\": \"2020-04-16T00:00:00.000Z\",\n  \"thumbnailText\": \"Index\"\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h2>{`C Implementation`}</h2>\n    <h3>{`10. Write a C program for passing structures as function arguments and returning a structure from a function.`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-c\"\n      }}>{`//Write a C++ program for passing structures as function arguments and returning a structure from a function.\n#include<stdio.h>\n#include <string.h>\nstruct Book{\n    char booName[100];\n    char authorName[100];\n};\nstruct Book input(struct Book book){\n    printf(\"Book Details \\\\n\");\n    printf(\"Book Name : \");\n    fgets(book.booName,sizeof(book.booName),stdin);\n    printf(\"author Name : \");\n    fgets(book.authorName,sizeof(book.authorName),stdin);\n    return book;\n};\nvoid details(struct Book book){\n    printf(\"\\\\nBook info \\\\n\\\\n\");\n    printf(\"Book Name   : %s\",book.booName);\n    printf(\"author Name : %s\",book.authorName);\n}\nint main(){\n    struct Book a;\n    a=input(a);\n    details(a);\n}\n`}</code></pre>\n    <h3>{`Output`}</h3>\n    <pre><code parentName=\"pre\" {...{}}>{`Book Details\nBook Name : funycode\nauthor Name : C C++ JAVA\n\nBook info\n\nBook Name   : funycode\nauthor Name : C C++ JAVA\n`}</code></pre>\n    <h2>{`C++ Implementation`}</h2>\n    <h3>{`10. Write a C++ program for passing structures as function arguments and returning a structure from a function.`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-c\"\n      }}>{`//Write a C++ program to find for passing structures as function arguments and returning a structure from a function.\n\n#include<iostream>\n#include <string.h>\nusing namespace std;\nstruct Book{\n    char booName[100];\n    char authorName[100];\n};\nstruct Book input(struct Book book){\n    cout << \"Book Details \\\\n\";\n    cout << \"Book Name : \";\n    fgets(book.booName,sizeof(book.booName),stdin);\n    cout << \"author Name : \";\n    fgets(book.authorName,sizeof(book.authorName),stdin);\n    return book;\n};\nvoid details(struct Book book){\n    cout << \"\\\\nBook info \\\\n\\\\n\";\n    cout << \"Book Name   : \"<<book.booName;\n    cout << \"author Name : \"<<book.authorName;\n}\nint main(){\n    struct Book a;\n    a=input(a);\n    details(a);\n}\n`}</code></pre>\n    <h3>{`Output`}</h3>\n    <pre><code parentName=\"pre\" {...{}}>{`Book Details\nBook Name : funycode\nauthor Name : C C++ JAVA\n\nBook info\n\nBook Name   : funycode\nauthor Name : C C++ JAVA\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}