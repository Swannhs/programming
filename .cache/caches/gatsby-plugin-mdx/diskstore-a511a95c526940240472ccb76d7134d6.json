{"expireTime":9007200883706343000,"key":"gatsby-plugin-mdx-entire-payload-ff04b1d2f90d853caa30df074c394839--undefined","val":{"mdast":{"type":"root","children":[{"type":"heading","depth":2,"children":[{"type":"text","value":"C Implementation","position":{"start":{"line":2,"column":4,"offset":5},"end":{"line":2,"column":20,"offset":21},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":2},"end":{"line":2,"column":20,"offset":21},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"43. Write a C program to Generate Fibonacci Series","position":{"start":{"line":3,"column":5,"offset":27},"end":{"line":3,"column":55,"offset":77},"indent":[]}}],"position":{"start":{"line":3,"column":1,"offset":23},"end":{"line":3,"column":55,"offset":77},"indent":[]}},{"type":"code","lang":"c","meta":null,"value":"//Write a C program to Generate Fibonacci Series\n#include<stdio.h>\n\nint fib(int n)\n{\n    int prv2=0;\n    int prv=1;\n    if(n>=1)\n        printf(\"1 \");\n    for(int i=2;i<=n;i++)\n    {\n        int tmp=prv+prv2;\n        printf(\"%d \",tmp);\n        prv2=prv;\n        prv=tmp;\n    }\n}\n\nint main()\n{\n    int n;\n    printf(\"Enter n: \");\n    scanf(\"%d\",&n);\n\n    fib(n);\n\n    return 0;\n}","position":{"start":{"line":4,"column":1,"offset":79},"end":{"line":33,"column":4,"offset":495},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Output","position":{"start":{"line":34,"column":5,"offset":501},"end":{"line":34,"column":11,"offset":507},"indent":[]}}],"position":{"start":{"line":34,"column":1,"offset":497},"end":{"line":34,"column":11,"offset":507},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"Enter n: 10\n1 1 2 3 5 8 13 21 34 55","position":{"start":{"line":35,"column":1,"offset":509},"end":{"line":38,"column":4,"offset":555},"indent":[1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"C++ Implementation","position":{"start":{"line":40,"column":4,"offset":562},"end":{"line":40,"column":22,"offset":580},"indent":[]}}],"position":{"start":{"line":40,"column":1,"offset":559},"end":{"line":40,"column":22,"offset":580},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"43. Write a C++ program to Generate Fibonacci Series","position":{"start":{"line":41,"column":5,"offset":586},"end":{"line":41,"column":57,"offset":638},"indent":[]}}],"position":{"start":{"line":41,"column":1,"offset":582},"end":{"line":41,"column":57,"offset":638},"indent":[]}},{"type":"code","lang":"c","meta":null,"value":"//Write a C++ program to Generate Fibonacci Series\n\n#include<iostream>\nusing namespace std;\n\nint fib(int n)\n{\n    int prv2=0;\n    int prv=1;\n    if(n>=1)\n        printf(\"1 \");\n    for(int i=2;i<=n;i++)\n    {\n        int tmp=prv+prv2;\n        printf(\"%d \",tmp);\n        prv2=prv;\n        prv=tmp;\n    }\n}\n\nint main()\n{\n    int n;\n    cout << \"Enter n: \";\n    cin >> n;\n\n    fib(n);\n\n    return 0;\n}","position":{"start":{"line":42,"column":1,"offset":640},"end":{"line":73,"column":4,"offset":1077},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Output","position":{"start":{"line":74,"column":5,"offset":1083},"end":{"line":74,"column":11,"offset":1089},"indent":[]}}],"position":{"start":{"line":74,"column":1,"offset":1079},"end":{"line":74,"column":11,"offset":1089},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"Enter n: 10\n1 1 2 3 5 8 13 21 34 55","position":{"start":{"line":75,"column":1,"offset":1091},"end":{"line":78,"column":4,"offset":1137},"indent":[1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Java Implementation","position":{"start":{"line":80,"column":4,"offset":1144},"end":{"line":80,"column":23,"offset":1163},"indent":[]}}],"position":{"start":{"line":80,"column":1,"offset":1141},"end":{"line":80,"column":23,"offset":1163},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"43. Write a Java program to Generate Fibonacci Series","position":{"start":{"line":81,"column":5,"offset":1169},"end":{"line":81,"column":58,"offset":1222},"indent":[]}}],"position":{"start":{"line":81,"column":1,"offset":1165},"end":{"line":81,"column":58,"offset":1222},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"//Write a Java program to Generate Fibonacci Series.util.Scanner;\npublic class Funycode {\n    static int fib(int n)\n    {\n        int prv2=0;\n        int prv=1;\n        if(n>=1)\n            printf(\"1 \");\n        for(int i=2;i<=n;i++)\n        {\n            int tmp=prv+prv2;\n            printf(\"%d \",tmp);\n            prv2=prv;\n            prv=tmp;\n        }\n    }\n\n    public static void main(String[] args) {\n        Scanner z = new Scanner(System.in);\n        int n;\n        System.out.println(\"Enter n: \");\n        n = z.nextInt();\n        fib(n);\n    }\n}","position":{"start":{"line":82,"column":1,"offset":1224},"end":{"line":108,"column":4,"offset":1818},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Output","position":{"start":{"line":109,"column":5,"offset":1824},"end":{"line":109,"column":11,"offset":1830},"indent":[]}}],"position":{"start":{"line":109,"column":1,"offset":1820},"end":{"line":109,"column":11,"offset":1830},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"Enter n: 10\n1 1 2 3 5 8 13 21 34 55","position":{"start":{"line":110,"column":1,"offset":1832},"end":{"line":113,"column":4,"offset":1878},"indent":[1,1,1]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"Write a C/C++/Java program to Generate Fibonacci Series\",\"category\":\"Function Program Index\",\"tags\":[\"#c\",\"#c++\",\"#java\",\"#tutorial\"],\"date\":\"2020-04-16T00:00:00.000Z\",\"thumbnailText\":\"Index\"}","position":{"start":{"line":116,"column":1,"offset":1882},"end":{"line":116,"column":231,"offset":2112},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":116,"column":231,"offset":2112}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Write a C/C++/Java program to Generate Fibonacci Series\",\n  \"category\": \"Function Program Index\",\n  \"tags\": [\"#c\", \"#c++\", \"#java\", \"#tutorial\"],\n  \"date\": \"2020-04-16T00:00:00.000Z\",\n  \"thumbnailText\": \"Index\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"C Implementation\"), mdx(\"h3\", null, \"43. Write a C program to Generate Fibonacci Series\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-c\"\n  }, \"//Write a C program to Generate Fibonacci Series\\n#include<stdio.h>\\n\\nint fib(int n)\\n{\\n    int prv2=0;\\n    int prv=1;\\n    if(n>=1)\\n        printf(\\\"1 \\\");\\n    for(int i=2;i<=n;i++)\\n    {\\n        int tmp=prv+prv2;\\n        printf(\\\"%d \\\",tmp);\\n        prv2=prv;\\n        prv=tmp;\\n    }\\n}\\n\\nint main()\\n{\\n    int n;\\n    printf(\\\"Enter n: \\\");\\n    scanf(\\\"%d\\\",&n);\\n\\n    fib(n);\\n\\n    return 0;\\n}\\n\")), mdx(\"h3\", null, \"Output\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"Enter n: 10\\n1 1 2 3 5 8 13 21 34 55\\n\")), mdx(\"h2\", null, \"C++ Implementation\"), mdx(\"h3\", null, \"43. Write a C++ program to Generate Fibonacci Series\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-c\"\n  }, \"//Write a C++ program to Generate Fibonacci Series\\n\\n#include<iostream>\\nusing namespace std;\\n\\nint fib(int n)\\n{\\n    int prv2=0;\\n    int prv=1;\\n    if(n>=1)\\n        printf(\\\"1 \\\");\\n    for(int i=2;i<=n;i++)\\n    {\\n        int tmp=prv+prv2;\\n        printf(\\\"%d \\\",tmp);\\n        prv2=prv;\\n        prv=tmp;\\n    }\\n}\\n\\nint main()\\n{\\n    int n;\\n    cout << \\\"Enter n: \\\";\\n    cin >> n;\\n\\n    fib(n);\\n\\n    return 0;\\n}\\n\")), mdx(\"h3\", null, \"Output\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"Enter n: 10\\n1 1 2 3 5 8 13 21 34 55\\n\")), mdx(\"h2\", null, \"Java Implementation\"), mdx(\"h3\", null, \"43. Write a Java program to Generate Fibonacci Series\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"//Write a Java program to Generate Fibonacci Series.util.Scanner;\\npublic class Funycode {\\n    static int fib(int n)\\n    {\\n        int prv2=0;\\n        int prv=1;\\n        if(n>=1)\\n            printf(\\\"1 \\\");\\n        for(int i=2;i<=n;i++)\\n        {\\n            int tmp=prv+prv2;\\n            printf(\\\"%d \\\",tmp);\\n            prv2=prv;\\n            prv=tmp;\\n        }\\n    }\\n\\n    public static void main(String[] args) {\\n        Scanner z = new Scanner(System.in);\\n        int n;\\n        System.out.println(\\\"Enter n: \\\");\\n        n = z.nextInt();\\n        fib(n);\\n    }\\n}\\n\")), mdx(\"h3\", null, \"Output\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"Enter n: 10\\n1 1 2 3 5 8 13 21 34 55\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"Write a C/C++/Java program to Generate Fibonacci Series\",\n  \"category\": \"Function Program Index\",\n  \"tags\": [\"#c\", \"#c++\", \"#java\", \"#tutorial\"],\n  \"date\": \"2020-04-16T00:00:00.000Z\",\n  \"thumbnailText\": \"Index\"\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h2>{`C Implementation`}</h2>\n    <h3>{`43. Write a C program to Generate Fibonacci Series`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-c\"\n      }}>{`//Write a C program to Generate Fibonacci Series\n#include<stdio.h>\n\nint fib(int n)\n{\n    int prv2=0;\n    int prv=1;\n    if(n>=1)\n        printf(\"1 \");\n    for(int i=2;i<=n;i++)\n    {\n        int tmp=prv+prv2;\n        printf(\"%d \",tmp);\n        prv2=prv;\n        prv=tmp;\n    }\n}\n\nint main()\n{\n    int n;\n    printf(\"Enter n: \");\n    scanf(\"%d\",&n);\n\n    fib(n);\n\n    return 0;\n}\n`}</code></pre>\n    <h3>{`Output`}</h3>\n    <pre><code parentName=\"pre\" {...{}}>{`Enter n: 10\n1 1 2 3 5 8 13 21 34 55\n`}</code></pre>\n    <h2>{`C++ Implementation`}</h2>\n    <h3>{`43. Write a C++ program to Generate Fibonacci Series`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-c\"\n      }}>{`//Write a C++ program to Generate Fibonacci Series\n\n#include<iostream>\nusing namespace std;\n\nint fib(int n)\n{\n    int prv2=0;\n    int prv=1;\n    if(n>=1)\n        printf(\"1 \");\n    for(int i=2;i<=n;i++)\n    {\n        int tmp=prv+prv2;\n        printf(\"%d \",tmp);\n        prv2=prv;\n        prv=tmp;\n    }\n}\n\nint main()\n{\n    int n;\n    cout << \"Enter n: \";\n    cin >> n;\n\n    fib(n);\n\n    return 0;\n}\n`}</code></pre>\n    <h3>{`Output`}</h3>\n    <pre><code parentName=\"pre\" {...{}}>{`Enter n: 10\n1 1 2 3 5 8 13 21 34 55\n`}</code></pre>\n    <h2>{`Java Implementation`}</h2>\n    <h3>{`43. Write a Java program to Generate Fibonacci Series`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`//Write a Java program to Generate Fibonacci Series.util.Scanner;\npublic class Funycode {\n    static int fib(int n)\n    {\n        int prv2=0;\n        int prv=1;\n        if(n>=1)\n            printf(\"1 \");\n        for(int i=2;i<=n;i++)\n        {\n            int tmp=prv+prv2;\n            printf(\"%d \",tmp);\n            prv2=prv;\n            prv=tmp;\n        }\n    }\n\n    public static void main(String[] args) {\n        Scanner z = new Scanner(System.in);\n        int n;\n        System.out.println(\"Enter n: \");\n        n = z.nextInt();\n        fib(n);\n    }\n}\n`}</code></pre>\n    <h3>{`Output`}</h3>\n    <pre><code parentName=\"pre\" {...{}}>{`Enter n: 10\n1 1 2 3 5 8 13 21 34 55\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}