{"expireTime":9007200883718621000,"key":"gatsby-plugin-mdx-entire-payload-773d7d3115b71cc568ca036b4f631d60--undefined","val":{"mdast":{"type":"root","children":[{"type":"heading","depth":2,"children":[{"type":"text","value":"C Implementation","position":{"start":{"line":2,"column":4,"offset":5},"end":{"line":2,"column":20,"offset":21},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":2},"end":{"line":2,"column":20,"offset":21},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"28. Write a C program to check whether a character is digit or not.","position":{"start":{"line":3,"column":5,"offset":27},"end":{"line":3,"column":72,"offset":94},"indent":[]}}],"position":{"start":{"line":3,"column":1,"offset":23},"end":{"line":3,"column":72,"offset":94},"indent":[]}},{"type":"code","lang":"c","meta":null,"value":"//Write a C program to check whether a character is digit or not.\n#include <stdio.h>\n#include <string.h>\n#define MAX_SIZE 100\n\nint main()\n{\n    char str[MAX_SIZE];\n    char word[MAX_SIZE];\n    int i, j, found;\n    int strLen, wordLen;\n    printf(\"Enter any string: \");\n    gets(str);\n    printf(\"Enter any word to search: \");\n    gets(word);\n\n    strLen  = strlen(str);\n    wordLen = strlen(word);\n    for(i=0; i<strLen - wordLen; i++)\n    {\n\n        found = 1;\n        for(j=0; j<wordLen; j++)\n        {\n\n            if(str[i + j] != word[j])\n            {\n                found = 0;\n                break;\n            }\n        }\n        if(found == 1)\n        {\n            printf(\"'%s' found at index: %d \\n\", word, i);\n        }\n    }\n\n    return 0;\n}","position":{"start":{"line":4,"column":1,"offset":96},"end":{"line":44,"column":4,"offset":901},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Output","position":{"start":{"line":45,"column":5,"offset":907},"end":{"line":45,"column":11,"offset":913},"indent":[]}}],"position":{"start":{"line":45,"column":1,"offset":903},"end":{"line":45,"column":11,"offset":913},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"Enter any string: hello from funycode\nEnter any word to search: hello\n'hello' found at index: 0","position":{"start":{"line":46,"column":1,"offset":915},"end":{"line":50,"column":4,"offset":1022},"indent":[1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"C++ Implementation","position":{"start":{"line":51,"column":4,"offset":1027},"end":{"line":51,"column":22,"offset":1045},"indent":[]}}],"position":{"start":{"line":51,"column":1,"offset":1024},"end":{"line":51,"column":22,"offset":1045},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"28. Write a C++ program to check whether a character is digit or not.","position":{"start":{"line":52,"column":5,"offset":1051},"end":{"line":52,"column":74,"offset":1120},"indent":[]}}],"position":{"start":{"line":52,"column":1,"offset":1047},"end":{"line":52,"column":74,"offset":1120},"indent":[]}},{"type":"code","lang":"c","meta":null,"value":"//Write a C++ program to check whether a character is digit or not.\n\n#include <iostream>\n#include <string.h>\nusing namespace std;\nint main()\n{\n    char str[100];\n    char word[100];\n    int i, j, found;\n    int strLen, wordLen;\n    cout << \"Enter any string: \";\n    cin >> str;\n    cout << \"Enter any word to search: \";\n    cin >> word;\n    strLen  = strlen(str);\n    wordLen = strlen(word);\n    for(i=0; i<strLen - wordLen; i++)\n    {\n        found = 1;\n        for(j=0; j<wordLen; j++)\n        {\n            if(str[i + j] != word[j])\n            {\n                found = 0;\n                break;\n            }\n        }\n        if(found == 1)\n        {\n            cin >> word << \" found at index: \" << i;\n        }\n    }\n    return 0;\n}","position":{"start":{"line":53,"column":1,"offset":1122},"end":{"line":89,"column":4,"offset":1908},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Output","position":{"start":{"line":90,"column":5,"offset":1914},"end":{"line":90,"column":11,"offset":1920},"indent":[]}}],"position":{"start":{"line":90,"column":1,"offset":1910},"end":{"line":90,"column":11,"offset":1920},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"Enter any string: hello from funycode\nEnter any word to search: hello\n'hello' found at index: 0","position":{"start":{"line":91,"column":1,"offset":1922},"end":{"line":95,"column":4,"offset":2029},"indent":[1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Java Implementation","position":{"start":{"line":97,"column":4,"offset":2036},"end":{"line":97,"column":23,"offset":2055},"indent":[]}}],"position":{"start":{"line":97,"column":1,"offset":2033},"end":{"line":97,"column":23,"offset":2055},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"28. Write a Java program to check whether a character is digit or not.","position":{"start":{"line":98,"column":5,"offset":2061},"end":{"line":98,"column":75,"offset":2131},"indent":[]}}],"position":{"start":{"line":98,"column":1,"offset":2057},"end":{"line":98,"column":75,"offset":2131},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"//Write a Java program to check whether a character is digit or not.\nimport java.util.Scanner;\npublic class Funycode {\n    public static void main(String[] args) {\n        Scanner z=new Scanner(System.in);\n        System.out.println(\"Enter a character: \");\n        char str[100];\n        char word[100];\n        int i, j, found;\n        int strLen, wordLen;\n        System.out.println(\"Enter any string: \");\n        str = z.nextLine();\n        System.out.println(\"Enter any word to search: \");\n        word = z.nextLine();\n        strLen  = str.length();\n        wordLen = word.length();\n        for(i=0; i < strLen - wordLen; i++)\n        {\n            found = 1;\n            for(j=0; j<wordLen; j++)\n            {\n                if(str[i + j] != word[j])\n                {\n                    found = 0;\n                    break;\n                }\n            }\n            if(found == 1)\n            {\n                System.out.println(word + \" found at index: \"+ i);\n            }\n        }\n    }\n}","position":{"start":{"line":99,"column":1,"offset":2133},"end":{"line":134,"column":4,"offset":3183},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Output","position":{"start":{"line":135,"column":5,"offset":3189},"end":{"line":135,"column":11,"offset":3195},"indent":[]}}],"position":{"start":{"line":135,"column":1,"offset":3185},"end":{"line":135,"column":11,"offset":3195},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"Enter any string: hello from funycode\nEnter any word to search: hello\n'hello' found at index: 0","position":{"start":{"line":136,"column":1,"offset":3197},"end":{"line":140,"column":4,"offset":3304},"indent":[1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"Write a C/C++/Java program to check whether a character is digit or not.\",\"category\":\"String Index\",\"tags\":[\"string\"],\"date\":\"2020-04-16T00:00:00.000Z\",\"thumbnailText\":\"Index\"}","position":{"start":{"line":143,"column":1,"offset":3308},"end":{"line":143,"column":215,"offset":3522},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":143,"column":215,"offset":3522}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Write a C/C++/Java program to check whether a character is digit or not.\",\n  \"category\": \"String Index\",\n  \"tags\": [\"string\"],\n  \"date\": \"2020-04-16T00:00:00.000Z\",\n  \"thumbnailText\": \"Index\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"C Implementation\"), mdx(\"h3\", null, \"28. Write a C program to check whether a character is digit or not.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-c\"\n  }, \"//Write a C program to check whether a character is digit or not.\\n#include <stdio.h>\\n#include <string.h>\\n#define MAX_SIZE 100\\n\\nint main()\\n{\\n    char str[MAX_SIZE];\\n    char word[MAX_SIZE];\\n    int i, j, found;\\n    int strLen, wordLen;\\n    printf(\\\"Enter any string: \\\");\\n    gets(str);\\n    printf(\\\"Enter any word to search: \\\");\\n    gets(word);\\n\\n    strLen  = strlen(str);\\n    wordLen = strlen(word);\\n    for(i=0; i<strLen - wordLen; i++)\\n    {\\n\\n        found = 1;\\n        for(j=0; j<wordLen; j++)\\n        {\\n\\n            if(str[i + j] != word[j])\\n            {\\n                found = 0;\\n                break;\\n            }\\n        }\\n        if(found == 1)\\n        {\\n            printf(\\\"'%s' found at index: %d \\\\n\\\", word, i);\\n        }\\n    }\\n\\n    return 0;\\n}\\n\")), mdx(\"h3\", null, \"Output\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"Enter any string: hello from funycode\\nEnter any word to search: hello\\n'hello' found at index: 0\\n\")), mdx(\"h2\", null, \"C++ Implementation\"), mdx(\"h3\", null, \"28. Write a C++ program to check whether a character is digit or not.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-c\"\n  }, \"//Write a C++ program to check whether a character is digit or not.\\n\\n#include <iostream>\\n#include <string.h>\\nusing namespace std;\\nint main()\\n{\\n    char str[100];\\n    char word[100];\\n    int i, j, found;\\n    int strLen, wordLen;\\n    cout << \\\"Enter any string: \\\";\\n    cin >> str;\\n    cout << \\\"Enter any word to search: \\\";\\n    cin >> word;\\n    strLen  = strlen(str);\\n    wordLen = strlen(word);\\n    for(i=0; i<strLen - wordLen; i++)\\n    {\\n        found = 1;\\n        for(j=0; j<wordLen; j++)\\n        {\\n            if(str[i + j] != word[j])\\n            {\\n                found = 0;\\n                break;\\n            }\\n        }\\n        if(found == 1)\\n        {\\n            cin >> word << \\\" found at index: \\\" << i;\\n        }\\n    }\\n    return 0;\\n}\\n\")), mdx(\"h3\", null, \"Output\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"Enter any string: hello from funycode\\nEnter any word to search: hello\\n'hello' found at index: 0\\n\")), mdx(\"h2\", null, \"Java Implementation\"), mdx(\"h3\", null, \"28. Write a Java program to check whether a character is digit or not.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"//Write a Java program to check whether a character is digit or not.\\nimport java.util.Scanner;\\npublic class Funycode {\\n    public static void main(String[] args) {\\n        Scanner z=new Scanner(System.in);\\n        System.out.println(\\\"Enter a character: \\\");\\n        char str[100];\\n        char word[100];\\n        int i, j, found;\\n        int strLen, wordLen;\\n        System.out.println(\\\"Enter any string: \\\");\\n        str = z.nextLine();\\n        System.out.println(\\\"Enter any word to search: \\\");\\n        word = z.nextLine();\\n        strLen  = str.length();\\n        wordLen = word.length();\\n        for(i=0; i < strLen - wordLen; i++)\\n        {\\n            found = 1;\\n            for(j=0; j<wordLen; j++)\\n            {\\n                if(str[i + j] != word[j])\\n                {\\n                    found = 0;\\n                    break;\\n                }\\n            }\\n            if(found == 1)\\n            {\\n                System.out.println(word + \\\" found at index: \\\"+ i);\\n            }\\n        }\\n    }\\n}\\n\")), mdx(\"h3\", null, \"Output\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"Enter any string: hello from funycode\\nEnter any word to search: hello\\n'hello' found at index: 0\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"Write a C/C++/Java program to check whether a character is digit or not.\",\n  \"category\": \"String Index\",\n  \"tags\": [\"string\"],\n  \"date\": \"2020-04-16T00:00:00.000Z\",\n  \"thumbnailText\": \"Index\"\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h2>{`C Implementation`}</h2>\n    <h3>{`28. Write a C program to check whether a character is digit or not.`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-c\"\n      }}>{`//Write a C program to check whether a character is digit or not.\n#include <stdio.h>\n#include <string.h>\n#define MAX_SIZE 100\n\nint main()\n{\n    char str[MAX_SIZE];\n    char word[MAX_SIZE];\n    int i, j, found;\n    int strLen, wordLen;\n    printf(\"Enter any string: \");\n    gets(str);\n    printf(\"Enter any word to search: \");\n    gets(word);\n\n    strLen  = strlen(str);\n    wordLen = strlen(word);\n    for(i=0; i<strLen - wordLen; i++)\n    {\n\n        found = 1;\n        for(j=0; j<wordLen; j++)\n        {\n\n            if(str[i + j] != word[j])\n            {\n                found = 0;\n                break;\n            }\n        }\n        if(found == 1)\n        {\n            printf(\"'%s' found at index: %d \\\\n\", word, i);\n        }\n    }\n\n    return 0;\n}\n`}</code></pre>\n    <h3>{`Output`}</h3>\n    <pre><code parentName=\"pre\" {...{}}>{`Enter any string: hello from funycode\nEnter any word to search: hello\n'hello' found at index: 0\n`}</code></pre>\n    <h2>{`C++ Implementation`}</h2>\n    <h3>{`28. Write a C++ program to check whether a character is digit or not.`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-c\"\n      }}>{`//Write a C++ program to check whether a character is digit or not.\n\n#include <iostream>\n#include <string.h>\nusing namespace std;\nint main()\n{\n    char str[100];\n    char word[100];\n    int i, j, found;\n    int strLen, wordLen;\n    cout << \"Enter any string: \";\n    cin >> str;\n    cout << \"Enter any word to search: \";\n    cin >> word;\n    strLen  = strlen(str);\n    wordLen = strlen(word);\n    for(i=0; i<strLen - wordLen; i++)\n    {\n        found = 1;\n        for(j=0; j<wordLen; j++)\n        {\n            if(str[i + j] != word[j])\n            {\n                found = 0;\n                break;\n            }\n        }\n        if(found == 1)\n        {\n            cin >> word << \" found at index: \" << i;\n        }\n    }\n    return 0;\n}\n`}</code></pre>\n    <h3>{`Output`}</h3>\n    <pre><code parentName=\"pre\" {...{}}>{`Enter any string: hello from funycode\nEnter any word to search: hello\n'hello' found at index: 0\n`}</code></pre>\n    <h2>{`Java Implementation`}</h2>\n    <h3>{`28. Write a Java program to check whether a character is digit or not.`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`//Write a Java program to check whether a character is digit or not.\nimport java.util.Scanner;\npublic class Funycode {\n    public static void main(String[] args) {\n        Scanner z=new Scanner(System.in);\n        System.out.println(\"Enter a character: \");\n        char str[100];\n        char word[100];\n        int i, j, found;\n        int strLen, wordLen;\n        System.out.println(\"Enter any string: \");\n        str = z.nextLine();\n        System.out.println(\"Enter any word to search: \");\n        word = z.nextLine();\n        strLen  = str.length();\n        wordLen = word.length();\n        for(i=0; i < strLen - wordLen; i++)\n        {\n            found = 1;\n            for(j=0; j<wordLen; j++)\n            {\n                if(str[i + j] != word[j])\n                {\n                    found = 0;\n                    break;\n                }\n            }\n            if(found == 1)\n            {\n                System.out.println(word + \" found at index: \"+ i);\n            }\n        }\n    }\n}\n`}</code></pre>\n    <h3>{`Output`}</h3>\n    <pre><code parentName=\"pre\" {...{}}>{`Enter any string: hello from funycode\nEnter any word to search: hello\n'hello' found at index: 0\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}