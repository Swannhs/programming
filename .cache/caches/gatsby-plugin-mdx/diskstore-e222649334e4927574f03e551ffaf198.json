{"expireTime":9007200883706342000,"key":"gatsby-plugin-mdx-entire-payload-2de08f1a68e2294c54de278f2682288a--undefined","val":{"mdast":{"type":"root","children":[{"type":"heading","depth":2,"children":[{"type":"text","value":"C Implementation","position":{"start":{"line":2,"column":4,"offset":5},"end":{"line":2,"column":20,"offset":21},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":2},"end":{"line":2,"column":20,"offset":21},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"38. Write a C program to find transpose of a matrix.","position":{"start":{"line":3,"column":5,"offset":27},"end":{"line":3,"column":57,"offset":79},"indent":[]}}],"position":{"start":{"line":3,"column":1,"offset":23},"end":{"line":3,"column":57,"offset":79},"indent":[]}},{"type":"code","lang":"c","meta":null,"value":"//Write a C program to find transpose of a matrix.\n#include <stdio.h>\nvoid main ()\n{\n    int array1[3][3], transpose[3][3],i,j,a,b,c,p,q,r;\n    printf(\"Enter 9 co-efficients of the matrix- \\n\");\n    for (i = 0; i < 3; ++i)\n    {\n        for (j = 0; j < 3; ++j)\n        {\n            scanf(\"%d,\", &array1[i][j]);\n        }\n    }\n    printf(\"The given matrix is \\n\");\n    for (i = 0; i < 3; ++i)\n    {\n        for (j = 0; j < 3; ++j)\n            printf(\" %d\", array1[i][j]);\n        printf(\"\\n\");\n    }\n    for (i = 0; i < 3; ++i)\n        for (j = 0; j < 3; ++j)\n        {\n            transpose[j][i] = array1[i][j];\n        }\n    printf(\"\\nTranspose of the matrix:\\n\");\n    for (i = 0; i < 3; ++i)\n        for (j = 0; j < 3; ++j)\n        {\n            printf(\"%d  \", transpose[i][j]);\n            if (j == 3 - 1)\n                printf(\"\\n\");\n        }\n}","position":{"start":{"line":4,"column":1,"offset":81},"end":{"line":39,"column":4,"offset":978},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Output","position":{"start":{"line":40,"column":5,"offset":984},"end":{"line":40,"column":11,"offset":990},"indent":[]}}],"position":{"start":{"line":40,"column":1,"offset":980},"end":{"line":40,"column":11,"offset":990},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"Enter 9 co-efficients of the matrix-\n1 2 3 4 5 6 7 8 9\nThe given matrix is\n 1 2 3\n 4 5 6\n 7 8 9\n\nTranspose of the matrix:\n1  4  7\n2  5  8\n3  6  9","position":{"start":{"line":41,"column":1,"offset":992},"end":{"line":53,"column":4,"offset":1157},"indent":[1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"C++ Implementation","position":{"start":{"line":54,"column":4,"offset":1162},"end":{"line":54,"column":22,"offset":1180},"indent":[]}}],"position":{"start":{"line":54,"column":1,"offset":1159},"end":{"line":54,"column":22,"offset":1180},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"38. Write a C++ program to find transpose of a matrix.","position":{"start":{"line":55,"column":5,"offset":1186},"end":{"line":55,"column":59,"offset":1240},"indent":[]}}],"position":{"start":{"line":55,"column":1,"offset":1182},"end":{"line":55,"column":59,"offset":1240},"indent":[]}},{"type":"code","lang":"c","meta":null,"value":"//Write a C++ program to find transpose of a matrix.\n\n#include <iostream>\nusing namespace std;\nint  main()\n{\n    int array1[3][3], transpose[3][3],i,j,a,b,c,p,q,r;\n    cout << \"Enter 9 co-efficients of the matrix-\\n\";\n    for (i = 0; i < 3; ++i)\n    {\n        for (j = 0; j < 3; ++j)\n        {\n            cin >> array[i][j];\n        }\n    }\n    cout << \"The given matrix is \\n\";\n    for (i = 0; i < 3; ++i)\n    {\n        for (j = 0; j < 3; ++j)\n            cout << \"\\t\" << arr1[i][j];\n        cout << \"\\n\";\n    }\n    for (i = 0; i < 3; ++i)\n        for (j = 0; j < 3; ++j)\n        {\n            transpose[j][i] = array1[i][j];\n        }\n    cout << \"\\nTranspose of the matrix:\\n\";\n    for (i = 0; i < 3; ++i)\n        for (j = 0; j < 3; ++j)\n        {\n            cout << \"  \" << transpose[i][j];\n            if (j == 3 - 1)\n                cout << \"\\n\";\n    }\n}","position":{"start":{"line":56,"column":1,"offset":1242},"end":{"line":93,"column":4,"offset":2150},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Output","position":{"start":{"line":94,"column":5,"offset":2156},"end":{"line":94,"column":11,"offset":2162},"indent":[]}}],"position":{"start":{"line":94,"column":1,"offset":2152},"end":{"line":94,"column":11,"offset":2162},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"Enter 9 co-efficients of the matrix-\n1 2 3 4 5 6 7 8 9\nThe given matrix is\n 1 2 3\n 4 5 6\n 7 8 9\n\nTranspose of the matrix:\n1  4  7\n2  5  8\n3  6  9","position":{"start":{"line":95,"column":1,"offset":2164},"end":{"line":107,"column":4,"offset":2329},"indent":[1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Java Implementation","position":{"start":{"line":109,"column":4,"offset":2336},"end":{"line":109,"column":23,"offset":2355},"indent":[]}}],"position":{"start":{"line":109,"column":1,"offset":2333},"end":{"line":109,"column":23,"offset":2355},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"38. Write a Java program to find transpose of a matrix.","position":{"start":{"line":110,"column":5,"offset":2361},"end":{"line":110,"column":60,"offset":2416},"indent":[]}}],"position":{"start":{"line":110,"column":1,"offset":2357},"end":{"line":110,"column":60,"offset":2416},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"//Write a Java program to find transpose of a matrix.\nimport java.util.Scanner;\npublic class Funycode {\n    public static void main(String[] args) {\n          Scanner z=new Scanner(System.in);\n          int array1[][]= new int[3][3], transpose[][]= new int[3][3],i,j,a,b,c,p,q,r;\n          System.out.printf(\"Enter 9 co-efficients of the matrix-\\n\");\n          for (i = 0; i < 3; ++i)\n          {\n              for (j = 0; j < 3; ++j)\n              {\n                  array[i][j] = z.nextInt();\n              }\n          }\n          System.out.printf(\"The given matrix is \\n\");\n          for (i = 0; i < 3; ++i)\n          {\n              for (j = 0; j < 3; ++j)\n                  System.out.printf(\"\\t\"+array[i][j]);\n              System.out.printf(\"\\n\");\n          }\n          for (i = 0; i < 3; ++i)\n              for (j = 0; j < 3; ++j)\n              {\n                  transpose[j][i] = array1[i][j];\n              }\n          System.out.printf(\"\\nTranspose of the matrix:\\n\");\n          for (i = 0; i < 3; ++i)\n              for (j = 0; j < 3; ++j)\n              {\n                  System.out.printf(\"\\t\"+transpose[i][j]);\n                  if (j == 3 - 1)\n                      System.out.printf(\"\\n\");\n              }\n      }\n}","position":{"start":{"line":111,"column":1,"offset":2418},"end":{"line":148,"column":4,"offset":3702},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Output","position":{"start":{"line":149,"column":5,"offset":3708},"end":{"line":149,"column":11,"offset":3714},"indent":[]}}],"position":{"start":{"line":149,"column":1,"offset":3704},"end":{"line":149,"column":11,"offset":3714},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"Enter 9 co-efficients of the matrix-\n1 2 3 4 5 6 7 8 9\nThe given matrix is\n 1 2 3\n 4 5 6\n 7 8 9\n\nTranspose of the matrix:\n1  4  7\n2  5  8\n3  6  9","position":{"start":{"line":150,"column":1,"offset":3716},"end":{"line":162,"column":4,"offset":3881},"indent":[1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"Write a C/C++/Java program to find transpose of a matrix.\",\"category\":\"Array Program Index\",\"tags\":[\"#c\",\"#c++\",\"#java\",\"#tutorial\"],\"date\":\"2020-04-16T00:00:00.000Z\",\"thumbnailText\":\"Index\"}","position":{"start":{"line":165,"column":1,"offset":3885},"end":{"line":165,"column":230,"offset":4114},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":165,"column":230,"offset":4114}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Write a C/C++/Java program to find transpose of a matrix.\",\n  \"category\": \"Array Program Index\",\n  \"tags\": [\"#c\", \"#c++\", \"#java\", \"#tutorial\"],\n  \"date\": \"2020-04-16T00:00:00.000Z\",\n  \"thumbnailText\": \"Index\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"C Implementation\"), mdx(\"h3\", null, \"38. Write a C program to find transpose of a matrix.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-c\"\n  }, \"//Write a C program to find transpose of a matrix.\\n#include <stdio.h>\\nvoid main ()\\n{\\n    int array1[3][3], transpose[3][3],i,j,a,b,c,p,q,r;\\n    printf(\\\"Enter 9 co-efficients of the matrix- \\\\n\\\");\\n    for (i = 0; i < 3; ++i)\\n    {\\n        for (j = 0; j < 3; ++j)\\n        {\\n            scanf(\\\"%d,\\\", &array1[i][j]);\\n        }\\n    }\\n    printf(\\\"The given matrix is \\\\n\\\");\\n    for (i = 0; i < 3; ++i)\\n    {\\n        for (j = 0; j < 3; ++j)\\n            printf(\\\" %d\\\", array1[i][j]);\\n        printf(\\\"\\\\n\\\");\\n    }\\n    for (i = 0; i < 3; ++i)\\n        for (j = 0; j < 3; ++j)\\n        {\\n            transpose[j][i] = array1[i][j];\\n        }\\n    printf(\\\"\\\\nTranspose of the matrix:\\\\n\\\");\\n    for (i = 0; i < 3; ++i)\\n        for (j = 0; j < 3; ++j)\\n        {\\n            printf(\\\"%d  \\\", transpose[i][j]);\\n            if (j == 3 - 1)\\n                printf(\\\"\\\\n\\\");\\n        }\\n}\\n\")), mdx(\"h3\", null, \"Output\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"Enter 9 co-efficients of the matrix-\\n1 2 3 4 5 6 7 8 9\\nThe given matrix is\\n 1 2 3\\n 4 5 6\\n 7 8 9\\n\\nTranspose of the matrix:\\n1  4  7\\n2  5  8\\n3  6  9\\n\")), mdx(\"h2\", null, \"C++ Implementation\"), mdx(\"h3\", null, \"38. Write a C++ program to find transpose of a matrix.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-c\"\n  }, \"//Write a C++ program to find transpose of a matrix.\\n\\n#include <iostream>\\nusing namespace std;\\nint  main()\\n{\\n    int array1[3][3], transpose[3][3],i,j,a,b,c,p,q,r;\\n    cout << \\\"Enter 9 co-efficients of the matrix-\\\\n\\\";\\n    for (i = 0; i < 3; ++i)\\n    {\\n        for (j = 0; j < 3; ++j)\\n        {\\n            cin >> array[i][j];\\n        }\\n    }\\n    cout << \\\"The given matrix is \\\\n\\\";\\n    for (i = 0; i < 3; ++i)\\n    {\\n        for (j = 0; j < 3; ++j)\\n            cout << \\\"\\\\t\\\" << arr1[i][j];\\n        cout << \\\"\\\\n\\\";\\n    }\\n    for (i = 0; i < 3; ++i)\\n        for (j = 0; j < 3; ++j)\\n        {\\n            transpose[j][i] = array1[i][j];\\n        }\\n    cout << \\\"\\\\nTranspose of the matrix:\\\\n\\\";\\n    for (i = 0; i < 3; ++i)\\n        for (j = 0; j < 3; ++j)\\n        {\\n            cout << \\\"  \\\" << transpose[i][j];\\n            if (j == 3 - 1)\\n                cout << \\\"\\\\n\\\";\\n    }\\n}\\n\")), mdx(\"h3\", null, \"Output\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"Enter 9 co-efficients of the matrix-\\n1 2 3 4 5 6 7 8 9\\nThe given matrix is\\n 1 2 3\\n 4 5 6\\n 7 8 9\\n\\nTranspose of the matrix:\\n1  4  7\\n2  5  8\\n3  6  9\\n\")), mdx(\"h2\", null, \"Java Implementation\"), mdx(\"h3\", null, \"38. Write a Java program to find transpose of a matrix.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"//Write a Java program to find transpose of a matrix.\\nimport java.util.Scanner;\\npublic class Funycode {\\n    public static void main(String[] args) {\\n          Scanner z=new Scanner(System.in);\\n          int array1[][]= new int[3][3], transpose[][]= new int[3][3],i,j,a,b,c,p,q,r;\\n          System.out.printf(\\\"Enter 9 co-efficients of the matrix-\\\\n\\\");\\n          for (i = 0; i < 3; ++i)\\n          {\\n              for (j = 0; j < 3; ++j)\\n              {\\n                  array[i][j] = z.nextInt();\\n              }\\n          }\\n          System.out.printf(\\\"The given matrix is \\\\n\\\");\\n          for (i = 0; i < 3; ++i)\\n          {\\n              for (j = 0; j < 3; ++j)\\n                  System.out.printf(\\\"\\\\t\\\"+array[i][j]);\\n              System.out.printf(\\\"\\\\n\\\");\\n          }\\n          for (i = 0; i < 3; ++i)\\n              for (j = 0; j < 3; ++j)\\n              {\\n                  transpose[j][i] = array1[i][j];\\n              }\\n          System.out.printf(\\\"\\\\nTranspose of the matrix:\\\\n\\\");\\n          for (i = 0; i < 3; ++i)\\n              for (j = 0; j < 3; ++j)\\n              {\\n                  System.out.printf(\\\"\\\\t\\\"+transpose[i][j]);\\n                  if (j == 3 - 1)\\n                      System.out.printf(\\\"\\\\n\\\");\\n              }\\n      }\\n}\\n\")), mdx(\"h3\", null, \"Output\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"Enter 9 co-efficients of the matrix-\\n1 2 3 4 5 6 7 8 9\\nThe given matrix is\\n 1 2 3\\n 4 5 6\\n 7 8 9\\n\\nTranspose of the matrix:\\n1  4  7\\n2  5  8\\n3  6  9\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"Write a C/C++/Java program to find transpose of a matrix.\",\n  \"category\": \"Array Program Index\",\n  \"tags\": [\"#c\", \"#c++\", \"#java\", \"#tutorial\"],\n  \"date\": \"2020-04-16T00:00:00.000Z\",\n  \"thumbnailText\": \"Index\"\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h2>{`C Implementation`}</h2>\n    <h3>{`38. Write a C program to find transpose of a matrix.`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-c\"\n      }}>{`//Write a C program to find transpose of a matrix.\n#include <stdio.h>\nvoid main ()\n{\n    int array1[3][3], transpose[3][3],i,j,a,b,c,p,q,r;\n    printf(\"Enter 9 co-efficients of the matrix- \\\\n\");\n    for (i = 0; i < 3; ++i)\n    {\n        for (j = 0; j < 3; ++j)\n        {\n            scanf(\"%d,\", &array1[i][j]);\n        }\n    }\n    printf(\"The given matrix is \\\\n\");\n    for (i = 0; i < 3; ++i)\n    {\n        for (j = 0; j < 3; ++j)\n            printf(\" %d\", array1[i][j]);\n        printf(\"\\\\n\");\n    }\n    for (i = 0; i < 3; ++i)\n        for (j = 0; j < 3; ++j)\n        {\n            transpose[j][i] = array1[i][j];\n        }\n    printf(\"\\\\nTranspose of the matrix:\\\\n\");\n    for (i = 0; i < 3; ++i)\n        for (j = 0; j < 3; ++j)\n        {\n            printf(\"%d  \", transpose[i][j]);\n            if (j == 3 - 1)\n                printf(\"\\\\n\");\n        }\n}\n`}</code></pre>\n    <h3>{`Output`}</h3>\n    <pre><code parentName=\"pre\" {...{}}>{`Enter 9 co-efficients of the matrix-\n1 2 3 4 5 6 7 8 9\nThe given matrix is\n 1 2 3\n 4 5 6\n 7 8 9\n\nTranspose of the matrix:\n1  4  7\n2  5  8\n3  6  9\n`}</code></pre>\n    <h2>{`C++ Implementation`}</h2>\n    <h3>{`38. Write a C++ program to find transpose of a matrix.`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-c\"\n      }}>{`//Write a C++ program to find transpose of a matrix.\n\n#include <iostream>\nusing namespace std;\nint  main()\n{\n    int array1[3][3], transpose[3][3],i,j,a,b,c,p,q,r;\n    cout << \"Enter 9 co-efficients of the matrix-\\\\n\";\n    for (i = 0; i < 3; ++i)\n    {\n        for (j = 0; j < 3; ++j)\n        {\n            cin >> array[i][j];\n        }\n    }\n    cout << \"The given matrix is \\\\n\";\n    for (i = 0; i < 3; ++i)\n    {\n        for (j = 0; j < 3; ++j)\n            cout << \"\\\\t\" << arr1[i][j];\n        cout << \"\\\\n\";\n    }\n    for (i = 0; i < 3; ++i)\n        for (j = 0; j < 3; ++j)\n        {\n            transpose[j][i] = array1[i][j];\n        }\n    cout << \"\\\\nTranspose of the matrix:\\\\n\";\n    for (i = 0; i < 3; ++i)\n        for (j = 0; j < 3; ++j)\n        {\n            cout << \"  \" << transpose[i][j];\n            if (j == 3 - 1)\n                cout << \"\\\\n\";\n    }\n}\n`}</code></pre>\n    <h3>{`Output`}</h3>\n    <pre><code parentName=\"pre\" {...{}}>{`Enter 9 co-efficients of the matrix-\n1 2 3 4 5 6 7 8 9\nThe given matrix is\n 1 2 3\n 4 5 6\n 7 8 9\n\nTranspose of the matrix:\n1  4  7\n2  5  8\n3  6  9\n`}</code></pre>\n    <h2>{`Java Implementation`}</h2>\n    <h3>{`38. Write a Java program to find transpose of a matrix.`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`//Write a Java program to find transpose of a matrix.\nimport java.util.Scanner;\npublic class Funycode {\n    public static void main(String[] args) {\n          Scanner z=new Scanner(System.in);\n          int array1[][]= new int[3][3], transpose[][]= new int[3][3],i,j,a,b,c,p,q,r;\n          System.out.printf(\"Enter 9 co-efficients of the matrix-\\\\n\");\n          for (i = 0; i < 3; ++i)\n          {\n              for (j = 0; j < 3; ++j)\n              {\n                  array[i][j] = z.nextInt();\n              }\n          }\n          System.out.printf(\"The given matrix is \\\\n\");\n          for (i = 0; i < 3; ++i)\n          {\n              for (j = 0; j < 3; ++j)\n                  System.out.printf(\"\\\\t\"+array[i][j]);\n              System.out.printf(\"\\\\n\");\n          }\n          for (i = 0; i < 3; ++i)\n              for (j = 0; j < 3; ++j)\n              {\n                  transpose[j][i] = array1[i][j];\n              }\n          System.out.printf(\"\\\\nTranspose of the matrix:\\\\n\");\n          for (i = 0; i < 3; ++i)\n              for (j = 0; j < 3; ++j)\n              {\n                  System.out.printf(\"\\\\t\"+transpose[i][j]);\n                  if (j == 3 - 1)\n                      System.out.printf(\"\\\\n\");\n              }\n      }\n}\n`}</code></pre>\n    <h3>{`Output`}</h3>\n    <pre><code parentName=\"pre\" {...{}}>{`Enter 9 co-efficients of the matrix-\n1 2 3 4 5 6 7 8 9\nThe given matrix is\n 1 2 3\n 4 5 6\n 7 8 9\n\nTranspose of the matrix:\n1  4  7\n2  5  8\n3  6  9\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}