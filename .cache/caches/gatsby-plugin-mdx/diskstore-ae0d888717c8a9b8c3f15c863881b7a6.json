{"expireTime":9007200883706346000,"key":"gatsby-plugin-mdx-entire-payload-bf93605127c22c083334e292d661ffc9--undefined","val":{"mdast":{"type":"root","children":[{"type":"heading","depth":2,"children":[{"type":"text","value":"C Implementation","position":{"start":{"line":2,"column":4,"offset":5},"end":{"line":2,"column":20,"offset":21},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":2},"end":{"line":2,"column":20,"offset":21},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"16. Write a C program to accept details of ‘n’ employee(eno, ename, salary) and display the details of employee having highest salary. Use array of structure.","position":{"start":{"line":3,"column":5,"offset":27},"end":{"line":3,"column":163,"offset":185},"indent":[]}}],"position":{"start":{"line":3,"column":1,"offset":23},"end":{"line":3,"column":163,"offset":185},"indent":[]}},{"type":"code","lang":"c","meta":null,"value":"//Write a C++ program to accept details of ‘n’ employee(eno, ename, salary) and display the details of employee having highest salary. Use array of structure.\n#include<stdio.h>\nstruct employee{\n    char ename[20];\n    int eno;\n    double salary;\n};\nvoid inputdetails(struct employee *a){\n    printf(\"Enter employee details\");\n    printf(\"\\nName : \");\n    fgets(a->ename,sizeof(a->ename),stdin);\n    printf(\"Employee No : \");\n    scanf(\"%d\",&a->eno);\n    printf(\"Salary : \");\n    scanf(\"%lf\",&a->salary);\n    getchar();\n}\nint main(){\n    int n;\n    printf(\"Enter number of employees : \");\n    scanf(\"%d\",&n);\n    getchar();\n    struct employee emp1[n];\n    for(int i=0;i<n;i++)\n    {\n        inputdetails(&emp1[i]);\n    }\n    struct employee *top;\n    int temp=0;\n    for(int i=0;i<n;i++)\n    {\n        if(emp1[i].salary>temp)\n        {\n            temp=emp1[i].salary;\n            top=&emp1[i];\n        }\n    }\n    printf(\"top paid employee \\nname :%semp no: %d\\nsalary : %lf\",top->ename,top->eno,top->salary);\n}","position":{"start":{"line":4,"column":1,"offset":187},"end":{"line":44,"column":4,"offset":1248},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Output","position":{"start":{"line":45,"column":5,"offset":1254},"end":{"line":45,"column":11,"offset":1260},"indent":[]}}],"position":{"start":{"line":45,"column":1,"offset":1250},"end":{"line":45,"column":11,"offset":1260},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"Enter number of employees : 3\nEnter employee details\nName : a\nEmployee No : 111\nSalary : 100\nEnter employee details\nName : b\nEmployee No : 222\nSalary : 200\nEnter employee details\nName : c\nEmployee No : 333\nSalary : 300\ntop paid employee\nname :c\nemp no: 333\nsalary : 300","position":{"start":{"line":46,"column":1,"offset":1262},"end":{"line":64,"column":4,"offset":1557},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"C++ Implementation","position":{"start":{"line":66,"column":4,"offset":1564},"end":{"line":66,"column":22,"offset":1582},"indent":[]}}],"position":{"start":{"line":66,"column":1,"offset":1561},"end":{"line":66,"column":22,"offset":1582},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"16. Write a C++ program to accept details of ‘n’ employee(eno, ename, salary) and display the details of employee having highest salary. Use array of structure.","position":{"start":{"line":67,"column":5,"offset":1588},"end":{"line":67,"column":165,"offset":1748},"indent":[]}}],"position":{"start":{"line":67,"column":1,"offset":1584},"end":{"line":67,"column":165,"offset":1748},"indent":[]}},{"type":"code","lang":"c","meta":null,"value":"//Write a C++ program to accept details of ‘n’ employee(eno, ename, salary) and display the details of employee having highest salary. Use array of structure.\n\n#include<iostream>\n#include <string.h>\nusing namespace std;\nstruct employee{\n    char ename[20];\n    int eno;\n    double salary;\n};\nvoid inputdetails(struct employee *a){\n    cout << \"Enter employee details\";\n    cout << \"\\nName : \";\n    fgets(a->ename,sizeof(a->ename),stdin);\n    cout << \"Employee No : \";\n    cin >> a->eno;\n    cout << \"Salary : \";\n    cin >> a->salary;\n    getchar();\n}\nint main(){\n    int n;\n    cout << \"Enter number of employees : \";\n    cin >> n;\n    getchar();\n    struct employee emp1[n];\n    for(int i=0;i<n;i++)\n    {\n        inputdetails(&emp1[i]);\n    }\n    struct employee *top;\n    int temp=0;\n    for(int i=0;i<n;i++)\n    {\n        if(emp1[i].salary>temp)\n        {\n            temp=emp1[i].salary;\n            top=&emp1[i];\n        }\n    }\n    cout << \"top paid employee \\nname :\" << top->ename << \"emp no: \" << top->eno <<\\nsalary : \"<< top->salary;\n}","position":{"start":{"line":68,"column":1,"offset":1750},"end":{"line":111,"column":4,"offset":2849},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Output","position":{"start":{"line":112,"column":5,"offset":2855},"end":{"line":112,"column":11,"offset":2861},"indent":[]}}],"position":{"start":{"line":112,"column":1,"offset":2851},"end":{"line":112,"column":11,"offset":2861},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"Enter number of employees : 3\nEnter employee details\nName : a\nEmployee No : 111\nSalary : 100\nEnter employee details\nName : b\nEmployee No : 222\nSalary : 200\nEnter employee details\nName : c\nEmployee No : 333\nSalary : 300\ntop paid employee\nname :c\nemp no: 333\nsalary : 300","position":{"start":{"line":113,"column":1,"offset":2863},"end":{"line":131,"column":4,"offset":3158},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"Write a C/C++/Java program to accept details of ‘n’ employee(eno, ename, salary) and display the details of employee having highest salary. Use array of structure.\",\"category\":\"Structure And Union Index\",\"tags\":[\"#c\",\"#c++\",\"#java\",\"#tutorial\"],\"date\":\"2020-04-16T00:00:00.000Z\",\"thumbnailText\":\"Index\"}","position":{"start":{"line":134,"column":1,"offset":3162},"end":{"line":134,"column":342,"offset":3503},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":134,"column":342,"offset":3503}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Write a C/C++/Java program to accept details of ‘n’ employee(eno, ename, salary) and display the details of employee having highest salary. Use array of structure.\",\n  \"category\": \"Structure And Union Index\",\n  \"tags\": [\"#c\", \"#c++\", \"#java\", \"#tutorial\"],\n  \"date\": \"2020-04-16T00:00:00.000Z\",\n  \"thumbnailText\": \"Index\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"C Implementation\"), mdx(\"h3\", null, \"16. Write a C program to accept details of \\u2018n\\u2019 employee(eno, ename, salary) and display the details of employee having highest salary. Use array of structure.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-c\"\n  }, \"//Write a C++ program to accept details of \\u2018n\\u2019 employee(eno, ename, salary) and display the details of employee having highest salary. Use array of structure.\\n#include<stdio.h>\\nstruct employee{\\n    char ename[20];\\n    int eno;\\n    double salary;\\n};\\nvoid inputdetails(struct employee *a){\\n    printf(\\\"Enter employee details\\\");\\n    printf(\\\"\\\\nName : \\\");\\n    fgets(a->ename,sizeof(a->ename),stdin);\\n    printf(\\\"Employee No : \\\");\\n    scanf(\\\"%d\\\",&a->eno);\\n    printf(\\\"Salary : \\\");\\n    scanf(\\\"%lf\\\",&a->salary);\\n    getchar();\\n}\\nint main(){\\n    int n;\\n    printf(\\\"Enter number of employees : \\\");\\n    scanf(\\\"%d\\\",&n);\\n    getchar();\\n    struct employee emp1[n];\\n    for(int i=0;i<n;i++)\\n    {\\n        inputdetails(&emp1[i]);\\n    }\\n    struct employee *top;\\n    int temp=0;\\n    for(int i=0;i<n;i++)\\n    {\\n        if(emp1[i].salary>temp)\\n        {\\n            temp=emp1[i].salary;\\n            top=&emp1[i];\\n        }\\n    }\\n    printf(\\\"top paid employee \\\\nname :%semp no: %d\\\\nsalary : %lf\\\",top->ename,top->eno,top->salary);\\n}\\n\")), mdx(\"h3\", null, \"Output\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"Enter number of employees : 3\\nEnter employee details\\nName : a\\nEmployee No : 111\\nSalary : 100\\nEnter employee details\\nName : b\\nEmployee No : 222\\nSalary : 200\\nEnter employee details\\nName : c\\nEmployee No : 333\\nSalary : 300\\ntop paid employee\\nname :c\\nemp no: 333\\nsalary : 300\\n\")), mdx(\"h2\", null, \"C++ Implementation\"), mdx(\"h3\", null, \"16. Write a C++ program to accept details of \\u2018n\\u2019 employee(eno, ename, salary) and display the details of employee having highest salary. Use array of structure.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-c\"\n  }, \"//Write a C++ program to accept details of \\u2018n\\u2019 employee(eno, ename, salary) and display the details of employee having highest salary. Use array of structure.\\n\\n#include<iostream>\\n#include <string.h>\\nusing namespace std;\\nstruct employee{\\n    char ename[20];\\n    int eno;\\n    double salary;\\n};\\nvoid inputdetails(struct employee *a){\\n    cout << \\\"Enter employee details\\\";\\n    cout << \\\"\\\\nName : \\\";\\n    fgets(a->ename,sizeof(a->ename),stdin);\\n    cout << \\\"Employee No : \\\";\\n    cin >> a->eno;\\n    cout << \\\"Salary : \\\";\\n    cin >> a->salary;\\n    getchar();\\n}\\nint main(){\\n    int n;\\n    cout << \\\"Enter number of employees : \\\";\\n    cin >> n;\\n    getchar();\\n    struct employee emp1[n];\\n    for(int i=0;i<n;i++)\\n    {\\n        inputdetails(&emp1[i]);\\n    }\\n    struct employee *top;\\n    int temp=0;\\n    for(int i=0;i<n;i++)\\n    {\\n        if(emp1[i].salary>temp)\\n        {\\n            temp=emp1[i].salary;\\n            top=&emp1[i];\\n        }\\n    }\\n    cout << \\\"top paid employee \\\\nname :\\\" << top->ename << \\\"emp no: \\\" << top->eno <<\\\\nsalary : \\\"<< top->salary;\\n}\\n\")), mdx(\"h3\", null, \"Output\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"Enter number of employees : 3\\nEnter employee details\\nName : a\\nEmployee No : 111\\nSalary : 100\\nEnter employee details\\nName : b\\nEmployee No : 222\\nSalary : 200\\nEnter employee details\\nName : c\\nEmployee No : 333\\nSalary : 300\\ntop paid employee\\nname :c\\nemp no: 333\\nsalary : 300\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"Write a C/C++/Java program to accept details of ‘n’ employee(eno, ename, salary) and display the details of employee having highest salary. Use array of structure.\",\n  \"category\": \"Structure And Union Index\",\n  \"tags\": [\"#c\", \"#c++\", \"#java\", \"#tutorial\"],\n  \"date\": \"2020-04-16T00:00:00.000Z\",\n  \"thumbnailText\": \"Index\"\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h2>{`C Implementation`}</h2>\n    <h3>{`16. Write a C program to accept details of ‘n’ employee(eno, ename, salary) and display the details of employee having highest salary. Use array of structure.`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-c\"\n      }}>{`//Write a C++ program to accept details of ‘n’ employee(eno, ename, salary) and display the details of employee having highest salary. Use array of structure.\n#include<stdio.h>\nstruct employee{\n    char ename[20];\n    int eno;\n    double salary;\n};\nvoid inputdetails(struct employee *a){\n    printf(\"Enter employee details\");\n    printf(\"\\\\nName : \");\n    fgets(a->ename,sizeof(a->ename),stdin);\n    printf(\"Employee No : \");\n    scanf(\"%d\",&a->eno);\n    printf(\"Salary : \");\n    scanf(\"%lf\",&a->salary);\n    getchar();\n}\nint main(){\n    int n;\n    printf(\"Enter number of employees : \");\n    scanf(\"%d\",&n);\n    getchar();\n    struct employee emp1[n];\n    for(int i=0;i<n;i++)\n    {\n        inputdetails(&emp1[i]);\n    }\n    struct employee *top;\n    int temp=0;\n    for(int i=0;i<n;i++)\n    {\n        if(emp1[i].salary>temp)\n        {\n            temp=emp1[i].salary;\n            top=&emp1[i];\n        }\n    }\n    printf(\"top paid employee \\\\nname :%semp no: %d\\\\nsalary : %lf\",top->ename,top->eno,top->salary);\n}\n`}</code></pre>\n    <h3>{`Output`}</h3>\n    <pre><code parentName=\"pre\" {...{}}>{`Enter number of employees : 3\nEnter employee details\nName : a\nEmployee No : 111\nSalary : 100\nEnter employee details\nName : b\nEmployee No : 222\nSalary : 200\nEnter employee details\nName : c\nEmployee No : 333\nSalary : 300\ntop paid employee\nname :c\nemp no: 333\nsalary : 300\n`}</code></pre>\n    <h2>{`C++ Implementation`}</h2>\n    <h3>{`16. Write a C++ program to accept details of ‘n’ employee(eno, ename, salary) and display the details of employee having highest salary. Use array of structure.`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-c\"\n      }}>{`//Write a C++ program to accept details of ‘n’ employee(eno, ename, salary) and display the details of employee having highest salary. Use array of structure.\n\n#include<iostream>\n#include <string.h>\nusing namespace std;\nstruct employee{\n    char ename[20];\n    int eno;\n    double salary;\n};\nvoid inputdetails(struct employee *a){\n    cout << \"Enter employee details\";\n    cout << \"\\\\nName : \";\n    fgets(a->ename,sizeof(a->ename),stdin);\n    cout << \"Employee No : \";\n    cin >> a->eno;\n    cout << \"Salary : \";\n    cin >> a->salary;\n    getchar();\n}\nint main(){\n    int n;\n    cout << \"Enter number of employees : \";\n    cin >> n;\n    getchar();\n    struct employee emp1[n];\n    for(int i=0;i<n;i++)\n    {\n        inputdetails(&emp1[i]);\n    }\n    struct employee *top;\n    int temp=0;\n    for(int i=0;i<n;i++)\n    {\n        if(emp1[i].salary>temp)\n        {\n            temp=emp1[i].salary;\n            top=&emp1[i];\n        }\n    }\n    cout << \"top paid employee \\\\nname :\" << top->ename << \"emp no: \" << top->eno <<\\\\nsalary : \"<< top->salary;\n}\n`}</code></pre>\n    <h3>{`Output`}</h3>\n    <pre><code parentName=\"pre\" {...{}}>{`Enter number of employees : 3\nEnter employee details\nName : a\nEmployee No : 111\nSalary : 100\nEnter employee details\nName : b\nEmployee No : 222\nSalary : 200\nEnter employee details\nName : c\nEmployee No : 333\nSalary : 300\ntop paid employee\nname :c\nemp no: 333\nsalary : 300\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}