{"expireTime":9007200883710395000,"key":"gatsby-plugin-mdx-entire-payload-786baf4b75d1665dd46fe8aab3571678--undefined","val":{"mdast":{"type":"root","children":[{"type":"heading","depth":2,"children":[{"type":"text","value":"C Implementation","position":{"start":{"line":2,"column":4,"offset":5},"end":{"line":2,"column":20,"offset":21},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":2},"end":{"line":2,"column":20,"offset":21},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"20. Write a C program to show a pointer to an array which contents are pointer to structure.","position":{"start":{"line":3,"column":5,"offset":27},"end":{"line":3,"column":97,"offset":119},"indent":[]}}],"position":{"start":{"line":3,"column":1,"offset":23},"end":{"line":3,"column":97,"offset":119},"indent":[]}},{"type":"code","lang":"c","meta":null,"value":"//Write a C program to show a pointer to an array which contents are pointer to structure.\n#include <stdio.h>\nvoid main()\n{\n    struct student\n    {\n        char *name;\n        int id;\n    };\n\n    static struct student stu1= {\"abc\",1001},stu2= {\"pqr\",1002},stu3= {\"xyz\",1003};\n    struct student(*a[])= {&stu1,&stu2,&stu3};\n    struct student(*(*p)[3])=&a;\n\n    printf(\" Student Name : %s \\n\",(**(*p+0)).name);\n    printf(\" Student ID :  %d\\n\",(*(*p+0))->id);\n\n    printf(\" Student Name : %s \\n\",(**(*p+1)).name);\n    printf(\" Student ID :  %d\\n\",(*(*p+1))->id);\n\n    printf(\" Student Name : %s \\n\",(**(*p+2)).name);\n    printf(\" Student ID :  %d\\n\",(*(*p+2))->id);\n}","position":{"start":{"line":4,"column":1,"offset":121},"end":{"line":28,"column":4,"offset":821},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Output","position":{"start":{"line":29,"column":5,"offset":827},"end":{"line":29,"column":11,"offset":833},"indent":[]}}],"position":{"start":{"line":29,"column":1,"offset":823},"end":{"line":29,"column":11,"offset":833},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":" Student Name : abc\n Student ID :  1001\n Student Name : pqr\n Student ID :  1002\n Student Name : xyz\n Student ID :  1003","position":{"start":{"line":30,"column":1,"offset":835},"end":{"line":37,"column":4,"offset":969},"indent":[1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"C++ Implementation","position":{"start":{"line":38,"column":4,"offset":974},"end":{"line":38,"column":22,"offset":992},"indent":[]}}],"position":{"start":{"line":38,"column":1,"offset":971},"end":{"line":38,"column":22,"offset":992},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"20. Write a C++ program to show a pointer to an array which contents are pointer to structure.","position":{"start":{"line":39,"column":5,"offset":998},"end":{"line":39,"column":99,"offset":1092},"indent":[]}}],"position":{"start":{"line":39,"column":1,"offset":994},"end":{"line":39,"column":99,"offset":1092},"indent":[]}},{"type":"code","lang":"c","meta":null,"value":"//Write a C++ program to show a pointer to an array which contents are pointer to structure.\n#include <iostream>\n#include <string.h>\nusing namespace std;\nint main()\n{\n  struct student\n  {\n  char *name;\n  int id;\n  };\n\n\tstatic struct student stu1={\"abc\",1001},stu2={\"pqr\",1002},stu3={\"xyz\",1003};\n\tstruct student(*a[])={&stu1,&stu2,&stu3};\n\tstruct student(*(*p)[3])=&a;\n\n  cout<<\" Student Name : \" <<(**(*p+0)).name<<endl;\n\tcout<<\" Student ID :  \" <<(*(*p+0))->id<<endl;\n\n\tcout<<\" Student Name : \"<<(**(*p+1)).name<<endl;\n\tcout<<\" Student ID :  \"<<(*(*p+1))->id<<endl;\n\n\tcout<<\" Student Name : \"<<(**(*p+2)).name<<endl;\n\tcout<<\" Student ID :  \"<<(*(*p+2))->id<<endl;\n}","position":{"start":{"line":40,"column":1,"offset":1094},"end":{"line":66,"column":4,"offset":1796},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Output","position":{"start":{"line":67,"column":5,"offset":1802},"end":{"line":67,"column":11,"offset":1808},"indent":[]}}],"position":{"start":{"line":67,"column":1,"offset":1798},"end":{"line":67,"column":11,"offset":1808},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":" Student Name : abc\n Student ID :  1001\n Student Name : pqr\n Student ID :  1002\n Student Name : xyz\n Student ID :  1003","position":{"start":{"line":68,"column":1,"offset":1810},"end":{"line":75,"column":4,"offset":1944},"indent":[1,1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"Write a C/C++/Java program to show a pointer to an array which contents are pointer to structure.\",\"category\":\"Pointer Program Index\",\"tags\":[\"#c\",\"#c++\",\"#tutorial\"],\"date\":\"2020-04-16T00:00:00.000Z\",\"thumbnailText\":\"Index\"}","position":{"start":{"line":78,"column":1,"offset":1948},"end":{"line":78,"column":264,"offset":2211},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":78,"column":264,"offset":2211}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Write a C/C++/Java program to show a pointer to an array which contents are pointer to structure.\",\n  \"category\": \"Pointer Program Index\",\n  \"tags\": [\"#c\", \"#c++\", \"#tutorial\"],\n  \"date\": \"2020-04-16T00:00:00.000Z\",\n  \"thumbnailText\": \"Index\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"C Implementation\"), mdx(\"h3\", null, \"20. Write a C program to show a pointer to an array which contents are pointer to structure.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-c\"\n  }, \"//Write a C program to show a pointer to an array which contents are pointer to structure.\\n#include <stdio.h>\\nvoid main()\\n{\\n    struct student\\n    {\\n        char *name;\\n        int id;\\n    };\\n\\n    static struct student stu1= {\\\"abc\\\",1001},stu2= {\\\"pqr\\\",1002},stu3= {\\\"xyz\\\",1003};\\n    struct student(*a[])= {&stu1,&stu2,&stu3};\\n    struct student(*(*p)[3])=&a;\\n\\n    printf(\\\" Student Name : %s \\\\n\\\",(**(*p+0)).name);\\n    printf(\\\" Student ID :  %d\\\\n\\\",(*(*p+0))->id);\\n\\n    printf(\\\" Student Name : %s \\\\n\\\",(**(*p+1)).name);\\n    printf(\\\" Student ID :  %d\\\\n\\\",(*(*p+1))->id);\\n\\n    printf(\\\" Student Name : %s \\\\n\\\",(**(*p+2)).name);\\n    printf(\\\" Student ID :  %d\\\\n\\\",(*(*p+2))->id);\\n}\\n\")), mdx(\"h3\", null, \"Output\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \" Student Name : abc\\n Student ID :  1001\\n Student Name : pqr\\n Student ID :  1002\\n Student Name : xyz\\n Student ID :  1003\\n\")), mdx(\"h2\", null, \"C++ Implementation\"), mdx(\"h3\", null, \"20. Write a C++ program to show a pointer to an array which contents are pointer to structure.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-c\"\n  }, \"//Write a C++ program to show a pointer to an array which contents are pointer to structure.\\n#include <iostream>\\n#include <string.h>\\nusing namespace std;\\nint main()\\n{\\n  struct student\\n  {\\n  char *name;\\n  int id;\\n  };\\n\\n    static struct student stu1={\\\"abc\\\",1001},stu2={\\\"pqr\\\",1002},stu3={\\\"xyz\\\",1003};\\n    struct student(*a[])={&stu1,&stu2,&stu3};\\n    struct student(*(*p)[3])=&a;\\n\\n  cout<<\\\" Student Name : \\\" <<(**(*p+0)).name<<endl;\\n    cout<<\\\" Student ID :  \\\" <<(*(*p+0))->id<<endl;\\n\\n    cout<<\\\" Student Name : \\\"<<(**(*p+1)).name<<endl;\\n    cout<<\\\" Student ID :  \\\"<<(*(*p+1))->id<<endl;\\n\\n    cout<<\\\" Student Name : \\\"<<(**(*p+2)).name<<endl;\\n    cout<<\\\" Student ID :  \\\"<<(*(*p+2))->id<<endl;\\n}\\n\")), mdx(\"h3\", null, \"Output\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \" Student Name : abc\\n Student ID :  1001\\n Student Name : pqr\\n Student ID :  1002\\n Student Name : xyz\\n Student ID :  1003\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"Write a C/C++/Java program to show a pointer to an array which contents are pointer to structure.\",\n  \"category\": \"Pointer Program Index\",\n  \"tags\": [\"#c\", \"#c++\", \"#tutorial\"],\n  \"date\": \"2020-04-16T00:00:00.000Z\",\n  \"thumbnailText\": \"Index\"\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h2>{`C Implementation`}</h2>\n    <h3>{`20. Write a C program to show a pointer to an array which contents are pointer to structure.`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-c\"\n      }}>{`//Write a C program to show a pointer to an array which contents are pointer to structure.\n#include <stdio.h>\nvoid main()\n{\n    struct student\n    {\n        char *name;\n        int id;\n    };\n\n    static struct student stu1= {\"abc\",1001},stu2= {\"pqr\",1002},stu3= {\"xyz\",1003};\n    struct student(*a[])= {&stu1,&stu2,&stu3};\n    struct student(*(*p)[3])=&a;\n\n    printf(\" Student Name : %s \\\\n\",(**(*p+0)).name);\n    printf(\" Student ID :  %d\\\\n\",(*(*p+0))->id);\n\n    printf(\" Student Name : %s \\\\n\",(**(*p+1)).name);\n    printf(\" Student ID :  %d\\\\n\",(*(*p+1))->id);\n\n    printf(\" Student Name : %s \\\\n\",(**(*p+2)).name);\n    printf(\" Student ID :  %d\\\\n\",(*(*p+2))->id);\n}\n`}</code></pre>\n    <h3>{`Output`}</h3>\n    <pre><code parentName=\"pre\" {...{}}>{` Student Name : abc\n Student ID :  1001\n Student Name : pqr\n Student ID :  1002\n Student Name : xyz\n Student ID :  1003\n`}</code></pre>\n    <h2>{`C++ Implementation`}</h2>\n    <h3>{`20. Write a C++ program to show a pointer to an array which contents are pointer to structure.`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-c\"\n      }}>{`//Write a C++ program to show a pointer to an array which contents are pointer to structure.\n#include <iostream>\n#include <string.h>\nusing namespace std;\nint main()\n{\n  struct student\n  {\n  char *name;\n  int id;\n  };\n\n    static struct student stu1={\"abc\",1001},stu2={\"pqr\",1002},stu3={\"xyz\",1003};\n    struct student(*a[])={&stu1,&stu2,&stu3};\n    struct student(*(*p)[3])=&a;\n\n  cout<<\" Student Name : \" <<(**(*p+0)).name<<endl;\n    cout<<\" Student ID :  \" <<(*(*p+0))->id<<endl;\n\n    cout<<\" Student Name : \"<<(**(*p+1)).name<<endl;\n    cout<<\" Student ID :  \"<<(*(*p+1))->id<<endl;\n\n    cout<<\" Student Name : \"<<(**(*p+2)).name<<endl;\n    cout<<\" Student ID :  \"<<(*(*p+2))->id<<endl;\n}\n`}</code></pre>\n    <h3>{`Output`}</h3>\n    <pre><code parentName=\"pre\" {...{}}>{` Student Name : abc\n Student ID :  1001\n Student Name : pqr\n Student ID :  1002\n Student Name : xyz\n Student ID :  1003\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}