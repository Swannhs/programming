{"expireTime":9007200883710394000,"key":"gatsby-plugin-mdx-entire-payload-5fc361bec8c27d6b6b85aaff8fae5129--undefined","val":{"mdast":{"type":"root","children":[{"type":"heading","depth":2,"children":[{"type":"text","value":"C Implementation","position":{"start":{"line":2,"column":4,"offset":5},"end":{"line":2,"column":20,"offset":21},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":2},"end":{"line":2,"column":20,"offset":21},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"3. Write a C program to demonstrate the use of &(address of) and *(value at address) operator.","position":{"start":{"line":3,"column":5,"offset":27},"end":{"line":3,"column":99,"offset":121},"indent":[]}}],"position":{"start":{"line":3,"column":1,"offset":23},"end":{"line":3,"column":99,"offset":121},"indent":[]}},{"type":"code","lang":"c","meta":null,"value":"//Write a C program to demonstrate the use of &(address of) and *(value at address) operator.\n#include <stdio.h>\nvoid main()\n{\n    int *p;\n    int a= 10;\n    p= &a;\n\n    printf(\"Value of variable 'a' is: %d\", a);\n    printf(\"\\nValue of variable 'a' is: %d\", *p); //printing the value using pointer\n    printf(\"\\nMemory Address of variable 'a' is: %p\", &a); //printing the memory address using variable\n    printf(\"\\nMemory Address of variable 'a' is: %p\", p); //printing the memory address using pointer\n    printf(\"\\nMemory Address of pointer 'p' is: %p\", &p); //printing the memory address of pointer\n}","position":{"start":{"line":4,"column":1,"offset":123},"end":{"line":19,"column":4,"offset":751},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Output","position":{"start":{"line":20,"column":5,"offset":757},"end":{"line":20,"column":11,"offset":763},"indent":[]}}],"position":{"start":{"line":20,"column":1,"offset":753},"end":{"line":20,"column":11,"offset":763},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"Value of variable 'a' is: 10\nValue of variable 'a' is: 10\nMemory Address of variable 'a' is: 0x7ffc31d9dfd4\nMemory Address of variable 'a' is: 0x7ffc31d9dfd4\nMemory Address of pointer 'p' is: 0x7ffc31d9dfd8","position":{"start":{"line":21,"column":1,"offset":765},"end":{"line":27,"column":4,"offset":985},"indent":[1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"C++ Implementation","position":{"start":{"line":28,"column":4,"offset":990},"end":{"line":28,"column":22,"offset":1008},"indent":[]}}],"position":{"start":{"line":28,"column":1,"offset":987},"end":{"line":28,"column":22,"offset":1008},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"3. Write a C++ program to demonstrate the use of &(address of) and *(value at address) operator.","position":{"start":{"line":29,"column":5,"offset":1014},"end":{"line":29,"column":101,"offset":1110},"indent":[]}}],"position":{"start":{"line":29,"column":1,"offset":1010},"end":{"line":29,"column":101,"offset":1110},"indent":[]}},{"type":"code","lang":"c","meta":null,"value":"//Write a C++ program to demonstrate the use of &(address of) and *(value at address) operator.\n#include <iostream>\nusing namespace std;\nint main()\n{\n    int *p;\n    int a= 10;\n    p= &a;\n\n    cout<<\"Value of variable 'a' is:\"<< a;\n    cout<<\"\\nValue of variable 'a' is:\"<<*p; //printing the value using pointer\n    cout<<\"\\nMemory Address of variable 'a' is:\"<< &a; //printing the memory address using variable\n    cout<<\"\\nMemory Address of variable 'a' is: \"<< p; //printing the memory address using pointer\n    cout<<\"\\nMemory Address of pointer 'p' is: \"<<&p; //printing the memory address of pointer\n\n}","position":{"start":{"line":30,"column":1,"offset":1112},"end":{"line":47,"column":4,"offset":1746},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Output","position":{"start":{"line":48,"column":5,"offset":1752},"end":{"line":48,"column":11,"offset":1758},"indent":[]}}],"position":{"start":{"line":48,"column":1,"offset":1748},"end":{"line":48,"column":11,"offset":1758},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"Value of variable 'a' is: 10\nValue of variable 'a' is: 10\nMemory Address of variable 'a' is: 0x7ffc31d9dfd4\nMemory Address of variable 'a' is: 0x7ffc31d9dfd4\nMemory Address of pointer 'p' is: 0x7ffc31d9dfd8","position":{"start":{"line":49,"column":1,"offset":1760},"end":{"line":55,"column":4,"offset":1980},"indent":[1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"Write a C/C++/Java program to demonstrate the use of &(address of) and *(value at address) operator.\",\"category\":\"Pointer Program Index\",\"tags\":[\"#c\",\"#c++\",\"#tutorial\"],\"date\":\"2020-04-16T00:00:00.000Z\",\"thumbnailText\":\"Index\"}","position":{"start":{"line":58,"column":1,"offset":1984},"end":{"line":58,"column":267,"offset":2250},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":58,"column":267,"offset":2250}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Write a C/C++/Java program to demonstrate the use of &(address of) and *(value at address) operator.\",\n  \"category\": \"Pointer Program Index\",\n  \"tags\": [\"#c\", \"#c++\", \"#tutorial\"],\n  \"date\": \"2020-04-16T00:00:00.000Z\",\n  \"thumbnailText\": \"Index\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"C Implementation\"), mdx(\"h3\", null, \"3. Write a C program to demonstrate the use of &(address of) and *(value at address) operator.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-c\"\n  }, \"//Write a C program to demonstrate the use of &(address of) and *(value at address) operator.\\n#include <stdio.h>\\nvoid main()\\n{\\n    int *p;\\n    int a= 10;\\n    p= &a;\\n\\n    printf(\\\"Value of variable 'a' is: %d\\\", a);\\n    printf(\\\"\\\\nValue of variable 'a' is: %d\\\", *p); //printing the value using pointer\\n    printf(\\\"\\\\nMemory Address of variable 'a' is: %p\\\", &a); //printing the memory address using variable\\n    printf(\\\"\\\\nMemory Address of variable 'a' is: %p\\\", p); //printing the memory address using pointer\\n    printf(\\\"\\\\nMemory Address of pointer 'p' is: %p\\\", &p); //printing the memory address of pointer\\n}\\n\")), mdx(\"h3\", null, \"Output\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"Value of variable 'a' is: 10\\nValue of variable 'a' is: 10\\nMemory Address of variable 'a' is: 0x7ffc31d9dfd4\\nMemory Address of variable 'a' is: 0x7ffc31d9dfd4\\nMemory Address of pointer 'p' is: 0x7ffc31d9dfd8\\n\")), mdx(\"h2\", null, \"C++ Implementation\"), mdx(\"h3\", null, \"3. Write a C++ program to demonstrate the use of &(address of) and *(value at address) operator.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-c\"\n  }, \"//Write a C++ program to demonstrate the use of &(address of) and *(value at address) operator.\\n#include <iostream>\\nusing namespace std;\\nint main()\\n{\\n    int *p;\\n    int a= 10;\\n    p= &a;\\n\\n    cout<<\\\"Value of variable 'a' is:\\\"<< a;\\n    cout<<\\\"\\\\nValue of variable 'a' is:\\\"<<*p; //printing the value using pointer\\n    cout<<\\\"\\\\nMemory Address of variable 'a' is:\\\"<< &a; //printing the memory address using variable\\n    cout<<\\\"\\\\nMemory Address of variable 'a' is: \\\"<< p; //printing the memory address using pointer\\n    cout<<\\\"\\\\nMemory Address of pointer 'p' is: \\\"<<&p; //printing the memory address of pointer\\n\\n}\\n\")), mdx(\"h3\", null, \"Output\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"Value of variable 'a' is: 10\\nValue of variable 'a' is: 10\\nMemory Address of variable 'a' is: 0x7ffc31d9dfd4\\nMemory Address of variable 'a' is: 0x7ffc31d9dfd4\\nMemory Address of pointer 'p' is: 0x7ffc31d9dfd8\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"Write a C/C++/Java program to demonstrate the use of &(address of) and *(value at address) operator.\",\n  \"category\": \"Pointer Program Index\",\n  \"tags\": [\"#c\", \"#c++\", \"#tutorial\"],\n  \"date\": \"2020-04-16T00:00:00.000Z\",\n  \"thumbnailText\": \"Index\"\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h2>{`C Implementation`}</h2>\n    <h3>{`3. Write a C program to demonstrate the use of &(address of) and *(value at address) operator.`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-c\"\n      }}>{`//Write a C program to demonstrate the use of &(address of) and *(value at address) operator.\n#include <stdio.h>\nvoid main()\n{\n    int *p;\n    int a= 10;\n    p= &a;\n\n    printf(\"Value of variable 'a' is: %d\", a);\n    printf(\"\\\\nValue of variable 'a' is: %d\", *p); //printing the value using pointer\n    printf(\"\\\\nMemory Address of variable 'a' is: %p\", &a); //printing the memory address using variable\n    printf(\"\\\\nMemory Address of variable 'a' is: %p\", p); //printing the memory address using pointer\n    printf(\"\\\\nMemory Address of pointer 'p' is: %p\", &p); //printing the memory address of pointer\n}\n`}</code></pre>\n    <h3>{`Output`}</h3>\n    <pre><code parentName=\"pre\" {...{}}>{`Value of variable 'a' is: 10\nValue of variable 'a' is: 10\nMemory Address of variable 'a' is: 0x7ffc31d9dfd4\nMemory Address of variable 'a' is: 0x7ffc31d9dfd4\nMemory Address of pointer 'p' is: 0x7ffc31d9dfd8\n`}</code></pre>\n    <h2>{`C++ Implementation`}</h2>\n    <h3>{`3. Write a C++ program to demonstrate the use of &(address of) and *(value at address) operator.`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-c\"\n      }}>{`//Write a C++ program to demonstrate the use of &(address of) and *(value at address) operator.\n#include <iostream>\nusing namespace std;\nint main()\n{\n    int *p;\n    int a= 10;\n    p= &a;\n\n    cout<<\"Value of variable 'a' is:\"<< a;\n    cout<<\"\\\\nValue of variable 'a' is:\"<<*p; //printing the value using pointer\n    cout<<\"\\\\nMemory Address of variable 'a' is:\"<< &a; //printing the memory address using variable\n    cout<<\"\\\\nMemory Address of variable 'a' is: \"<< p; //printing the memory address using pointer\n    cout<<\"\\\\nMemory Address of pointer 'p' is: \"<<&p; //printing the memory address of pointer\n\n}\n`}</code></pre>\n    <h3>{`Output`}</h3>\n    <pre><code parentName=\"pre\" {...{}}>{`Value of variable 'a' is: 10\nValue of variable 'a' is: 10\nMemory Address of variable 'a' is: 0x7ffc31d9dfd4\nMemory Address of variable 'a' is: 0x7ffc31d9dfd4\nMemory Address of pointer 'p' is: 0x7ffc31d9dfd8\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}