{"expireTime":9007200883706346000,"key":"gatsby-plugin-mdx-entire-payload-70be5a413565ccbd14ef3241f2f44d55--undefined","val":{"mdast":{"type":"root","children":[{"type":"heading","depth":2,"children":[{"type":"text","value":"C Implementation","position":{"start":{"line":2,"column":4,"offset":5},"end":{"line":2,"column":20,"offset":21},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":2},"end":{"line":2,"column":20,"offset":21},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"14. Write a C program to read information of student. It contains Name, Roll number, Birthday, admission date. Calculate age of student at the time of admission.","position":{"start":{"line":3,"column":5,"offset":27},"end":{"line":3,"column":166,"offset":188},"indent":[]}}],"position":{"start":{"line":3,"column":1,"offset":23},"end":{"line":3,"column":166,"offset":188},"indent":[]}},{"type":"code","lang":"c","meta":null,"value":"//Write a C++ program to read information of student. It contains Name, Roll number, Birthday, admission date. Calculate age of student at the time of admission.\n#include<stdio.h>\nstruct student{\n    char name[100];\n    int roll;\n    struct date{\n    int day;\n    int month;\n    int year;\n    }addmissionDate,birthDate;\n};\nvoid findAge(int current_date, int current_month,\n             int current_year, int birth_date,\n             int birth_month, int birth_year)\n{\n    int month[] = { 31, 28, 31, 30, 31, 30, 31,\n                          31, 30, 31, 30, 31 };\n    if (birth_date > current_date) {\n        current_date = current_date + month[birth_month - 1];\n        current_month = current_month - 1;\n    }\n    if (birth_month > current_month) {\n        current_year = current_year - 1;\n        current_month = current_month + 12;\n    }\n    int calculated_date = current_date - birth_date;\n    int calculated_month = current_month - birth_month;\n    int calculated_year = current_year - birth_year;\n    printf(\"Present Age\\nYears: %d  Months: %d  Days:\"\n           \" %d\\n\", calculated_year, calculated_month,\n                                      calculated_date);\n}\nint main(){\n    struct student a;\n    printf(\"Enter students information\");\n    printf(\"Name : \");\n    fgets(a.name,sizeof(a.name),stdin);\n    printf(\"Birth Date\");\n    scanf(\"%d-%d-%d\",&a.birthDate.day,&a.birthDate.month,&a.birthDate.year);\n    printf(\"admission date : \");\n    scanf(\"%d-%d-%d\",&a.addmissionDate.day,&a.addmissionDate.month,&a.addmissionDate.year);\n    findAge(a.addmissionDate.day,a.addmissionDate.month,a.addmissionDate.year,a.birthDate.day,a.birthDate.month,a.birthDate.year);\n}","position":{"start":{"line":4,"column":1,"offset":190},"end":{"line":48,"column":4,"offset":1914},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Output","position":{"start":{"line":49,"column":5,"offset":1920},"end":{"line":49,"column":11,"offset":1926},"indent":[]}}],"position":{"start":{"line":49,"column":1,"offset":1916},"end":{"line":49,"column":11,"offset":1926},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"Enter students informationName : Ahosanul Hasan\nBirth Date: 2 2 1998\nadmission date : 3 4 2018\nPresent Age\nYears: 20  Months: 2  Days:1","position":{"start":{"line":50,"column":1,"offset":1928},"end":{"line":56,"column":4,"offset":2077},"indent":[1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"C++ Implementation","position":{"start":{"line":58,"column":4,"offset":2084},"end":{"line":58,"column":22,"offset":2102},"indent":[]}}],"position":{"start":{"line":58,"column":1,"offset":2081},"end":{"line":58,"column":22,"offset":2102},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"14. Write a C++ program to read information of student. It contains Name, Roll number, Birthday, admission date. Calculate age of student at the time of admission.","position":{"start":{"line":59,"column":5,"offset":2108},"end":{"line":59,"column":168,"offset":2271},"indent":[]}}],"position":{"start":{"line":59,"column":1,"offset":2104},"end":{"line":59,"column":168,"offset":2271},"indent":[]}},{"type":"code","lang":"c","meta":null,"value":"//Write a C++ program to read information of student. It contains Name, Roll number, Birthday, admission date. Calculate age of student at the time of admission.\n\n#include<iostream>\n#include <string.h>\nusing namespace std;\nstruct student{\n    char name[100];\n    int roll;\n    struct date{\n    int day;\n    int month;\n    int year;\n    }addmissionDate,birthDate;\n};\nvoid findAge(int current_date, int current_month,\n             int current_year, int birth_date,\n             int birth_month, int birth_year)\n{\n    int month[] = { 31, 28, 31, 30, 31, 30, 31,\n                          31, 30, 31, 30, 31 };\n    if (birth_date > current_date) {\n        current_date = current_date + month[birth_month - 1];\n        current_month = current_month - 1;\n    }\n    if (birth_month > current_month) {\n        current_year = current_year - 1;\n        current_month = current_month + 12;\n    }\n    int calculated_date = current_date - birth_date;\n    int calculated_month = current_month - birth_month;\n    int calculated_year = current_year - birth_year;\n    cout << \"Present Age\\nYears: \" << calculated_year <<\"  Months: \" << calculated_month << \"  Days:\"\n           <<calculated_date;\n}\nint main(){\n    struct student a;\n    cout << \"Enter students information\";\n    cout << \"Name : \";\n    fgets(a.name,sizeof(a.name),stdin);\n    cout << \"Birth Date: \";\n    cin >> a.birthDate.day << a.birthDate.month << a.birthDate.year;\n    cout << \"admission date : \";\n    cin >> a.addmissionDate.day >> a.addmissionDate.month >> a.addmissionDate.year;\n    findAge(a.addmissionDate.day,a.addmissionDate.month,a.addmissionDate.year,a.birthDate.day,a.birthDate.month,a.birthDate.year);\n}","position":{"start":{"line":60,"column":1,"offset":2273},"end":{"line":106,"column":4,"offset":3994},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Output","position":{"start":{"line":107,"column":5,"offset":4000},"end":{"line":107,"column":11,"offset":4006},"indent":[]}}],"position":{"start":{"line":107,"column":1,"offset":3996},"end":{"line":107,"column":11,"offset":4006},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"Enter students informationName : Ahosanul Hasan\nBirth Date: 2 2 1998\nadmission date : 3 4 2018\nPresent Age\nYears: 20  Months: 2  Days:1","position":{"start":{"line":108,"column":1,"offset":4008},"end":{"line":114,"column":4,"offset":4157},"indent":[1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"Write a C/C++/Java program to read information of student. It contains Name, Roll number, Birthday, admission date. Calculate age of student at the time of admission.\",\"category\":\"Structure And Union Index\",\"tags\":[\"#c\",\"#c++\",\"#java\",\"#tutorial\"],\"date\":\"2020-04-16T00:00:00.000Z\",\"thumbnailText\":\"Index\"}","position":{"start":{"line":117,"column":1,"offset":4161},"end":{"line":117,"column":345,"offset":4505},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":117,"column":345,"offset":4505}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Write a C/C++/Java program to read information of student. It contains Name, Roll number, Birthday, admission date. Calculate age of student at the time of admission.\",\n  \"category\": \"Structure And Union Index\",\n  \"tags\": [\"#c\", \"#c++\", \"#java\", \"#tutorial\"],\n  \"date\": \"2020-04-16T00:00:00.000Z\",\n  \"thumbnailText\": \"Index\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"C Implementation\"), mdx(\"h3\", null, \"14. Write a C program to read information of student. It contains Name, Roll number, Birthday, admission date. Calculate age of student at the time of admission.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-c\"\n  }, \"//Write a C++ program to read information of student. It contains Name, Roll number, Birthday, admission date. Calculate age of student at the time of admission.\\n#include<stdio.h>\\nstruct student{\\n    char name[100];\\n    int roll;\\n    struct date{\\n    int day;\\n    int month;\\n    int year;\\n    }addmissionDate,birthDate;\\n};\\nvoid findAge(int current_date, int current_month,\\n             int current_year, int birth_date,\\n             int birth_month, int birth_year)\\n{\\n    int month[] = { 31, 28, 31, 30, 31, 30, 31,\\n                          31, 30, 31, 30, 31 };\\n    if (birth_date > current_date) {\\n        current_date = current_date + month[birth_month - 1];\\n        current_month = current_month - 1;\\n    }\\n    if (birth_month > current_month) {\\n        current_year = current_year - 1;\\n        current_month = current_month + 12;\\n    }\\n    int calculated_date = current_date - birth_date;\\n    int calculated_month = current_month - birth_month;\\n    int calculated_year = current_year - birth_year;\\n    printf(\\\"Present Age\\\\nYears: %d  Months: %d  Days:\\\"\\n           \\\" %d\\\\n\\\", calculated_year, calculated_month,\\n                                      calculated_date);\\n}\\nint main(){\\n    struct student a;\\n    printf(\\\"Enter students information\\\");\\n    printf(\\\"Name : \\\");\\n    fgets(a.name,sizeof(a.name),stdin);\\n    printf(\\\"Birth Date\\\");\\n    scanf(\\\"%d-%d-%d\\\",&a.birthDate.day,&a.birthDate.month,&a.birthDate.year);\\n    printf(\\\"admission date : \\\");\\n    scanf(\\\"%d-%d-%d\\\",&a.addmissionDate.day,&a.addmissionDate.month,&a.addmissionDate.year);\\n    findAge(a.addmissionDate.day,a.addmissionDate.month,a.addmissionDate.year,a.birthDate.day,a.birthDate.month,a.birthDate.year);\\n}\\n\")), mdx(\"h3\", null, \"Output\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"Enter students informationName : Ahosanul Hasan\\nBirth Date: 2 2 1998\\nadmission date : 3 4 2018\\nPresent Age\\nYears: 20  Months: 2  Days:1\\n\")), mdx(\"h2\", null, \"C++ Implementation\"), mdx(\"h3\", null, \"14. Write a C++ program to read information of student. It contains Name, Roll number, Birthday, admission date. Calculate age of student at the time of admission.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-c\"\n  }, \"//Write a C++ program to read information of student. It contains Name, Roll number, Birthday, admission date. Calculate age of student at the time of admission.\\n\\n#include<iostream>\\n#include <string.h>\\nusing namespace std;\\nstruct student{\\n    char name[100];\\n    int roll;\\n    struct date{\\n    int day;\\n    int month;\\n    int year;\\n    }addmissionDate,birthDate;\\n};\\nvoid findAge(int current_date, int current_month,\\n             int current_year, int birth_date,\\n             int birth_month, int birth_year)\\n{\\n    int month[] = { 31, 28, 31, 30, 31, 30, 31,\\n                          31, 30, 31, 30, 31 };\\n    if (birth_date > current_date) {\\n        current_date = current_date + month[birth_month - 1];\\n        current_month = current_month - 1;\\n    }\\n    if (birth_month > current_month) {\\n        current_year = current_year - 1;\\n        current_month = current_month + 12;\\n    }\\n    int calculated_date = current_date - birth_date;\\n    int calculated_month = current_month - birth_month;\\n    int calculated_year = current_year - birth_year;\\n    cout << \\\"Present Age\\\\nYears: \\\" << calculated_year <<\\\"  Months: \\\" << calculated_month << \\\"  Days:\\\"\\n           <<calculated_date;\\n}\\nint main(){\\n    struct student a;\\n    cout << \\\"Enter students information\\\";\\n    cout << \\\"Name : \\\";\\n    fgets(a.name,sizeof(a.name),stdin);\\n    cout << \\\"Birth Date: \\\";\\n    cin >> a.birthDate.day << a.birthDate.month << a.birthDate.year;\\n    cout << \\\"admission date : \\\";\\n    cin >> a.addmissionDate.day >> a.addmissionDate.month >> a.addmissionDate.year;\\n    findAge(a.addmissionDate.day,a.addmissionDate.month,a.addmissionDate.year,a.birthDate.day,a.birthDate.month,a.birthDate.year);\\n}\\n\")), mdx(\"h3\", null, \"Output\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"Enter students informationName : Ahosanul Hasan\\nBirth Date: 2 2 1998\\nadmission date : 3 4 2018\\nPresent Age\\nYears: 20  Months: 2  Days:1\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"Write a C/C++/Java program to read information of student. It contains Name, Roll number, Birthday, admission date. Calculate age of student at the time of admission.\",\n  \"category\": \"Structure And Union Index\",\n  \"tags\": [\"#c\", \"#c++\", \"#java\", \"#tutorial\"],\n  \"date\": \"2020-04-16T00:00:00.000Z\",\n  \"thumbnailText\": \"Index\"\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h2>{`C Implementation`}</h2>\n    <h3>{`14. Write a C program to read information of student. It contains Name, Roll number, Birthday, admission date. Calculate age of student at the time of admission.`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-c\"\n      }}>{`//Write a C++ program to read information of student. It contains Name, Roll number, Birthday, admission date. Calculate age of student at the time of admission.\n#include<stdio.h>\nstruct student{\n    char name[100];\n    int roll;\n    struct date{\n    int day;\n    int month;\n    int year;\n    }addmissionDate,birthDate;\n};\nvoid findAge(int current_date, int current_month,\n             int current_year, int birth_date,\n             int birth_month, int birth_year)\n{\n    int month[] = { 31, 28, 31, 30, 31, 30, 31,\n                          31, 30, 31, 30, 31 };\n    if (birth_date > current_date) {\n        current_date = current_date + month[birth_month - 1];\n        current_month = current_month - 1;\n    }\n    if (birth_month > current_month) {\n        current_year = current_year - 1;\n        current_month = current_month + 12;\n    }\n    int calculated_date = current_date - birth_date;\n    int calculated_month = current_month - birth_month;\n    int calculated_year = current_year - birth_year;\n    printf(\"Present Age\\\\nYears: %d  Months: %d  Days:\"\n           \" %d\\\\n\", calculated_year, calculated_month,\n                                      calculated_date);\n}\nint main(){\n    struct student a;\n    printf(\"Enter students information\");\n    printf(\"Name : \");\n    fgets(a.name,sizeof(a.name),stdin);\n    printf(\"Birth Date\");\n    scanf(\"%d-%d-%d\",&a.birthDate.day,&a.birthDate.month,&a.birthDate.year);\n    printf(\"admission date : \");\n    scanf(\"%d-%d-%d\",&a.addmissionDate.day,&a.addmissionDate.month,&a.addmissionDate.year);\n    findAge(a.addmissionDate.day,a.addmissionDate.month,a.addmissionDate.year,a.birthDate.day,a.birthDate.month,a.birthDate.year);\n}\n`}</code></pre>\n    <h3>{`Output`}</h3>\n    <pre><code parentName=\"pre\" {...{}}>{`Enter students informationName : Ahosanul Hasan\nBirth Date: 2 2 1998\nadmission date : 3 4 2018\nPresent Age\nYears: 20  Months: 2  Days:1\n`}</code></pre>\n    <h2>{`C++ Implementation`}</h2>\n    <h3>{`14. Write a C++ program to read information of student. It contains Name, Roll number, Birthday, admission date. Calculate age of student at the time of admission.`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-c\"\n      }}>{`//Write a C++ program to read information of student. It contains Name, Roll number, Birthday, admission date. Calculate age of student at the time of admission.\n\n#include<iostream>\n#include <string.h>\nusing namespace std;\nstruct student{\n    char name[100];\n    int roll;\n    struct date{\n    int day;\n    int month;\n    int year;\n    }addmissionDate,birthDate;\n};\nvoid findAge(int current_date, int current_month,\n             int current_year, int birth_date,\n             int birth_month, int birth_year)\n{\n    int month[] = { 31, 28, 31, 30, 31, 30, 31,\n                          31, 30, 31, 30, 31 };\n    if (birth_date > current_date) {\n        current_date = current_date + month[birth_month - 1];\n        current_month = current_month - 1;\n    }\n    if (birth_month > current_month) {\n        current_year = current_year - 1;\n        current_month = current_month + 12;\n    }\n    int calculated_date = current_date - birth_date;\n    int calculated_month = current_month - birth_month;\n    int calculated_year = current_year - birth_year;\n    cout << \"Present Age\\\\nYears: \" << calculated_year <<\"  Months: \" << calculated_month << \"  Days:\"\n           <<calculated_date;\n}\nint main(){\n    struct student a;\n    cout << \"Enter students information\";\n    cout << \"Name : \";\n    fgets(a.name,sizeof(a.name),stdin);\n    cout << \"Birth Date: \";\n    cin >> a.birthDate.day << a.birthDate.month << a.birthDate.year;\n    cout << \"admission date : \";\n    cin >> a.addmissionDate.day >> a.addmissionDate.month >> a.addmissionDate.year;\n    findAge(a.addmissionDate.day,a.addmissionDate.month,a.addmissionDate.year,a.birthDate.day,a.birthDate.month,a.birthDate.year);\n}\n`}</code></pre>\n    <h3>{`Output`}</h3>\n    <pre><code parentName=\"pre\" {...{}}>{`Enter students informationName : Ahosanul Hasan\nBirth Date: 2 2 1998\nadmission date : 3 4 2018\nPresent Age\nYears: 20  Months: 2  Days:1\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}