{"expireTime":9007200883706346000,"key":"gatsby-plugin-mdx-entire-payload-5df3561737879657165c22e54def2075--undefined","val":{"mdast":{"type":"root","children":[{"type":"heading","depth":2,"children":[{"type":"text","value":"C Implementation","position":{"start":{"line":2,"column":4,"offset":5},"end":{"line":2,"column":20,"offset":21},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":2},"end":{"line":2,"column":20,"offset":21},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"26. Write a C program to print first 50 natural numbers using recursion.","position":{"start":{"line":3,"column":5,"offset":27},"end":{"line":3,"column":77,"offset":99},"indent":[]}}],"position":{"start":{"line":3,"column":1,"offset":23},"end":{"line":3,"column":77,"offset":99},"indent":[]}},{"type":"code","lang":"c","meta":null,"value":"//Write a C program to print first 50 natural numbers using recursion.\n#include<stdio.h>\nstruct library{\n    char booName[100];\n    char authorName[100];\n    char flag[3];\n    int acc;\n};\nstruct library book[100];\nint count=0;\nvoid input(struct library *book){\n    getchar();\n    printf(\"Book Details \\n\");\n    printf(\"Book Name : \");\n    fgets(book->booName,sizeof(book->booName),stdin);\n    printf(\"author Name : \");\n    fgets(book->authorName,sizeof(book->authorName),stdin);\n    printf(\"Book Issued (yes or not):\");\n    gets(book->flag);\n    book->acc=count;\n}\nvoid details(struct library *book){\n    printf(\"\\nBook Details \\n\\n\");\n    printf(\"Book Name   : %s\",book->booName);\n    printf(\"author Name : %s\",book->authorName);\n    printf(\"Access NO   : %d\",book->acc);\n}\nint main(){\n        printf(\"\\n\\n\\nselect from menu: \\n\");\n        printf(\"1) Add book details.\\n2) Display book details.\\n3) List all books of given author.\\n4)\"\n                \" List the count of books in the library.\\n5) List the title of specified book\\n6) List the books in the order of accession number\\n7) Exit.\\n\");\n        int k=0;\n        scanf(\"%d\",&k);\n        system(\"cls\");\n        switch(k){\n            case 1:{\n                if(count>100){\n                    printf(\"memory full\");\n                    main();\n                }\n                input(&book[count]);\n                count++;\n                main();\n            }\n            case 2:{\n                for(int i=0;i<count;i++)\n                {\n                    details(&book[i]);\n                }\n                 main();\n            }\n            case 3:{\n            int t=0;\n            printf(\"\\nEnter author name: \");\n            char temp[100];\n            getchar();\n            fgets(temp,sizeof(temp),stdin);\n            for(int i=0;i<count;i++)\n            {\n                 if(strcmp(book[i].authorName,temp)==0)\n                 {\n                     details(&book[i]);\n                     t++;\n                 }\n            }\n            t==0? printf(\"\\n NO data found !!\") : printf(\"\");\n            main();\n            }\n            case 4:{\n             printf(\"\\n\\nTotal books in library : %d\",count);\n             main();\n            }\n            case 5:{\n                int t=0;\n                printf(\"\\nEnter access no : \");\n                int temp;\n                scanf(\"%d\",&temp);\n                for(int i=0;i<count;i++)\n            {\n                 if(book[i].acc==temp)\n                 {\n                     details(&book[i]);\n                     t++;\n                 }\n            }\n            t==0? printf(\"\\n NO data found !!\") : printf(\"\");\n            main();\n            }\n            case 6:{\n                for(int i=0;i<count;i++)\n                {\n                    details(&book[i]);\n                }\n                 main();\n            }\n            case 7:{\n             exit(0);\n            }\n            default: {main();}\n        }\n}","position":{"start":{"line":4,"column":1,"offset":101},"end":{"line":106,"column":4,"offset":3170},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Output","position":{"start":{"line":107,"column":5,"offset":3176},"end":{"line":107,"column":11,"offset":3182},"indent":[]}}],"position":{"start":{"line":107,"column":1,"offset":3172},"end":{"line":107,"column":11,"offset":3182},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"select from menu:\n1) Add book details.\n2) Display book details.\n3) List all books of given author.\n4) List the count of books in the library.\n5) List the title of specified book\n6) List the books in the order of accession number\n7) Exit.","position":{"start":{"line":108,"column":1,"offset":3184},"end":{"line":117,"column":4,"offset":3438},"indent":[1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"C++ Implementation","position":{"start":{"line":119,"column":4,"offset":3445},"end":{"line":119,"column":22,"offset":3463},"indent":[]}}],"position":{"start":{"line":119,"column":1,"offset":3442},"end":{"line":119,"column":22,"offset":3463},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"26. Write a C++ program to print first 50 natural numbers using recursion.","position":{"start":{"line":120,"column":5,"offset":3469},"end":{"line":120,"column":79,"offset":3543},"indent":[]}}],"position":{"start":{"line":120,"column":1,"offset":3465},"end":{"line":120,"column":79,"offset":3543},"indent":[]}},{"type":"code","lang":"c","meta":null,"value":"//Write a C++ program to print first 50 natural numbers using recursion.\n\n#include<iostream>\n#include <string.h>\nusing namespace std;\nstruct library{\n    char booName[100];\n    char authorName[100];\n    char flag[3];\n    int acc;\n};\nstruct library book[100];\nint count=0;\nvoid input(struct library *book){\n    getchar();\n    printf(\"Book Details \\n\");\n    printf(\"Book Name : \");\n    fgets(book->booName,sizeof(book->booName),stdin);\n    printf(\"author Name : \");\n    fgets(book->authorName,sizeof(book->authorName),stdin);\n    printf(\"Book Issued (yes or not):\");\n    gets(book->flag);\n    book->acc=count;\n}\nvoid details(struct library *book){\n    printf(\"\\nBook Details \\n\\n\");\n    printf(\"Book Name   : %s\",book->booName);\n    printf(\"author Name : %s\",book->authorName);\n    printf(\"Access NO   : %d\",book->acc);\n}\nint main(){\n        cout << \"\\n\\n\\nselect from menu: \\n\";\n        cout << \"1) Add book details.\\n2) Display book details.\\n3) List all books of given author.\\n4)\"\n                \" List the count of books in the library.\\n5) List the title of specified book\\n6) List the books in the order of accession number\\n7) Exit.\\n\";\n        int k=0;\n        cin >> k;\n        system(\"cls\");\n        switch(k){\n            case 1:{\n                if(count>100){\n                    cout << \"memory full\";\n                    main();\n                }\n                input(&book[count]);\n                count++;\n                main();\n            }\n            case 2:{\n                for(int i=0;i<count;i++)\n                {\n                    details(&book[i]);\n                }\n                 main();\n            }\n            case 3:{\n            int t=0;\n            cout << \"\\nEnter author name: \";\n            char temp[100];\n            getchar();\n            fgets(temp,sizeof(temp),stdin);\n            for(int i=0;i<count;i++)\n            {\n                 if(strcmp(book[i].authorName,temp)==0)\n                 {\n                     details(&book[i]);\n                     t++;\n                 }\n            }\n            t==0? cout << \"\\n NO data found !!\" : cout << \"\";\n            main();\n            }\n            case 4:{\n             cout << \"\\n\\nTotal books in library : \" << count;\n             main();\n            }\n            case 5:{\n                int t=0;\n                cout << \"\\nEnter access no : \";\n                int temp;\n                cin >> temp;\n                for(int i=0;i<count;i++)\n            {\n                 if(book[i].acc==temp)\n                 {\n                     details(&book[i]);\n                     t++;\n                 }\n            }\n            t==0? printf(\"\\n NO data found !!\") : printf(\"\");\n            main();\n            }\n            case 6:{\n                for(int i=0;i<count;i++)\n                {\n                    details(&book[i]);\n                }\n                 main();\n            }\n            case 7:{\n             exit(0);\n            }\n            default: {main();}\n        }\n}","position":{"start":{"line":121,"column":1,"offset":3545},"end":{"line":226,"column":4,"offset":6651},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Output","position":{"start":{"line":227,"column":5,"offset":6657},"end":{"line":227,"column":11,"offset":6663},"indent":[]}}],"position":{"start":{"line":227,"column":1,"offset":6653},"end":{"line":227,"column":11,"offset":6663},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"select from menu:\n1) Add book details.\n2) Display book details.\n3) List all books of given author.\n4) List the count of books in the library.\n5) List the title of specified book\n6) List the books in the order of accession number\n7) Exit.","position":{"start":{"line":228,"column":1,"offset":6665},"end":{"line":237,"column":4,"offset":6919},"indent":[1,1,1,1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"Write a C/C++/Java program to print first 50 natural numbers using recursion.\",\"category\":\"Structure And Union Index\",\"tags\":[\"#c\",\"#c++\",\"#java\",\"#tutorial\"],\"date\":\"2020-04-16T00:00:00.000Z\",\"thumbnailText\":\"Index\"}","position":{"start":{"line":240,"column":1,"offset":6923},"end":{"line":240,"column":256,"offset":7178},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":240,"column":256,"offset":7178}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Write a C/C++/Java program to print first 50 natural numbers using recursion.\",\n  \"category\": \"Structure And Union Index\",\n  \"tags\": [\"#c\", \"#c++\", \"#java\", \"#tutorial\"],\n  \"date\": \"2020-04-16T00:00:00.000Z\",\n  \"thumbnailText\": \"Index\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"C Implementation\"), mdx(\"h3\", null, \"26. Write a C program to print first 50 natural numbers using recursion.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-c\"\n  }, \"//Write a C program to print first 50 natural numbers using recursion.\\n#include<stdio.h>\\nstruct library{\\n    char booName[100];\\n    char authorName[100];\\n    char flag[3];\\n    int acc;\\n};\\nstruct library book[100];\\nint count=0;\\nvoid input(struct library *book){\\n    getchar();\\n    printf(\\\"Book Details \\\\n\\\");\\n    printf(\\\"Book Name : \\\");\\n    fgets(book->booName,sizeof(book->booName),stdin);\\n    printf(\\\"author Name : \\\");\\n    fgets(book->authorName,sizeof(book->authorName),stdin);\\n    printf(\\\"Book Issued (yes or not):\\\");\\n    gets(book->flag);\\n    book->acc=count;\\n}\\nvoid details(struct library *book){\\n    printf(\\\"\\\\nBook Details \\\\n\\\\n\\\");\\n    printf(\\\"Book Name   : %s\\\",book->booName);\\n    printf(\\\"author Name : %s\\\",book->authorName);\\n    printf(\\\"Access NO   : %d\\\",book->acc);\\n}\\nint main(){\\n        printf(\\\"\\\\n\\\\n\\\\nselect from menu: \\\\n\\\");\\n        printf(\\\"1) Add book details.\\\\n2) Display book details.\\\\n3) List all books of given author.\\\\n4)\\\"\\n                \\\" List the count of books in the library.\\\\n5) List the title of specified book\\\\n6) List the books in the order of accession number\\\\n7) Exit.\\\\n\\\");\\n        int k=0;\\n        scanf(\\\"%d\\\",&k);\\n        system(\\\"cls\\\");\\n        switch(k){\\n            case 1:{\\n                if(count>100){\\n                    printf(\\\"memory full\\\");\\n                    main();\\n                }\\n                input(&book[count]);\\n                count++;\\n                main();\\n            }\\n            case 2:{\\n                for(int i=0;i<count;i++)\\n                {\\n                    details(&book[i]);\\n                }\\n                 main();\\n            }\\n            case 3:{\\n            int t=0;\\n            printf(\\\"\\\\nEnter author name: \\\");\\n            char temp[100];\\n            getchar();\\n            fgets(temp,sizeof(temp),stdin);\\n            for(int i=0;i<count;i++)\\n            {\\n                 if(strcmp(book[i].authorName,temp)==0)\\n                 {\\n                     details(&book[i]);\\n                     t++;\\n                 }\\n            }\\n            t==0? printf(\\\"\\\\n NO data found !!\\\") : printf(\\\"\\\");\\n            main();\\n            }\\n            case 4:{\\n             printf(\\\"\\\\n\\\\nTotal books in library : %d\\\",count);\\n             main();\\n            }\\n            case 5:{\\n                int t=0;\\n                printf(\\\"\\\\nEnter access no : \\\");\\n                int temp;\\n                scanf(\\\"%d\\\",&temp);\\n                for(int i=0;i<count;i++)\\n            {\\n                 if(book[i].acc==temp)\\n                 {\\n                     details(&book[i]);\\n                     t++;\\n                 }\\n            }\\n            t==0? printf(\\\"\\\\n NO data found !!\\\") : printf(\\\"\\\");\\n            main();\\n            }\\n            case 6:{\\n                for(int i=0;i<count;i++)\\n                {\\n                    details(&book[i]);\\n                }\\n                 main();\\n            }\\n            case 7:{\\n             exit(0);\\n            }\\n            default: {main();}\\n        }\\n}\\n\")), mdx(\"h3\", null, \"Output\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"select from menu:\\n1) Add book details.\\n2) Display book details.\\n3) List all books of given author.\\n4) List the count of books in the library.\\n5) List the title of specified book\\n6) List the books in the order of accession number\\n7) Exit.\\n\")), mdx(\"h2\", null, \"C++ Implementation\"), mdx(\"h3\", null, \"26. Write a C++ program to print first 50 natural numbers using recursion.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-c\"\n  }, \"//Write a C++ program to print first 50 natural numbers using recursion.\\n\\n#include<iostream>\\n#include <string.h>\\nusing namespace std;\\nstruct library{\\n    char booName[100];\\n    char authorName[100];\\n    char flag[3];\\n    int acc;\\n};\\nstruct library book[100];\\nint count=0;\\nvoid input(struct library *book){\\n    getchar();\\n    printf(\\\"Book Details \\\\n\\\");\\n    printf(\\\"Book Name : \\\");\\n    fgets(book->booName,sizeof(book->booName),stdin);\\n    printf(\\\"author Name : \\\");\\n    fgets(book->authorName,sizeof(book->authorName),stdin);\\n    printf(\\\"Book Issued (yes or not):\\\");\\n    gets(book->flag);\\n    book->acc=count;\\n}\\nvoid details(struct library *book){\\n    printf(\\\"\\\\nBook Details \\\\n\\\\n\\\");\\n    printf(\\\"Book Name   : %s\\\",book->booName);\\n    printf(\\\"author Name : %s\\\",book->authorName);\\n    printf(\\\"Access NO   : %d\\\",book->acc);\\n}\\nint main(){\\n        cout << \\\"\\\\n\\\\n\\\\nselect from menu: \\\\n\\\";\\n        cout << \\\"1) Add book details.\\\\n2) Display book details.\\\\n3) List all books of given author.\\\\n4)\\\"\\n                \\\" List the count of books in the library.\\\\n5) List the title of specified book\\\\n6) List the books in the order of accession number\\\\n7) Exit.\\\\n\\\";\\n        int k=0;\\n        cin >> k;\\n        system(\\\"cls\\\");\\n        switch(k){\\n            case 1:{\\n                if(count>100){\\n                    cout << \\\"memory full\\\";\\n                    main();\\n                }\\n                input(&book[count]);\\n                count++;\\n                main();\\n            }\\n            case 2:{\\n                for(int i=0;i<count;i++)\\n                {\\n                    details(&book[i]);\\n                }\\n                 main();\\n            }\\n            case 3:{\\n            int t=0;\\n            cout << \\\"\\\\nEnter author name: \\\";\\n            char temp[100];\\n            getchar();\\n            fgets(temp,sizeof(temp),stdin);\\n            for(int i=0;i<count;i++)\\n            {\\n                 if(strcmp(book[i].authorName,temp)==0)\\n                 {\\n                     details(&book[i]);\\n                     t++;\\n                 }\\n            }\\n            t==0? cout << \\\"\\\\n NO data found !!\\\" : cout << \\\"\\\";\\n            main();\\n            }\\n            case 4:{\\n             cout << \\\"\\\\n\\\\nTotal books in library : \\\" << count;\\n             main();\\n            }\\n            case 5:{\\n                int t=0;\\n                cout << \\\"\\\\nEnter access no : \\\";\\n                int temp;\\n                cin >> temp;\\n                for(int i=0;i<count;i++)\\n            {\\n                 if(book[i].acc==temp)\\n                 {\\n                     details(&book[i]);\\n                     t++;\\n                 }\\n            }\\n            t==0? printf(\\\"\\\\n NO data found !!\\\") : printf(\\\"\\\");\\n            main();\\n            }\\n            case 6:{\\n                for(int i=0;i<count;i++)\\n                {\\n                    details(&book[i]);\\n                }\\n                 main();\\n            }\\n            case 7:{\\n             exit(0);\\n            }\\n            default: {main();}\\n        }\\n}\\n\")), mdx(\"h3\", null, \"Output\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"select from menu:\\n1) Add book details.\\n2) Display book details.\\n3) List all books of given author.\\n4) List the count of books in the library.\\n5) List the title of specified book\\n6) List the books in the order of accession number\\n7) Exit.\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"Write a C/C++/Java program to print first 50 natural numbers using recursion.\",\n  \"category\": \"Structure And Union Index\",\n  \"tags\": [\"#c\", \"#c++\", \"#java\", \"#tutorial\"],\n  \"date\": \"2020-04-16T00:00:00.000Z\",\n  \"thumbnailText\": \"Index\"\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h2>{`C Implementation`}</h2>\n    <h3>{`26. Write a C program to print first 50 natural numbers using recursion.`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-c\"\n      }}>{`//Write a C program to print first 50 natural numbers using recursion.\n#include<stdio.h>\nstruct library{\n    char booName[100];\n    char authorName[100];\n    char flag[3];\n    int acc;\n};\nstruct library book[100];\nint count=0;\nvoid input(struct library *book){\n    getchar();\n    printf(\"Book Details \\\\n\");\n    printf(\"Book Name : \");\n    fgets(book->booName,sizeof(book->booName),stdin);\n    printf(\"author Name : \");\n    fgets(book->authorName,sizeof(book->authorName),stdin);\n    printf(\"Book Issued (yes or not):\");\n    gets(book->flag);\n    book->acc=count;\n}\nvoid details(struct library *book){\n    printf(\"\\\\nBook Details \\\\n\\\\n\");\n    printf(\"Book Name   : %s\",book->booName);\n    printf(\"author Name : %s\",book->authorName);\n    printf(\"Access NO   : %d\",book->acc);\n}\nint main(){\n        printf(\"\\\\n\\\\n\\\\nselect from menu: \\\\n\");\n        printf(\"1) Add book details.\\\\n2) Display book details.\\\\n3) List all books of given author.\\\\n4)\"\n                \" List the count of books in the library.\\\\n5) List the title of specified book\\\\n6) List the books in the order of accession number\\\\n7) Exit.\\\\n\");\n        int k=0;\n        scanf(\"%d\",&k);\n        system(\"cls\");\n        switch(k){\n            case 1:{\n                if(count>100){\n                    printf(\"memory full\");\n                    main();\n                }\n                input(&book[count]);\n                count++;\n                main();\n            }\n            case 2:{\n                for(int i=0;i<count;i++)\n                {\n                    details(&book[i]);\n                }\n                 main();\n            }\n            case 3:{\n            int t=0;\n            printf(\"\\\\nEnter author name: \");\n            char temp[100];\n            getchar();\n            fgets(temp,sizeof(temp),stdin);\n            for(int i=0;i<count;i++)\n            {\n                 if(strcmp(book[i].authorName,temp)==0)\n                 {\n                     details(&book[i]);\n                     t++;\n                 }\n            }\n            t==0? printf(\"\\\\n NO data found !!\") : printf(\"\");\n            main();\n            }\n            case 4:{\n             printf(\"\\\\n\\\\nTotal books in library : %d\",count);\n             main();\n            }\n            case 5:{\n                int t=0;\n                printf(\"\\\\nEnter access no : \");\n                int temp;\n                scanf(\"%d\",&temp);\n                for(int i=0;i<count;i++)\n            {\n                 if(book[i].acc==temp)\n                 {\n                     details(&book[i]);\n                     t++;\n                 }\n            }\n            t==0? printf(\"\\\\n NO data found !!\") : printf(\"\");\n            main();\n            }\n            case 6:{\n                for(int i=0;i<count;i++)\n                {\n                    details(&book[i]);\n                }\n                 main();\n            }\n            case 7:{\n             exit(0);\n            }\n            default: {main();}\n        }\n}\n`}</code></pre>\n    <h3>{`Output`}</h3>\n    <pre><code parentName=\"pre\" {...{}}>{`select from menu:\n1) Add book details.\n2) Display book details.\n3) List all books of given author.\n4) List the count of books in the library.\n5) List the title of specified book\n6) List the books in the order of accession number\n7) Exit.\n`}</code></pre>\n    <h2>{`C++ Implementation`}</h2>\n    <h3>{`26. Write a C++ program to print first 50 natural numbers using recursion.`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-c\"\n      }}>{`//Write a C++ program to print first 50 natural numbers using recursion.\n\n#include<iostream>\n#include <string.h>\nusing namespace std;\nstruct library{\n    char booName[100];\n    char authorName[100];\n    char flag[3];\n    int acc;\n};\nstruct library book[100];\nint count=0;\nvoid input(struct library *book){\n    getchar();\n    printf(\"Book Details \\\\n\");\n    printf(\"Book Name : \");\n    fgets(book->booName,sizeof(book->booName),stdin);\n    printf(\"author Name : \");\n    fgets(book->authorName,sizeof(book->authorName),stdin);\n    printf(\"Book Issued (yes or not):\");\n    gets(book->flag);\n    book->acc=count;\n}\nvoid details(struct library *book){\n    printf(\"\\\\nBook Details \\\\n\\\\n\");\n    printf(\"Book Name   : %s\",book->booName);\n    printf(\"author Name : %s\",book->authorName);\n    printf(\"Access NO   : %d\",book->acc);\n}\nint main(){\n        cout << \"\\\\n\\\\n\\\\nselect from menu: \\\\n\";\n        cout << \"1) Add book details.\\\\n2) Display book details.\\\\n3) List all books of given author.\\\\n4)\"\n                \" List the count of books in the library.\\\\n5) List the title of specified book\\\\n6) List the books in the order of accession number\\\\n7) Exit.\\\\n\";\n        int k=0;\n        cin >> k;\n        system(\"cls\");\n        switch(k){\n            case 1:{\n                if(count>100){\n                    cout << \"memory full\";\n                    main();\n                }\n                input(&book[count]);\n                count++;\n                main();\n            }\n            case 2:{\n                for(int i=0;i<count;i++)\n                {\n                    details(&book[i]);\n                }\n                 main();\n            }\n            case 3:{\n            int t=0;\n            cout << \"\\\\nEnter author name: \";\n            char temp[100];\n            getchar();\n            fgets(temp,sizeof(temp),stdin);\n            for(int i=0;i<count;i++)\n            {\n                 if(strcmp(book[i].authorName,temp)==0)\n                 {\n                     details(&book[i]);\n                     t++;\n                 }\n            }\n            t==0? cout << \"\\\\n NO data found !!\" : cout << \"\";\n            main();\n            }\n            case 4:{\n             cout << \"\\\\n\\\\nTotal books in library : \" << count;\n             main();\n            }\n            case 5:{\n                int t=0;\n                cout << \"\\\\nEnter access no : \";\n                int temp;\n                cin >> temp;\n                for(int i=0;i<count;i++)\n            {\n                 if(book[i].acc==temp)\n                 {\n                     details(&book[i]);\n                     t++;\n                 }\n            }\n            t==0? printf(\"\\\\n NO data found !!\") : printf(\"\");\n            main();\n            }\n            case 6:{\n                for(int i=0;i<count;i++)\n                {\n                    details(&book[i]);\n                }\n                 main();\n            }\n            case 7:{\n             exit(0);\n            }\n            default: {main();}\n        }\n}\n`}</code></pre>\n    <h3>{`Output`}</h3>\n    <pre><code parentName=\"pre\" {...{}}>{`select from menu:\n1) Add book details.\n2) Display book details.\n3) List all books of given author.\n4) List the count of books in the library.\n5) List the title of specified book\n6) List the books in the order of accession number\n7) Exit.\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}