{"expireTime":9007200883710394000,"key":"gatsby-plugin-mdx-entire-payload-f537ac7d1137fc4734bc4d8f34832bd4--undefined","val":{"mdast":{"type":"root","children":[{"type":"heading","depth":2,"children":[{"type":"text","value":"C Implementation","position":{"start":{"line":2,"column":4,"offset":5},"end":{"line":2,"column":20,"offset":21},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":2},"end":{"line":2,"column":20,"offset":21},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"2. Write a C program to demonstrate how to handle the pointers in the program.","position":{"start":{"line":3,"column":5,"offset":27},"end":{"line":3,"column":83,"offset":105},"indent":[]}}],"position":{"start":{"line":3,"column":1,"offset":23},"end":{"line":3,"column":83,"offset":105},"indent":[]}},{"type":"code","lang":"c","meta":null,"value":"//Write a C program to demonstrate how to handle the pointers in the program.\n#include <stdio.h>\nvoid main()\n{\n   int *p;\n   int m;\n   m=2;\n   printf(\" Value of m = %d\\n\",m);\n   printf(\"Memory Address of m = %p\\n\\n\",&m); //printing Memory Address of m using variable\n\n   p=&m;\n   printf(\" Content of pointer p : %d\\n\",*p); //printing the value of m using pointer\n   printf(\"Memory Address of pointer p : %p\\n\\n\",p); //printing Memory Address of m using pointer\n\n\n   m=4; //change the value of m\n   printf(\" Content of pointer p : %d\\n\",*p);  //printing the value of m using pointer\n   printf(\"Memory Address of pointer p : %p\\n\\n\",p); //printing Memory Address of m using pointer\n\n   *p=9; //change the value of m by pointer\n   printf(\" Value of m : %d\\n\",m); //printing the changed value\n   printf(\"Memory Address of m : %p\\n\\n\",&m); //printing Memory Address of m using variable\n\n}","position":{"start":{"line":4,"column":1,"offset":107},"end":{"line":29,"column":4,"offset":1024},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Output","position":{"start":{"line":30,"column":5,"offset":1030},"end":{"line":30,"column":11,"offset":1036},"indent":[]}}],"position":{"start":{"line":30,"column":1,"offset":1026},"end":{"line":30,"column":11,"offset":1036},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":" Value of m = 2\nMemory Address of m = 0x7ffcf715f614\n\n Content of pointer p : 2\nMemory Address of pointer p : 0x7ffcf715f614\n\n Content of pointer p : 4\nMemory Address of pointer p : 0x7ffcf715f614\n\n Value of m : 9\nMemory Address of m : 0x7ffcf715f614","position":{"start":{"line":31,"column":1,"offset":1038},"end":{"line":43,"column":4,"offset":1308},"indent":[1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"C++ Implementation","position":{"start":{"line":44,"column":4,"offset":1313},"end":{"line":44,"column":22,"offset":1331},"indent":[]}}],"position":{"start":{"line":44,"column":1,"offset":1310},"end":{"line":44,"column":22,"offset":1331},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"2. Write a C++ program to demonstrate how to handle the pointers in the program.","position":{"start":{"line":45,"column":5,"offset":1337},"end":{"line":45,"column":85,"offset":1417},"indent":[]}}],"position":{"start":{"line":45,"column":1,"offset":1333},"end":{"line":45,"column":85,"offset":1417},"indent":[]}},{"type":"code","lang":"c","meta":null,"value":"//Write a C++ program to demonstrate how to handle the pointers in the program.\n#include <iostream>\nusing namespace std;\nint main()\n{\n    int *p;\n    int m;\n    m=2;\n    cout<<\" Value of m = \"<<m<<endl;\n    cout<<\"Memory Address of m =\"<<&m<<endl; //printing Memory Address of m using variable\n\n    p=&m;\n    cout<<\" Content of pointer p : \"<<*p<<endl; //printing the value of m using pointer\n    cout<<\"Memory Address of pointer p : \"<<p<<endl; //printing Memory Address of m using pointer\n\n\n    m=4; //change the value of m\n    cout<<\" Content of pointer p :\"<<*p<<endl;  //printing the value of m using pointer\n    cout<<\"Memory Address of pointer p : \"<<p<<endl; //printing Memory Address of m using pointer\n\n    *p=9; //change the value of m by pointer\n    cout<<\" Value of m : \"<<m<<endl; //printing the changed value\n    cout<<\"Memory Address of m : \"<<&m<<endl; //printing Memory Address of m using variable\n\n}\n\n\n","position":{"start":{"line":46,"column":1,"offset":1419},"end":{"line":75,"column":4,"offset":2378},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Output","position":{"start":{"line":76,"column":5,"offset":2384},"end":{"line":76,"column":11,"offset":2390},"indent":[]}}],"position":{"start":{"line":76,"column":1,"offset":2380},"end":{"line":76,"column":11,"offset":2390},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":" Value of m = 2\nMemory Address of m = 0x7ffcf715f614\n\n Content of pointer p : 2\nMemory Address of pointer p : 0x7ffcf715f614\n\n Content of pointer p : 4\nMemory Address of pointer p : 0x7ffcf715f614\n\n Value of m : 9\nMemory Address of m : 0x7ffcf715f614","position":{"start":{"line":77,"column":1,"offset":2392},"end":{"line":89,"column":4,"offset":2662},"indent":[1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"Write a C/C++/Java program to demonstrate how to handle the pointers in the program.\",\"category\":\"Pointer Program Index\",\"tags\":[\"#c\",\"#c++\",\"#tutorial\"],\"date\":\"2020-04-16T00:00:00.000Z\",\"thumbnailText\":\"Index\"}","position":{"start":{"line":92,"column":1,"offset":2666},"end":{"line":92,"column":251,"offset":2916},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":92,"column":251,"offset":2916}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Write a C/C++/Java program to demonstrate how to handle the pointers in the program.\",\n  \"category\": \"Pointer Program Index\",\n  \"tags\": [\"#c\", \"#c++\", \"#tutorial\"],\n  \"date\": \"2020-04-16T00:00:00.000Z\",\n  \"thumbnailText\": \"Index\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"C Implementation\"), mdx(\"h3\", null, \"2. Write a C program to demonstrate how to handle the pointers in the program.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-c\"\n  }, \"//Write a C program to demonstrate how to handle the pointers in the program.\\n#include <stdio.h>\\nvoid main()\\n{\\n   int *p;\\n   int m;\\n   m=2;\\n   printf(\\\" Value of m = %d\\\\n\\\",m);\\n   printf(\\\"Memory Address of m = %p\\\\n\\\\n\\\",&m); //printing Memory Address of m using variable\\n\\n   p=&m;\\n   printf(\\\" Content of pointer p : %d\\\\n\\\",*p); //printing the value of m using pointer\\n   printf(\\\"Memory Address of pointer p : %p\\\\n\\\\n\\\",p); //printing Memory Address of m using pointer\\n\\n\\n   m=4; //change the value of m\\n   printf(\\\" Content of pointer p : %d\\\\n\\\",*p);  //printing the value of m using pointer\\n   printf(\\\"Memory Address of pointer p : %p\\\\n\\\\n\\\",p); //printing Memory Address of m using pointer\\n\\n   *p=9; //change the value of m by pointer\\n   printf(\\\" Value of m : %d\\\\n\\\",m); //printing the changed value\\n   printf(\\\"Memory Address of m : %p\\\\n\\\\n\\\",&m); //printing Memory Address of m using variable\\n\\n}\\n\")), mdx(\"h3\", null, \"Output\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \" Value of m = 2\\nMemory Address of m = 0x7ffcf715f614\\n\\n Content of pointer p : 2\\nMemory Address of pointer p : 0x7ffcf715f614\\n\\n Content of pointer p : 4\\nMemory Address of pointer p : 0x7ffcf715f614\\n\\n Value of m : 9\\nMemory Address of m : 0x7ffcf715f614\\n\")), mdx(\"h2\", null, \"C++ Implementation\"), mdx(\"h3\", null, \"2. Write a C++ program to demonstrate how to handle the pointers in the program.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-c\"\n  }, \"//Write a C++ program to demonstrate how to handle the pointers in the program.\\n#include <iostream>\\nusing namespace std;\\nint main()\\n{\\n    int *p;\\n    int m;\\n    m=2;\\n    cout<<\\\" Value of m = \\\"<<m<<endl;\\n    cout<<\\\"Memory Address of m =\\\"<<&m<<endl; //printing Memory Address of m using variable\\n\\n    p=&m;\\n    cout<<\\\" Content of pointer p : \\\"<<*p<<endl; //printing the value of m using pointer\\n    cout<<\\\"Memory Address of pointer p : \\\"<<p<<endl; //printing Memory Address of m using pointer\\n\\n\\n    m=4; //change the value of m\\n    cout<<\\\" Content of pointer p :\\\"<<*p<<endl;  //printing the value of m using pointer\\n    cout<<\\\"Memory Address of pointer p : \\\"<<p<<endl; //printing Memory Address of m using pointer\\n\\n    *p=9; //change the value of m by pointer\\n    cout<<\\\" Value of m : \\\"<<m<<endl; //printing the changed value\\n    cout<<\\\"Memory Address of m : \\\"<<&m<<endl; //printing Memory Address of m using variable\\n\\n}\\n\\n\\n\\n\")), mdx(\"h3\", null, \"Output\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \" Value of m = 2\\nMemory Address of m = 0x7ffcf715f614\\n\\n Content of pointer p : 2\\nMemory Address of pointer p : 0x7ffcf715f614\\n\\n Content of pointer p : 4\\nMemory Address of pointer p : 0x7ffcf715f614\\n\\n Value of m : 9\\nMemory Address of m : 0x7ffcf715f614\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"Write a C/C++/Java program to demonstrate how to handle the pointers in the program.\",\n  \"category\": \"Pointer Program Index\",\n  \"tags\": [\"#c\", \"#c++\", \"#tutorial\"],\n  \"date\": \"2020-04-16T00:00:00.000Z\",\n  \"thumbnailText\": \"Index\"\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h2>{`C Implementation`}</h2>\n    <h3>{`2. Write a C program to demonstrate how to handle the pointers in the program.`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-c\"\n      }}>{`//Write a C program to demonstrate how to handle the pointers in the program.\n#include <stdio.h>\nvoid main()\n{\n   int *p;\n   int m;\n   m=2;\n   printf(\" Value of m = %d\\\\n\",m);\n   printf(\"Memory Address of m = %p\\\\n\\\\n\",&m); //printing Memory Address of m using variable\n\n   p=&m;\n   printf(\" Content of pointer p : %d\\\\n\",*p); //printing the value of m using pointer\n   printf(\"Memory Address of pointer p : %p\\\\n\\\\n\",p); //printing Memory Address of m using pointer\n\n\n   m=4; //change the value of m\n   printf(\" Content of pointer p : %d\\\\n\",*p);  //printing the value of m using pointer\n   printf(\"Memory Address of pointer p : %p\\\\n\\\\n\",p); //printing Memory Address of m using pointer\n\n   *p=9; //change the value of m by pointer\n   printf(\" Value of m : %d\\\\n\",m); //printing the changed value\n   printf(\"Memory Address of m : %p\\\\n\\\\n\",&m); //printing Memory Address of m using variable\n\n}\n`}</code></pre>\n    <h3>{`Output`}</h3>\n    <pre><code parentName=\"pre\" {...{}}>{` Value of m = 2\nMemory Address of m = 0x7ffcf715f614\n\n Content of pointer p : 2\nMemory Address of pointer p : 0x7ffcf715f614\n\n Content of pointer p : 4\nMemory Address of pointer p : 0x7ffcf715f614\n\n Value of m : 9\nMemory Address of m : 0x7ffcf715f614\n`}</code></pre>\n    <h2>{`C++ Implementation`}</h2>\n    <h3>{`2. Write a C++ program to demonstrate how to handle the pointers in the program.`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-c\"\n      }}>{`//Write a C++ program to demonstrate how to handle the pointers in the program.\n#include <iostream>\nusing namespace std;\nint main()\n{\n    int *p;\n    int m;\n    m=2;\n    cout<<\" Value of m = \"<<m<<endl;\n    cout<<\"Memory Address of m =\"<<&m<<endl; //printing Memory Address of m using variable\n\n    p=&m;\n    cout<<\" Content of pointer p : \"<<*p<<endl; //printing the value of m using pointer\n    cout<<\"Memory Address of pointer p : \"<<p<<endl; //printing Memory Address of m using pointer\n\n\n    m=4; //change the value of m\n    cout<<\" Content of pointer p :\"<<*p<<endl;  //printing the value of m using pointer\n    cout<<\"Memory Address of pointer p : \"<<p<<endl; //printing Memory Address of m using pointer\n\n    *p=9; //change the value of m by pointer\n    cout<<\" Value of m : \"<<m<<endl; //printing the changed value\n    cout<<\"Memory Address of m : \"<<&m<<endl; //printing Memory Address of m using variable\n\n}\n\n\n\n`}</code></pre>\n    <h3>{`Output`}</h3>\n    <pre><code parentName=\"pre\" {...{}}>{` Value of m = 2\nMemory Address of m = 0x7ffcf715f614\n\n Content of pointer p : 2\nMemory Address of pointer p : 0x7ffcf715f614\n\n Content of pointer p : 4\nMemory Address of pointer p : 0x7ffcf715f614\n\n Value of m : 9\nMemory Address of m : 0x7ffcf715f614\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}