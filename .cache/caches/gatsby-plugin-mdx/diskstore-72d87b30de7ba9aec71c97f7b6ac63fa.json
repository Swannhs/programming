{"expireTime":9007200883706346000,"key":"gatsby-plugin-mdx-entire-payload-06eec0ffe36b4522c7304c86882fb6a8--undefined","val":{"mdast":{"type":"root","children":[{"type":"heading","depth":2,"children":[{"type":"text","value":"C Implementation","position":{"start":{"line":2,"column":4,"offset":5},"end":{"line":2,"column":20,"offset":21},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":2},"end":{"line":2,"column":20,"offset":21},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"27. Write a C program that compares two given dates. To store date use structure say date that contains three members namely date, month and year. If the dates are equal then display message as “Equal” otherwise “Unequal”.","position":{"start":{"line":3,"column":5,"offset":27},"end":{"line":3,"column":227,"offset":249},"indent":[]}}],"position":{"start":{"line":3,"column":1,"offset":23},"end":{"line":3,"column":227,"offset":249},"indent":[]}},{"type":"code","lang":"c","meta":null,"value":"//Write a C program that compares two given dates. To store date use structure say date that contains three members namely date, month and year. If the dates are equal then display message as “Equal” otherwise “Unequal”.\n#include<stdio.h>\n#include<conio.h>\nstruct date\n{\nint day;\nint month;\nint year;\n};\nint main(){\n    struct date date1,date2;\n    printf(\"enter first date: Ex (12-5-21) (dd-mm-yy)\\n\");\n    scanf(\"%d-%d-%d\",&date1.day,&date1.month,&date1.year);\n    printf(\"enter second date: Ex (12-5-21) (dd-mm-yy)\\n\");\n    scanf(\"%d-%d-%d\",&date2.day,&date2.month,&date2.year);\n    if(date1.day==date2.day&& date2.month==date1.month&& date1.year==date2.year)\n    {\n        printf(\"Equal\");\n    }\n    else{\n        printf(\"Unequal\");\n    }\n}","position":{"start":{"line":4,"column":1,"offset":251},"end":{"line":28,"column":4,"offset":1028},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Output","position":{"start":{"line":29,"column":5,"offset":1034},"end":{"line":29,"column":11,"offset":1040},"indent":[]}}],"position":{"start":{"line":29,"column":1,"offset":1030},"end":{"line":29,"column":11,"offset":1040},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"enter first date: Ex (12-5-21) (dd-mm-yy)\n12 12 12\nenter second date: Ex (12-5-21) (dd-mm-yy)\n11 11 11\nUnequal","position":{"start":{"line":30,"column":1,"offset":1042},"end":{"line":36,"column":4,"offset":1166},"indent":[1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"C++ Implementation","position":{"start":{"line":38,"column":4,"offset":1173},"end":{"line":38,"column":22,"offset":1191},"indent":[]}}],"position":{"start":{"line":38,"column":1,"offset":1170},"end":{"line":38,"column":22,"offset":1191},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"27. Write a C++ program that compares two given dates. To store date use structure say date that contains three members namely date, month and year. If the dates are equal then display message as “Equal” otherwise “Unequal”.","position":{"start":{"line":39,"column":5,"offset":1197},"end":{"line":39,"column":229,"offset":1421},"indent":[]}}],"position":{"start":{"line":39,"column":1,"offset":1193},"end":{"line":39,"column":229,"offset":1421},"indent":[]}},{"type":"code","lang":"c","meta":null,"value":"//Write a C++ program that compares two given dates. To store date use structure say date that contains three members namely date, month and year. If the dates are equal then display message as “Equal” otherwise “Unequal”.\n\n#include<iostream>\n#include <string.h>\n#include<conio.h>\nusing namespace std;\nstruct date\n{\nint day;\nint month;\nint year;\n};\nint main(){\n    struct date date1,date2;\n    cout << \"enter first date: Ex (12-5-21) (dd-mm-yy)\\n\";\n    cin >> date1.day >> date1.month >> date1.year;\n    cout << \"enter second date: Ex (12-5-21) (dd-mm-yy)\\n\";\n    cin >> date2.day >> date2.month >> date2.year;\n    if(date1.day==date2.day&& date2.month==date1.month&& date1.year==date2.year)\n    {\n        cout << \"Equal\";\n    }\n    else{\n        cout << \"Unequal\";\n    }\n}","position":{"start":{"line":40,"column":1,"offset":1423},"end":{"line":67,"column":4,"offset":2232},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Output","position":{"start":{"line":68,"column":5,"offset":2238},"end":{"line":68,"column":11,"offset":2244},"indent":[]}}],"position":{"start":{"line":68,"column":1,"offset":2234},"end":{"line":68,"column":11,"offset":2244},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"enter first date: Ex (12-5-21) (dd-mm-yy)\n12 12 12\nenter second date: Ex (12-5-21) (dd-mm-yy)\n11 11 11\nUnequal","position":{"start":{"line":69,"column":1,"offset":2246},"end":{"line":75,"column":4,"offset":2370},"indent":[1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"Write a C/C++/Java program that compares two given dates. To store date use structure say date that contains three members namely date, month and year. If the dates are equal then display message as “Equal” otherwise “Unequal”.\",\"category\":\"Structure And Union Index\",\"tags\":[\"#c\",\"#c++\",\"#java\",\"#tutorial\"],\"date\":\"2020-04-16T00:00:00.000Z\",\"thumbnailText\":\"Index\"}","position":{"start":{"line":78,"column":1,"offset":2374},"end":{"line":78,"column":406,"offset":2779},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":78,"column":406,"offset":2779}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Write a C/C++/Java program that compares two given dates. To store date use structure say date that contains three members namely date, month and year. If the dates are equal then display message as “Equal” otherwise “Unequal”.\",\n  \"category\": \"Structure And Union Index\",\n  \"tags\": [\"#c\", \"#c++\", \"#java\", \"#tutorial\"],\n  \"date\": \"2020-04-16T00:00:00.000Z\",\n  \"thumbnailText\": \"Index\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"C Implementation\"), mdx(\"h3\", null, \"27. Write a C program that compares two given dates. To store date use structure say date that contains three members namely date, month and year. If the dates are equal then display message as \\u201CEqual\\u201D otherwise \\u201CUnequal\\u201D.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-c\"\n  }, \"//Write a C program that compares two given dates. To store date use structure say date that contains three members namely date, month and year. If the dates are equal then display message as \\u201CEqual\\u201D otherwise \\u201CUnequal\\u201D.\\n#include<stdio.h>\\n#include<conio.h>\\nstruct date\\n{\\nint day;\\nint month;\\nint year;\\n};\\nint main(){\\n    struct date date1,date2;\\n    printf(\\\"enter first date: Ex (12-5-21) (dd-mm-yy)\\\\n\\\");\\n    scanf(\\\"%d-%d-%d\\\",&date1.day,&date1.month,&date1.year);\\n    printf(\\\"enter second date: Ex (12-5-21) (dd-mm-yy)\\\\n\\\");\\n    scanf(\\\"%d-%d-%d\\\",&date2.day,&date2.month,&date2.year);\\n    if(date1.day==date2.day&& date2.month==date1.month&& date1.year==date2.year)\\n    {\\n        printf(\\\"Equal\\\");\\n    }\\n    else{\\n        printf(\\\"Unequal\\\");\\n    }\\n}\\n\")), mdx(\"h3\", null, \"Output\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"enter first date: Ex (12-5-21) (dd-mm-yy)\\n12 12 12\\nenter second date: Ex (12-5-21) (dd-mm-yy)\\n11 11 11\\nUnequal\\n\")), mdx(\"h2\", null, \"C++ Implementation\"), mdx(\"h3\", null, \"27. Write a C++ program that compares two given dates. To store date use structure say date that contains three members namely date, month and year. If the dates are equal then display message as \\u201CEqual\\u201D otherwise \\u201CUnequal\\u201D.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-c\"\n  }, \"//Write a C++ program that compares two given dates. To store date use structure say date that contains three members namely date, month and year. If the dates are equal then display message as \\u201CEqual\\u201D otherwise \\u201CUnequal\\u201D.\\n\\n#include<iostream>\\n#include <string.h>\\n#include<conio.h>\\nusing namespace std;\\nstruct date\\n{\\nint day;\\nint month;\\nint year;\\n};\\nint main(){\\n    struct date date1,date2;\\n    cout << \\\"enter first date: Ex (12-5-21) (dd-mm-yy)\\\\n\\\";\\n    cin >> date1.day >> date1.month >> date1.year;\\n    cout << \\\"enter second date: Ex (12-5-21) (dd-mm-yy)\\\\n\\\";\\n    cin >> date2.day >> date2.month >> date2.year;\\n    if(date1.day==date2.day&& date2.month==date1.month&& date1.year==date2.year)\\n    {\\n        cout << \\\"Equal\\\";\\n    }\\n    else{\\n        cout << \\\"Unequal\\\";\\n    }\\n}\\n\")), mdx(\"h3\", null, \"Output\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"enter first date: Ex (12-5-21) (dd-mm-yy)\\n12 12 12\\nenter second date: Ex (12-5-21) (dd-mm-yy)\\n11 11 11\\nUnequal\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"Write a C/C++/Java program that compares two given dates. To store date use structure say date that contains three members namely date, month and year. If the dates are equal then display message as “Equal” otherwise “Unequal”.\",\n  \"category\": \"Structure And Union Index\",\n  \"tags\": [\"#c\", \"#c++\", \"#java\", \"#tutorial\"],\n  \"date\": \"2020-04-16T00:00:00.000Z\",\n  \"thumbnailText\": \"Index\"\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h2>{`C Implementation`}</h2>\n    <h3>{`27. Write a C program that compares two given dates. To store date use structure say date that contains three members namely date, month and year. If the dates are equal then display message as “Equal” otherwise “Unequal”.`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-c\"\n      }}>{`//Write a C program that compares two given dates. To store date use structure say date that contains three members namely date, month and year. If the dates are equal then display message as “Equal” otherwise “Unequal”.\n#include<stdio.h>\n#include<conio.h>\nstruct date\n{\nint day;\nint month;\nint year;\n};\nint main(){\n    struct date date1,date2;\n    printf(\"enter first date: Ex (12-5-21) (dd-mm-yy)\\\\n\");\n    scanf(\"%d-%d-%d\",&date1.day,&date1.month,&date1.year);\n    printf(\"enter second date: Ex (12-5-21) (dd-mm-yy)\\\\n\");\n    scanf(\"%d-%d-%d\",&date2.day,&date2.month,&date2.year);\n    if(date1.day==date2.day&& date2.month==date1.month&& date1.year==date2.year)\n    {\n        printf(\"Equal\");\n    }\n    else{\n        printf(\"Unequal\");\n    }\n}\n`}</code></pre>\n    <h3>{`Output`}</h3>\n    <pre><code parentName=\"pre\" {...{}}>{`enter first date: Ex (12-5-21) (dd-mm-yy)\n12 12 12\nenter second date: Ex (12-5-21) (dd-mm-yy)\n11 11 11\nUnequal\n`}</code></pre>\n    <h2>{`C++ Implementation`}</h2>\n    <h3>{`27. Write a C++ program that compares two given dates. To store date use structure say date that contains three members namely date, month and year. If the dates are equal then display message as “Equal” otherwise “Unequal”.`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-c\"\n      }}>{`//Write a C++ program that compares two given dates. To store date use structure say date that contains three members namely date, month and year. If the dates are equal then display message as “Equal” otherwise “Unequal”.\n\n#include<iostream>\n#include <string.h>\n#include<conio.h>\nusing namespace std;\nstruct date\n{\nint day;\nint month;\nint year;\n};\nint main(){\n    struct date date1,date2;\n    cout << \"enter first date: Ex (12-5-21) (dd-mm-yy)\\\\n\";\n    cin >> date1.day >> date1.month >> date1.year;\n    cout << \"enter second date: Ex (12-5-21) (dd-mm-yy)\\\\n\";\n    cin >> date2.day >> date2.month >> date2.year;\n    if(date1.day==date2.day&& date2.month==date1.month&& date1.year==date2.year)\n    {\n        cout << \"Equal\";\n    }\n    else{\n        cout << \"Unequal\";\n    }\n}\n`}</code></pre>\n    <h3>{`Output`}</h3>\n    <pre><code parentName=\"pre\" {...{}}>{`enter first date: Ex (12-5-21) (dd-mm-yy)\n12 12 12\nenter second date: Ex (12-5-21) (dd-mm-yy)\n11 11 11\nUnequal\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}