{"expireTime":9007200883718172000,"key":"gatsby-plugin-mdx-entire-payload-e0a9ff2f37daca7a8f6971dc07b330a6--undefined","val":{"mdast":{"type":"root","children":[{"type":"heading","depth":2,"children":[{"type":"text","value":"C Implementation","position":{"start":{"line":2,"column":4,"offset":5},"end":{"line":2,"column":20,"offset":21},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":2},"end":{"line":2,"column":20,"offset":21},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"5. Write a C program to count the digits of a given number using recursion.","position":{"start":{"line":3,"column":5,"offset":27},"end":{"line":3,"column":80,"offset":102},"indent":[]}}],"position":{"start":{"line":3,"column":1,"offset":23},"end":{"line":3,"column":80,"offset":102},"indent":[]}},{"type":"code","lang":"c","meta":null,"value":"//Write a C program to count the digits of a given number using recursion.\n#include<stdio.h>\nint main(){\n    int n;\n    printf(\"Enter a Number : \");\n    scanf(\"%d\", &n);\n    int k=digitcount(n);\n    printf(\"Number of digits : \");\n    printf(\"%d\",k);\n}\nint digitcount(int n){\n    if(n==0)\n    {\n        return 0;\n    }\n    return  1+digitcount(n/10);\n}","position":{"start":{"line":4,"column":1,"offset":104},"end":{"line":22,"column":4,"offset":482},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Output","position":{"start":{"line":23,"column":5,"offset":488},"end":{"line":23,"column":11,"offset":494},"indent":[]}}],"position":{"start":{"line":23,"column":1,"offset":484},"end":{"line":23,"column":11,"offset":494},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"Enter a Number : 5\nNumber of digits : 1","position":{"start":{"line":24,"column":1,"offset":496},"end":{"line":27,"column":4,"offset":546},"indent":[1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"C++ Implementation","position":{"start":{"line":28,"column":4,"offset":551},"end":{"line":28,"column":22,"offset":569},"indent":[]}}],"position":{"start":{"line":28,"column":1,"offset":548},"end":{"line":28,"column":22,"offset":569},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"5. Write a C++ program to count the digits of a given number using recursion.","position":{"start":{"line":29,"column":5,"offset":575},"end":{"line":29,"column":82,"offset":652},"indent":[]}}],"position":{"start":{"line":29,"column":1,"offset":571},"end":{"line":29,"column":82,"offset":652},"indent":[]}},{"type":"code","lang":"c","meta":null,"value":"//Write a C++ program to count the digits of a given number using recursion.\n\n#include<iostream>\nusing namespace std;\nint main(){\n    int n;\n    cout << \"Enter a Number : \";\n    cin >> n;\n    int k=digitcount(n);\n    cout << \"Number of digits : \";\n    cin >> k;\n}\nint digitcount(int n){\n    if(n==0)\n    {\n        return 0;\n    }\n    return  1+digitcount(n/10);\n}","position":{"start":{"line":30,"column":1,"offset":654},"end":{"line":50,"column":4,"offset":1046},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Output","position":{"start":{"line":51,"column":5,"offset":1052},"end":{"line":51,"column":11,"offset":1058},"indent":[]}}],"position":{"start":{"line":51,"column":1,"offset":1048},"end":{"line":51,"column":11,"offset":1058},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"Enter a Number : 5\nNumber of digits : 1","position":{"start":{"line":52,"column":1,"offset":1060},"end":{"line":55,"column":4,"offset":1110},"indent":[1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Java Implementation","position":{"start":{"line":57,"column":4,"offset":1117},"end":{"line":57,"column":23,"offset":1136},"indent":[]}}],"position":{"start":{"line":57,"column":1,"offset":1114},"end":{"line":57,"column":23,"offset":1136},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"5. Write a Java program to count the digits of a given number using recursion.","position":{"start":{"line":58,"column":5,"offset":1142},"end":{"line":58,"column":83,"offset":1220},"indent":[]}}],"position":{"start":{"line":58,"column":1,"offset":1138},"end":{"line":58,"column":83,"offset":1220},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"//Write a Java program to count the digits of a given number using recursion.\nimport java.util.Scanner;\npublic class Funycode {\n    public static void main(String[] args) {\n        Scanner z = new Scanner(System.in);\n        int n;\n        System.out.println(\"Enter a Number : \");\n        n = z.nextInt();\n        int k=digitcount(n);\n        System.out.println(\"Number of digits : \");\n        System.out.println(k);\n    }\n    static int digitcount(int n){\n        if(n==0)\n        {\n            return 0;\n        }\n        return  1+digitcount(n/10);\n    }\n\n}","position":{"start":{"line":59,"column":1,"offset":1222},"end":{"line":81,"column":4,"offset":1814},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Output","position":{"start":{"line":82,"column":5,"offset":1820},"end":{"line":82,"column":11,"offset":1826},"indent":[]}}],"position":{"start":{"line":82,"column":1,"offset":1816},"end":{"line":82,"column":11,"offset":1826},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"Enter a Number : 5\nNumber of digits : 1","position":{"start":{"line":83,"column":1,"offset":1828},"end":{"line":86,"column":4,"offset":1878},"indent":[1,1,1]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"Write a C/C++/Java program to count the digits of a given number using recursion.\",\"category\":\"Recursion Function Index\",\"tags\":[\"recursion\"],\"date\":\"2020-04-16T00:00:00.000Z\",\"thumbnailText\":\"Index\"}","position":{"start":{"line":89,"column":1,"offset":1882},"end":{"line":89,"column":239,"offset":2120},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":89,"column":239,"offset":2120}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Write a C/C++/Java program to count the digits of a given number using recursion.\",\n  \"category\": \"Recursion Function Index\",\n  \"tags\": [\"recursion\"],\n  \"date\": \"2020-04-16T00:00:00.000Z\",\n  \"thumbnailText\": \"Index\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"C Implementation\"), mdx(\"h3\", null, \"5. Write a C program to count the digits of a given number using recursion.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-c\"\n  }, \"//Write a C program to count the digits of a given number using recursion.\\n#include<stdio.h>\\nint main(){\\n    int n;\\n    printf(\\\"Enter a Number : \\\");\\n    scanf(\\\"%d\\\", &n);\\n    int k=digitcount(n);\\n    printf(\\\"Number of digits : \\\");\\n    printf(\\\"%d\\\",k);\\n}\\nint digitcount(int n){\\n    if(n==0)\\n    {\\n        return 0;\\n    }\\n    return  1+digitcount(n/10);\\n}\\n\")), mdx(\"h3\", null, \"Output\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"Enter a Number : 5\\nNumber of digits : 1\\n\")), mdx(\"h2\", null, \"C++ Implementation\"), mdx(\"h3\", null, \"5. Write a C++ program to count the digits of a given number using recursion.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-c\"\n  }, \"//Write a C++ program to count the digits of a given number using recursion.\\n\\n#include<iostream>\\nusing namespace std;\\nint main(){\\n    int n;\\n    cout << \\\"Enter a Number : \\\";\\n    cin >> n;\\n    int k=digitcount(n);\\n    cout << \\\"Number of digits : \\\";\\n    cin >> k;\\n}\\nint digitcount(int n){\\n    if(n==0)\\n    {\\n        return 0;\\n    }\\n    return  1+digitcount(n/10);\\n}\\n\")), mdx(\"h3\", null, \"Output\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"Enter a Number : 5\\nNumber of digits : 1\\n\")), mdx(\"h2\", null, \"Java Implementation\"), mdx(\"h3\", null, \"5. Write a Java program to count the digits of a given number using recursion.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"//Write a Java program to count the digits of a given number using recursion.\\nimport java.util.Scanner;\\npublic class Funycode {\\n    public static void main(String[] args) {\\n        Scanner z = new Scanner(System.in);\\n        int n;\\n        System.out.println(\\\"Enter a Number : \\\");\\n        n = z.nextInt();\\n        int k=digitcount(n);\\n        System.out.println(\\\"Number of digits : \\\");\\n        System.out.println(k);\\n    }\\n    static int digitcount(int n){\\n        if(n==0)\\n        {\\n            return 0;\\n        }\\n        return  1+digitcount(n/10);\\n    }\\n\\n}\\n\")), mdx(\"h3\", null, \"Output\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"Enter a Number : 5\\nNumber of digits : 1\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"Write a C/C++/Java program to count the digits of a given number using recursion.\",\n  \"category\": \"Recursion Function Index\",\n  \"tags\": [\"recursion\"],\n  \"date\": \"2020-04-16T00:00:00.000Z\",\n  \"thumbnailText\": \"Index\"\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h2>{`C Implementation`}</h2>\n    <h3>{`5. Write a C program to count the digits of a given number using recursion.`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-c\"\n      }}>{`//Write a C program to count the digits of a given number using recursion.\n#include<stdio.h>\nint main(){\n    int n;\n    printf(\"Enter a Number : \");\n    scanf(\"%d\", &n);\n    int k=digitcount(n);\n    printf(\"Number of digits : \");\n    printf(\"%d\",k);\n}\nint digitcount(int n){\n    if(n==0)\n    {\n        return 0;\n    }\n    return  1+digitcount(n/10);\n}\n`}</code></pre>\n    <h3>{`Output`}</h3>\n    <pre><code parentName=\"pre\" {...{}}>{`Enter a Number : 5\nNumber of digits : 1\n`}</code></pre>\n    <h2>{`C++ Implementation`}</h2>\n    <h3>{`5. Write a C++ program to count the digits of a given number using recursion.`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-c\"\n      }}>{`//Write a C++ program to count the digits of a given number using recursion.\n\n#include<iostream>\nusing namespace std;\nint main(){\n    int n;\n    cout << \"Enter a Number : \";\n    cin >> n;\n    int k=digitcount(n);\n    cout << \"Number of digits : \";\n    cin >> k;\n}\nint digitcount(int n){\n    if(n==0)\n    {\n        return 0;\n    }\n    return  1+digitcount(n/10);\n}\n`}</code></pre>\n    <h3>{`Output`}</h3>\n    <pre><code parentName=\"pre\" {...{}}>{`Enter a Number : 5\nNumber of digits : 1\n`}</code></pre>\n    <h2>{`Java Implementation`}</h2>\n    <h3>{`5. Write a Java program to count the digits of a given number using recursion.`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`//Write a Java program to count the digits of a given number using recursion.\nimport java.util.Scanner;\npublic class Funycode {\n    public static void main(String[] args) {\n        Scanner z = new Scanner(System.in);\n        int n;\n        System.out.println(\"Enter a Number : \");\n        n = z.nextInt();\n        int k=digitcount(n);\n        System.out.println(\"Number of digits : \");\n        System.out.println(k);\n    }\n    static int digitcount(int n){\n        if(n==0)\n        {\n            return 0;\n        }\n        return  1+digitcount(n/10);\n    }\n\n}\n`}</code></pre>\n    <h3>{`Output`}</h3>\n    <pre><code parentName=\"pre\" {...{}}>{`Enter a Number : 5\nNumber of digits : 1\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}