{"expireTime":9007200883706948000,"key":"gatsby-plugin-mdx-entire-payload-932ddb53d20b16fd55f61aae0f7ae238--undefined","val":{"mdast":{"type":"root","children":[{"type":"heading","depth":2,"children":[{"type":"text","value":"C Implementation","position":{"start":{"line":2,"column":4,"offset":5},"end":{"line":2,"column":20,"offset":21},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":2},"end":{"line":2,"column":20,"offset":21},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"12. Write a C program to check whether a number is prime, Armstrong or perfect number using functions.","position":{"start":{"line":3,"column":5,"offset":27},"end":{"line":3,"column":107,"offset":129},"indent":[]}}],"position":{"start":{"line":3,"column":1,"offset":23},"end":{"line":3,"column":107,"offset":129},"indent":[]}},{"type":"code","lang":"c","meta":null,"value":"//Write a C program to check whether a number is prime, Armstrong or perfect number using functions.\n\n#include<stdio.h>\n\nvoid isPrime(int n)\n{\n    int check=1;\n    for(int i=2;i*i<=n;i++)\n    {\n        if(n%i==0)\n        {\n            check=0;\n            break;\n        }\n    }\n    if(check && n!=1)\n        printf(\"%d is prime.\\n\",n);\n    else\n        printf(\"%d is not prime.\\n\",n);\n}\n\nvoid isArmstrong(int n)\n{\n     int k=n;\n     int count=0;\n     while(k>0)\n     {\n         ++count;\n         k/=10;\n     }\n     int number=0;\n     k=n;\n     while(k)\n     {\n         int x=k%10;\n         int p=1;\n         for (int i = 1; i <= count; ++i)\n         {\n             p*=x;\n         }\n         number+=p;\n         k/=10;\n     }\n     if(n==number)\n         printf(\"%d is Armstrong Number\\n\",n);\n     else\n         printf(\"%d is Not Armstrong Number\\n\",n);\n}\n\nvoid isPerfect(int Number)\n{\n   int Sum=0;\n   for(int i = 1 ; i < Number ; i++)\n   {\n     if(Number % i == 0)\n       Sum = Sum + i ;\n   }\n\n   if (Sum == Number)\n      printf(\"%d is a Perfect Number\\n\", Number) ;\n   else\n      printf(\"%d is not the Perfect Number\\n\", Number) ;\n\n}\n\nint main()\n{\n    int n;\n    scanf(\"%d\",&n);\n\n    isPrime(n);\n    isArmstrong(n);\n    isPerfect(n);\n\n    return 0;\n}","position":{"start":{"line":4,"column":1,"offset":131},"end":{"line":81,"column":4,"offset":1469},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Output","position":{"start":{"line":82,"column":5,"offset":1475},"end":{"line":82,"column":11,"offset":1481},"indent":[]}}],"position":{"start":{"line":82,"column":1,"offset":1471},"end":{"line":82,"column":11,"offset":1481},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"Enter a number: 4\n4 is not prime.\n4 is Armstrong Number\n4 is not the Perfect Number","position":{"start":{"line":83,"column":1,"offset":1483},"end":{"line":88,"column":4,"offset":1579},"indent":[1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"C++ Implementation","position":{"start":{"line":90,"column":4,"offset":1586},"end":{"line":90,"column":22,"offset":1604},"indent":[]}}],"position":{"start":{"line":90,"column":1,"offset":1583},"end":{"line":90,"column":22,"offset":1604},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"12. Write a C++ program to check whether a number is prime, Armstrong or perfect number using functions","position":{"start":{"line":91,"column":5,"offset":1610},"end":{"line":91,"column":108,"offset":1713},"indent":[]}}],"position":{"start":{"line":91,"column":1,"offset":1606},"end":{"line":91,"column":108,"offset":1713},"indent":[]}},{"type":"code","lang":"c","meta":null,"value":"//Write a C++ program to check whether a number is prime, Armstrong or perfect number using functions\n\n#include<iostream>\nusing namespace std;\nvoid isPrime(int n)\n{\n    int check=1;\n    for(int i=2;i*i<=n;i++)\n    {\n        if(n%i==0)\n        {\n            check=0;\n            break;\n        }\n    }\n    if(check && n!=1)\n        cout << n \" is prime.\\n\";\n    else\n        cout << \" is not prime.\\n\";\n}\nvoid isArmstrong(int n)\n{\n     int k=n;\n     int count=0;\n     while(k>0)\n     {\n         ++count;\n         k/=10;\n     }\n     int number=0;\n     k=n;\n     while(k)\n     {\n         int x=k%10;\n         int p=1;\n         for (int i = 1; i <= count; ++i)\n         {\n             p*=x;\n         }\n         number+=p;\n         k/=10;\n     }\n     if(n==number)\n         cout << \" is Armstrong Number\\n\";\n     else\n         cout << \" is Not Armstrong Number\\n\";\n}\nvoid isPerfect(int Number)\n{\n   int Sum=0;\n   for(int i = 1 ; i < Number ; i++)\n   {\n     if(Number % i == 0)\n       Sum = Sum + i ;\n   }\n   if (Sum == Number)\n      cout << Number <<\" is a Perfect Number\\n\" ;\n   else\n      cout << Number << \" is not the Perfect Number\\n\";\n}\nint main()\n{\n    int n;\n    cin >> n;\n    isPrime(n);\n    isArmstrong(n);\n    isPerfect(n);\n    return 0;\n}","position":{"start":{"line":92,"column":1,"offset":1715},"end":{"line":162,"column":4,"offset":3039},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Output","position":{"start":{"line":163,"column":5,"offset":3045},"end":{"line":163,"column":11,"offset":3051},"indent":[]}}],"position":{"start":{"line":163,"column":1,"offset":3041},"end":{"line":163,"column":11,"offset":3051},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"Enter a number: 4\n4 is not prime.\n4 is Armstrong Number\n4 is not the Perfect Number","position":{"start":{"line":164,"column":1,"offset":3053},"end":{"line":169,"column":4,"offset":3149},"indent":[1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Java Implementation","position":{"start":{"line":171,"column":4,"offset":3156},"end":{"line":171,"column":23,"offset":3175},"indent":[]}}],"position":{"start":{"line":171,"column":1,"offset":3153},"end":{"line":171,"column":23,"offset":3175},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"2. Write a Java program to find the square of any number using the function.","position":{"start":{"line":172,"column":5,"offset":3181},"end":{"line":172,"column":81,"offset":3257},"indent":[]}}],"position":{"start":{"line":172,"column":1,"offset":3177},"end":{"line":172,"column":81,"offset":3257},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"//Write a Java program to show the simple structure of a function.\nimport java.util.Scanner;\npublic class Funycode {\n    void isPrime(int n)\n    {\n        int check=1;\n        for(int i=2;i*i<=n;i++)\n        {\n            if(n%i==0)\n            {\n                check=0;\n                break;\n            }\n        }\n        if(check && n!=1)\n            printf(\"%d is prime.\\n\",n);\n        else\n            printf(\"%d is not prime.\\n\",n);\n    }\n    void isArmstrong(int n)\n    {\n         int k=n;\n         int count=0;\n         while(k>0)\n         {\n             ++count;\n             k/=10;\n         }\n         int number=0;\n         k=n;\n         while(k)\n         {\n             int x=k%10;\n             int p=1;\n             for (int i = 1; i <= count; ++i)\n             {\n                 p*=x;\n             }\n             number+=p;\n             k/=10;\n         }\n         if(n==number)\n             printf(\"%d is Armstrong Number\\n\",n);\n         else\n             printf(\"%d is Not Armstrong Number\\n\",n);\n    }\n    void isPerfect(int Number)\n    {\n        int Sum=0;\n     for(int i = 1 ; i < Number ; i++)\n      {\n       if(Number % i == 0)\n         Sum = Sum + i ;\n      }\n     if (Sum == Number)\n        printf(\"%d is a Perfect Number\\n\", Number) ;\n     else\n        printf(\"%d is not the Perfect Number\\n\", Number) ;\n    }\n\n    public static void main(String[] args) {\n        Scanner z = new Scanner(System.in);\n        int n;\n        n = z.nextInt();\n        Funycode object = new Funycode();//Create an object of Funcycode class\n        // Call function by object\n        object.isPrime(n);\n        object.isArmstrong(n);\n        object.isPerfect(n);\n    }\n}","position":{"start":{"line":173,"column":1,"offset":3259},"end":{"line":245,"column":4,"offset":5016},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Output","position":{"start":{"line":246,"column":5,"offset":5022},"end":{"line":246,"column":11,"offset":5028},"indent":[]}}],"position":{"start":{"line":246,"column":1,"offset":5018},"end":{"line":246,"column":11,"offset":5028},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"Enter a number: 4\n4 is not prime.\n4 is Armstrong Number\n4 is not the Perfect Number","position":{"start":{"line":247,"column":1,"offset":5030},"end":{"line":252,"column":4,"offset":5126},"indent":[1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"Write a C/C++/Java program to check whether a number is prime, Armstrong or perfect number using functions.\",\"category\":\"Function Program Index\",\"tags\":[\"#c\",\"#c++\",\"#java\",\"#tutorial\"],\"date\":\"2020-04-16T00:00:00.000Z\",\"thumbnailText\":\"Index\"}","position":{"start":{"line":255,"column":1,"offset":5130},"end":{"line":255,"column":283,"offset":5412},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":255,"column":283,"offset":5412}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Write a C/C++/Java program to check whether a number is prime, Armstrong or perfect number using functions.\",\n  \"category\": \"Function Program Index\",\n  \"tags\": [\"#c\", \"#c++\", \"#java\", \"#tutorial\"],\n  \"date\": \"2020-04-16T00:00:00.000Z\",\n  \"thumbnailText\": \"Index\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"C Implementation\"), mdx(\"h3\", null, \"12. Write a C program to check whether a number is prime, Armstrong or perfect number using functions.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-c\"\n  }, \"//Write a C program to check whether a number is prime, Armstrong or perfect number using functions.\\n\\n#include<stdio.h>\\n\\nvoid isPrime(int n)\\n{\\n    int check=1;\\n    for(int i=2;i*i<=n;i++)\\n    {\\n        if(n%i==0)\\n        {\\n            check=0;\\n            break;\\n        }\\n    }\\n    if(check && n!=1)\\n        printf(\\\"%d is prime.\\\\n\\\",n);\\n    else\\n        printf(\\\"%d is not prime.\\\\n\\\",n);\\n}\\n\\nvoid isArmstrong(int n)\\n{\\n     int k=n;\\n     int count=0;\\n     while(k>0)\\n     {\\n         ++count;\\n         k/=10;\\n     }\\n     int number=0;\\n     k=n;\\n     while(k)\\n     {\\n         int x=k%10;\\n         int p=1;\\n         for (int i = 1; i <= count; ++i)\\n         {\\n             p*=x;\\n         }\\n         number+=p;\\n         k/=10;\\n     }\\n     if(n==number)\\n         printf(\\\"%d is Armstrong Number\\\\n\\\",n);\\n     else\\n         printf(\\\"%d is Not Armstrong Number\\\\n\\\",n);\\n}\\n\\nvoid isPerfect(int Number)\\n{\\n   int Sum=0;\\n   for(int i = 1 ; i < Number ; i++)\\n   {\\n     if(Number % i == 0)\\n       Sum = Sum + i ;\\n   }\\n\\n   if (Sum == Number)\\n      printf(\\\"%d is a Perfect Number\\\\n\\\", Number) ;\\n   else\\n      printf(\\\"%d is not the Perfect Number\\\\n\\\", Number) ;\\n\\n}\\n\\nint main()\\n{\\n    int n;\\n    scanf(\\\"%d\\\",&n);\\n\\n    isPrime(n);\\n    isArmstrong(n);\\n    isPerfect(n);\\n\\n    return 0;\\n}\\n\")), mdx(\"h3\", null, \"Output\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"Enter a number: 4\\n4 is not prime.\\n4 is Armstrong Number\\n4 is not the Perfect Number\\n\")), mdx(\"h2\", null, \"C++ Implementation\"), mdx(\"h3\", null, \"12. Write a C++ program to check whether a number is prime, Armstrong or perfect number using functions\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-c\"\n  }, \"//Write a C++ program to check whether a number is prime, Armstrong or perfect number using functions\\n\\n#include<iostream>\\nusing namespace std;\\nvoid isPrime(int n)\\n{\\n    int check=1;\\n    for(int i=2;i*i<=n;i++)\\n    {\\n        if(n%i==0)\\n        {\\n            check=0;\\n            break;\\n        }\\n    }\\n    if(check && n!=1)\\n        cout << n \\\" is prime.\\\\n\\\";\\n    else\\n        cout << \\\" is not prime.\\\\n\\\";\\n}\\nvoid isArmstrong(int n)\\n{\\n     int k=n;\\n     int count=0;\\n     while(k>0)\\n     {\\n         ++count;\\n         k/=10;\\n     }\\n     int number=0;\\n     k=n;\\n     while(k)\\n     {\\n         int x=k%10;\\n         int p=1;\\n         for (int i = 1; i <= count; ++i)\\n         {\\n             p*=x;\\n         }\\n         number+=p;\\n         k/=10;\\n     }\\n     if(n==number)\\n         cout << \\\" is Armstrong Number\\\\n\\\";\\n     else\\n         cout << \\\" is Not Armstrong Number\\\\n\\\";\\n}\\nvoid isPerfect(int Number)\\n{\\n   int Sum=0;\\n   for(int i = 1 ; i < Number ; i++)\\n   {\\n     if(Number % i == 0)\\n       Sum = Sum + i ;\\n   }\\n   if (Sum == Number)\\n      cout << Number <<\\\" is a Perfect Number\\\\n\\\" ;\\n   else\\n      cout << Number << \\\" is not the Perfect Number\\\\n\\\";\\n}\\nint main()\\n{\\n    int n;\\n    cin >> n;\\n    isPrime(n);\\n    isArmstrong(n);\\n    isPerfect(n);\\n    return 0;\\n}\\n\")), mdx(\"h3\", null, \"Output\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"Enter a number: 4\\n4 is not prime.\\n4 is Armstrong Number\\n4 is not the Perfect Number\\n\")), mdx(\"h2\", null, \"Java Implementation\"), mdx(\"h3\", null, \"2. Write a Java program to find the square of any number using the function.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"//Write a Java program to show the simple structure of a function.\\nimport java.util.Scanner;\\npublic class Funycode {\\n    void isPrime(int n)\\n    {\\n        int check=1;\\n        for(int i=2;i*i<=n;i++)\\n        {\\n            if(n%i==0)\\n            {\\n                check=0;\\n                break;\\n            }\\n        }\\n        if(check && n!=1)\\n            printf(\\\"%d is prime.\\\\n\\\",n);\\n        else\\n            printf(\\\"%d is not prime.\\\\n\\\",n);\\n    }\\n    void isArmstrong(int n)\\n    {\\n         int k=n;\\n         int count=0;\\n         while(k>0)\\n         {\\n             ++count;\\n             k/=10;\\n         }\\n         int number=0;\\n         k=n;\\n         while(k)\\n         {\\n             int x=k%10;\\n             int p=1;\\n             for (int i = 1; i <= count; ++i)\\n             {\\n                 p*=x;\\n             }\\n             number+=p;\\n             k/=10;\\n         }\\n         if(n==number)\\n             printf(\\\"%d is Armstrong Number\\\\n\\\",n);\\n         else\\n             printf(\\\"%d is Not Armstrong Number\\\\n\\\",n);\\n    }\\n    void isPerfect(int Number)\\n    {\\n        int Sum=0;\\n     for(int i = 1 ; i < Number ; i++)\\n      {\\n       if(Number % i == 0)\\n         Sum = Sum + i ;\\n      }\\n     if (Sum == Number)\\n        printf(\\\"%d is a Perfect Number\\\\n\\\", Number) ;\\n     else\\n        printf(\\\"%d is not the Perfect Number\\\\n\\\", Number) ;\\n    }\\n\\n    public static void main(String[] args) {\\n        Scanner z = new Scanner(System.in);\\n        int n;\\n        n = z.nextInt();\\n        Funycode object = new Funycode();//Create an object of Funcycode class\\n        // Call function by object\\n        object.isPrime(n);\\n        object.isArmstrong(n);\\n        object.isPerfect(n);\\n    }\\n}\\n\")), mdx(\"h3\", null, \"Output\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"Enter a number: 4\\n4 is not prime.\\n4 is Armstrong Number\\n4 is not the Perfect Number\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"Write a C/C++/Java program to check whether a number is prime, Armstrong or perfect number using functions.\",\n  \"category\": \"Function Program Index\",\n  \"tags\": [\"#c\", \"#c++\", \"#java\", \"#tutorial\"],\n  \"date\": \"2020-04-16T00:00:00.000Z\",\n  \"thumbnailText\": \"Index\"\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h2>{`C Implementation`}</h2>\n    <h3>{`12. Write a C program to check whether a number is prime, Armstrong or perfect number using functions.`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-c\"\n      }}>{`//Write a C program to check whether a number is prime, Armstrong or perfect number using functions.\n\n#include<stdio.h>\n\nvoid isPrime(int n)\n{\n    int check=1;\n    for(int i=2;i*i<=n;i++)\n    {\n        if(n%i==0)\n        {\n            check=0;\n            break;\n        }\n    }\n    if(check && n!=1)\n        printf(\"%d is prime.\\\\n\",n);\n    else\n        printf(\"%d is not prime.\\\\n\",n);\n}\n\nvoid isArmstrong(int n)\n{\n     int k=n;\n     int count=0;\n     while(k>0)\n     {\n         ++count;\n         k/=10;\n     }\n     int number=0;\n     k=n;\n     while(k)\n     {\n         int x=k%10;\n         int p=1;\n         for (int i = 1; i <= count; ++i)\n         {\n             p*=x;\n         }\n         number+=p;\n         k/=10;\n     }\n     if(n==number)\n         printf(\"%d is Armstrong Number\\\\n\",n);\n     else\n         printf(\"%d is Not Armstrong Number\\\\n\",n);\n}\n\nvoid isPerfect(int Number)\n{\n   int Sum=0;\n   for(int i = 1 ; i < Number ; i++)\n   {\n     if(Number % i == 0)\n       Sum = Sum + i ;\n   }\n\n   if (Sum == Number)\n      printf(\"%d is a Perfect Number\\\\n\", Number) ;\n   else\n      printf(\"%d is not the Perfect Number\\\\n\", Number) ;\n\n}\n\nint main()\n{\n    int n;\n    scanf(\"%d\",&n);\n\n    isPrime(n);\n    isArmstrong(n);\n    isPerfect(n);\n\n    return 0;\n}\n`}</code></pre>\n    <h3>{`Output`}</h3>\n    <pre><code parentName=\"pre\" {...{}}>{`Enter a number: 4\n4 is not prime.\n4 is Armstrong Number\n4 is not the Perfect Number\n`}</code></pre>\n    <h2>{`C++ Implementation`}</h2>\n    <h3>{`12. Write a C++ program to check whether a number is prime, Armstrong or perfect number using functions`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-c\"\n      }}>{`//Write a C++ program to check whether a number is prime, Armstrong or perfect number using functions\n\n#include<iostream>\nusing namespace std;\nvoid isPrime(int n)\n{\n    int check=1;\n    for(int i=2;i*i<=n;i++)\n    {\n        if(n%i==0)\n        {\n            check=0;\n            break;\n        }\n    }\n    if(check && n!=1)\n        cout << n \" is prime.\\\\n\";\n    else\n        cout << \" is not prime.\\\\n\";\n}\nvoid isArmstrong(int n)\n{\n     int k=n;\n     int count=0;\n     while(k>0)\n     {\n         ++count;\n         k/=10;\n     }\n     int number=0;\n     k=n;\n     while(k)\n     {\n         int x=k%10;\n         int p=1;\n         for (int i = 1; i <= count; ++i)\n         {\n             p*=x;\n         }\n         number+=p;\n         k/=10;\n     }\n     if(n==number)\n         cout << \" is Armstrong Number\\\\n\";\n     else\n         cout << \" is Not Armstrong Number\\\\n\";\n}\nvoid isPerfect(int Number)\n{\n   int Sum=0;\n   for(int i = 1 ; i < Number ; i++)\n   {\n     if(Number % i == 0)\n       Sum = Sum + i ;\n   }\n   if (Sum == Number)\n      cout << Number <<\" is a Perfect Number\\\\n\" ;\n   else\n      cout << Number << \" is not the Perfect Number\\\\n\";\n}\nint main()\n{\n    int n;\n    cin >> n;\n    isPrime(n);\n    isArmstrong(n);\n    isPerfect(n);\n    return 0;\n}\n`}</code></pre>\n    <h3>{`Output`}</h3>\n    <pre><code parentName=\"pre\" {...{}}>{`Enter a number: 4\n4 is not prime.\n4 is Armstrong Number\n4 is not the Perfect Number\n`}</code></pre>\n    <h2>{`Java Implementation`}</h2>\n    <h3>{`2. Write a Java program to find the square of any number using the function.`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`//Write a Java program to show the simple structure of a function.\nimport java.util.Scanner;\npublic class Funycode {\n    void isPrime(int n)\n    {\n        int check=1;\n        for(int i=2;i*i<=n;i++)\n        {\n            if(n%i==0)\n            {\n                check=0;\n                break;\n            }\n        }\n        if(check && n!=1)\n            printf(\"%d is prime.\\\\n\",n);\n        else\n            printf(\"%d is not prime.\\\\n\",n);\n    }\n    void isArmstrong(int n)\n    {\n         int k=n;\n         int count=0;\n         while(k>0)\n         {\n             ++count;\n             k/=10;\n         }\n         int number=0;\n         k=n;\n         while(k)\n         {\n             int x=k%10;\n             int p=1;\n             for (int i = 1; i <= count; ++i)\n             {\n                 p*=x;\n             }\n             number+=p;\n             k/=10;\n         }\n         if(n==number)\n             printf(\"%d is Armstrong Number\\\\n\",n);\n         else\n             printf(\"%d is Not Armstrong Number\\\\n\",n);\n    }\n    void isPerfect(int Number)\n    {\n        int Sum=0;\n     for(int i = 1 ; i < Number ; i++)\n      {\n       if(Number % i == 0)\n         Sum = Sum + i ;\n      }\n     if (Sum == Number)\n        printf(\"%d is a Perfect Number\\\\n\", Number) ;\n     else\n        printf(\"%d is not the Perfect Number\\\\n\", Number) ;\n    }\n\n    public static void main(String[] args) {\n        Scanner z = new Scanner(System.in);\n        int n;\n        n = z.nextInt();\n        Funycode object = new Funycode();//Create an object of Funcycode class\n        // Call function by object\n        object.isPrime(n);\n        object.isArmstrong(n);\n        object.isPerfect(n);\n    }\n}\n`}</code></pre>\n    <h3>{`Output`}</h3>\n    <pre><code parentName=\"pre\" {...{}}>{`Enter a number: 4\n4 is not prime.\n4 is Armstrong Number\n4 is not the Perfect Number\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}