{"data":{"post":{"slug":"/write-a-c-c-java-read-and-print-an-employees-detail-using-structure","title":"Write a C/C++/Java read and print an employee’s detail using structure.","date":"16.04.2020","tags":[{"name":"structure","slug":"structure"}],"description":null,"canonicalUrl":null,"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Write a C/C++/Java read and print an employee’s detail using structure.\",\n  \"category\": \"Structure And Union Index\",\n  \"tags\": [\"structure\"],\n  \"date\": \"2020-04-16T00:00:00.000Z\",\n  \"thumbnailText\": \"Index\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"C Implementation\"), mdx(\"h3\", null, \"2. Write a C read and print an employee\\u2019s detail using structure.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-c\"\n  }, \"//Write a C++ read and print an employee\\u2019s detail using structure.\\n#include<stdio.h>\\nstruct employee{\\n    char name[20];\\n    int empId;\\n    char role[10];\\n};\\n\\nint main(){\\n    struct employee emp1;\\n\\n    printf(\\\"enter emp name : \\\");\\n    fgets(emp1.name,sizeof(emp1.name),stdin);\\n    printf(\\\"enter emp id : \\\");\\n    scanf(\\\"%d\\\",&emp1.empId);\\n    getchar();\\n    printf(\\\"enter emp role : \\\");\\n    fgets(emp1.role,sizeof(emp1.role),stdin);\\n\\n    printf(\\\"\\\\nName : %s\\\",emp1.name);\\n    printf(\\\"Id   : %d \\\\n\\\",emp1.empId);\\n    printf(\\\"Role : %s\\\",emp1.role);\\n}\\n\")), mdx(\"h3\", null, \"Output\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"enter emp name : Ahosanul Hasan\\nenter emp id : 101\\nenter emp role : Manager\\n\\nName : Ahosanul Hasan\\nId   : 101\\nRole : Manager\\n\")), mdx(\"h2\", null, \"C++ Implementation\"), mdx(\"h3\", null, \"2. Write a C++ read and print an employee\\u2019s detail using structure.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-c\"\n  }, \"//Write a C++ program to read and print an employee\\u2019s detail using structure.\\n\\n#include<iostream>\\n#include <string.h>\\nusing namespace std;\\nstruct employee{\\n    char name[20];\\n    int empId;\\n    char role[10];\\n};\\nint main(){\\n    struct employee emp1;\\n    cout << \\\"enter emp name : \\\";\\n    fgets(emp1.name,sizeof(emp1.name),stdin);\\n    cout << \\\"enter emp id : \\\";\\n    cin >> emp1.empId;\\n    getchar();\\n    cout << \\\"enter emp role : \\\";\\n    fgets(emp1.role,sizeof(emp1.role),stdin);\\n    cout << \\\"Name : \\\" << emp1.name << endl;\\n    cout << \\\"Id   : \\\" << emp1.empId << endl;\\n    cout << \\\"Role : \\\" << emp1.role;\\n}\\n\")), mdx(\"h3\", null, \"Output\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"enter emp name : Ahosanul Hasan\\nenter emp id : 101\\nenter emp role : Manager\\n\\nName : Ahosanul Hasan\\nId   : 101\\nRole : Manager\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"C Implementation 2. Write a C read and print an employee’s detail using structure. Output C++ Implementation 2. Write a C++ read and print…","timeToRead":1,"banner":null}},"pageContext":{"slug":"/write-a-c-c-java-read-and-print-an-employees-detail-using-structure","formatString":"DD.MM.YYYY"}}